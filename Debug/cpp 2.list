
cpp 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000759c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800773c  0800773c  0000873c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007968  08007968  00008968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007970  08007970  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007970  08007970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007978  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  2000001c  08007994  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08007994  000094bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fc5  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003260  00000000  00000000  0001d011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00020278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efa  00000000  00000000  000215f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019182  00000000  00000000  000224f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cbc  00000000  00000000  0003b674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb00  00000000  00000000  00051330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ece30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  000ece74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000de  00000000  00000000  000f1fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007724 	.word	0x08007724

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08007724 	.word	0x08007724

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ee8 	.word	0x20012ee8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056a:	f000 fadf 	bl	8000b2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056e:	f000 f86f 	bl	8000650 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000572:	f000 f8d5 	bl	8000720 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	// Enable CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 8000576:	4b2a      	ldr	r3, [pc, #168]	@ (8000620 <main+0xbc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a29      	ldr	r2, [pc, #164]	@ (8000620 <main+0xbc>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

	// Start SEGGER Uart (segger_uart.c)
	SEGGER_UART_init(921600);
 8000582:	f44f 2061 	mov.w	r0, #921600	@ 0xe1000
 8000586:	f004 fe63 	bl	8005250 <SEGGER_UART_init>

	// Start SEGGER
	SEGGER_SYSVIEW_Conf();
 800058a:	f007 f86b 	bl	8007664 <SEGGER_SYSVIEW_Conf>

	xSemaphore1 = xSemaphoreCreateMutex();
 800058e:	2001      	movs	r0, #1
 8000590:	f001 fe50 	bl	8002234 <xQueueCreateMutex>
 8000594:	4603      	mov	r3, r0
 8000596:	4a23      	ldr	r2, [pc, #140]	@ (8000624 <main+0xc0>)
 8000598:	6013      	str	r3, [r2, #0]
	xSemaphore2 = xSemaphoreCreateMutex();
 800059a:	2001      	movs	r0, #1
 800059c:	f001 fe4a 	bl	8002234 <xQueueCreateMutex>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <main+0xc4>)
 80005a4:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task1_handler, "task-1", 200, "task1: Turn on the led",
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <main+0xc8>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2303      	movs	r3, #3
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <main+0xcc>)
 80005b0:	22c8      	movs	r2, #200	@ 0xc8
 80005b2:	4920      	ldr	r1, [pc, #128]	@ (8000634 <main+0xd0>)
 80005b4:	4820      	ldr	r0, [pc, #128]	@ (8000638 <main+0xd4>)
 80005b6:	f002 fb77 	bl	8002ca8 <xTaskCreate>
 80005ba:	60f8      	str	r0, [r7, #12]
			3, &task1_handle);
	configASSERT(status == pdPASS);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00b      	beq.n	80005da <main+0x76>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c6:	f383 8811 	msr	BASEPRI, r3
 80005ca:	f3bf 8f6f 	isb	sy
 80005ce:	f3bf 8f4f 	dsb	sy
 80005d2:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x72>

	nxt_del_handle = task1_handle;
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <main+0xc8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <main+0xd8>)
 80005e0:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task2_handler, "task-2", 200,
 80005e2:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <main+0xdc>)
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2302      	movs	r3, #2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	4b16      	ldr	r3, [pc, #88]	@ (8000644 <main+0xe0>)
 80005ec:	22c8      	movs	r2, #200	@ 0xc8
 80005ee:	4916      	ldr	r1, [pc, #88]	@ (8000648 <main+0xe4>)
 80005f0:	4816      	ldr	r0, [pc, #88]	@ (800064c <main+0xe8>)
 80005f2:	f002 fb59 	bl	8002ca8 <xTaskCreate>
 80005f6:	60f8      	str	r0, [r7, #12]
			"task2: Turn off the led", 2, &task2_handle);
	configASSERT(status == pdPASS);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d00b      	beq.n	8000616 <main+0xb2>
        __asm volatile
 80005fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	f3bf 8f6f 	isb	sy
 800060a:	f3bf 8f4f 	dsb	sy
 800060e:	607b      	str	r3, [r7, #4]
    }
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <main+0xae>
//  configASSERT(status == pdPASS);

//  status = xTaskCreate(btn_handler, "btn", 200, "Button Task: ", 4, &btn_handle);
//  configASSERT(status == pdPASS);

	vTaskStartScheduler();
 8000616:	f002 fd0b 	bl	8003030 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0xb6>
 800061e:	bf00      	nop
 8000620:	e0001000 	.word	0xe0001000
 8000624:	20000038 	.word	0x20000038
 8000628:	2000003c 	.word	0x2000003c
 800062c:	20000040 	.word	0x20000040
 8000630:	0800773c 	.word	0x0800773c
 8000634:	08007754 	.word	0x08007754
 8000638:	080007e5 	.word	0x080007e5
 800063c:	20000048 	.word	0x20000048
 8000640:	20000044 	.word	0x20000044
 8000644:	0800775c 	.word	0x0800775c
 8000648:	08007774 	.word	0x08007774
 800064c:	08000845 	.word	0x08000845

08000650 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 f826 	bl	80076b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <SystemClock_Config+0xc8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a26      	ldr	r2, [pc, #152]	@ (8000718 <SystemClock_Config+0xc8>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b21      	ldr	r3, [pc, #132]	@ (800071c <SystemClock_Config+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a20      	ldr	r2, [pc, #128]	@ (800071c <SystemClock_Config+0xcc>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	@ 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fceb 	bl	80010b0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
		Error_Handler();
 80006e0:	f000 f918 	bl	8000914 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2102      	movs	r1, #2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 ff4d 	bl	80015a0 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc0>
		Error_Handler();
 800070c:	f000 f902 	bl	8000914 <Error_Handler>
	}
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	@ 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <MX_GPIO_Init+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a26      	ldr	r2, [pc, #152]	@ (80007d8 <MX_GPIO_Init+0xb8>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <MX_GPIO_Init+0xb8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_GPIO_Init+0xb8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a1f      	ldr	r2, [pc, #124]	@ (80007d8 <MX_GPIO_Init+0xb8>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_GPIO_Init+0xb8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	481a      	ldr	r0, [pc, #104]	@ (80007dc <MX_GPIO_Init+0xbc>)
 8000774:	f000 fc82 	bl	800107c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4814      	ldr	r0, [pc, #80]	@ (80007e0 <MX_GPIO_Init+0xc0>)
 800078e:	f000 faf1 	bl	8000d74 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000792:	230c      	movs	r3, #12
 8000794:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a2:	2307      	movs	r3, #7
 80007a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0xbc>)
 80007ae:	f000 fae1 	bl	8000d74 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0xbc>)
 80007ca:	f000 fad3 	bl	8000d74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020800 	.word	0x40020800

080007e4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *param) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	while (1) {

		if ( xSemaphoreTake( xSemaphore1, ( TickType_t ) 10 ) == pdTRUE) {
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <task1_handler+0x50>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	210a      	movs	r1, #10
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 ff74 	bl	80026e0 <xQueueSemaphoreTake>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d10e      	bne.n	800081c <task1_handler+0x38>
			/* We were able to obtain the semaphore and can now access the
			 shared resource. */

			/* ... */
			SEGGER_SYSVIEW_PrintfTarget("Take semaphore 1\n");
 80007fe:	480e      	ldr	r0, [pc, #56]	@ (8000838 <task1_handler+0x54>)
 8000800:	f006 fe84 	bl	800750c <SEGGER_SYSVIEW_PrintfTarget>

			vTaskDelay(1000);
 8000804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000808:	f002 fbd8 	bl	8002fbc <vTaskDelay>

			/* We have finished accessing the shared resource. Release the
			 semaphore. */
			xSemaphoreGive(xSemaphore1);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <task1_handler+0x50>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	2300      	movs	r3, #0
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	f001 fd25 	bl	8002264 <xQueueGenericSend>
 800081a:	e002      	b.n	8000822 <task1_handler+0x3e>
		} else {
			/* We could not obtain the semaphore and can therefore not access
			 the shared resource safely. */
			SEGGER_SYSVIEW_PrintfTarget("Fail taking semaphore 1\n");
 800081c:	4807      	ldr	r0, [pc, #28]	@ (800083c <task1_handler+0x58>)
 800081e:	f006 fe75 	bl	800750c <SEGGER_SYSVIEW_PrintfTarget>
		}
		taskYIELD();
 8000822:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <task1_handler+0x5c>)
 8000824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	f3bf 8f6f 	isb	sy
		if ( xSemaphoreTake( xSemaphore1, ( TickType_t ) 10 ) == pdTRUE) {
 8000832:	e7db      	b.n	80007ec <task1_handler+0x8>
 8000834:	20000038 	.word	0x20000038
 8000838:	0800777c 	.word	0x0800777c
 800083c:	08007790 	.word	0x08007790
 8000840:	e000ed04 	.word	0xe000ed04

08000844 <task2_handler>:
	}
}

static void task2_handler(void *param) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while (1) {
		if ( xSemaphoreTake( xSemaphore1, ( TickType_t ) 10 ) == pdTRUE) {
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <task2_handler+0x90>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	210a      	movs	r1, #10
 8000852:	4618      	mov	r0, r3
 8000854:	f001 ff44 	bl	80026e0 <xQueueSemaphoreTake>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d129      	bne.n	80008b2 <task2_handler+0x6e>

			SEGGER_SYSVIEW_PrintfTarget("Task2 take semaphore 1\n");
 800085e:	481e      	ldr	r0, [pc, #120]	@ (80008d8 <task2_handler+0x94>)
 8000860:	f006 fe54 	bl	800750c <SEGGER_SYSVIEW_PrintfTarget>

			vTaskDelay(1000);
 8000864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000868:	f002 fba8 	bl	8002fbc <vTaskDelay>

			if (xSemaphoreTake(xSemaphore2, (TickType_t) 10) == pdTRUE) {
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <task2_handler+0x98>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	210a      	movs	r1, #10
 8000872:	4618      	mov	r0, r3
 8000874:	f001 ff34 	bl	80026e0 <xQueueSemaphoreTake>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d107      	bne.n	800088e <task2_handler+0x4a>
				SEGGER_SYSVIEW_PrintfTarget("Task2 take semaphore 2\n");
 800087e:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <task2_handler+0x9c>)
 8000880:	f006 fe44 	bl	800750c <SEGGER_SYSVIEW_PrintfTarget>
				vTaskDelay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000888:	f002 fb98 	bl	8002fbc <vTaskDelay>
 800088c:	e002      	b.n	8000894 <task2_handler+0x50>
			} else {
				SEGGER_SYSVIEW_PrintfTarget("Task2 fail taking semaphore 2\n");
 800088e:	4815      	ldr	r0, [pc, #84]	@ (80008e4 <task2_handler+0xa0>)
 8000890:	f006 fe3c 	bl	800750c <SEGGER_SYSVIEW_PrintfTarget>
			}

			xSemaphoreGive(xSemaphore2);
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <task2_handler+0x98>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	2300      	movs	r3, #0
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	f001 fce1 	bl	8002264 <xQueueGenericSend>
			xSemaphoreGive(xSemaphore1);
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <task2_handler+0x90>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	f001 fcda 	bl	8002264 <xQueueGenericSend>
 80008b0:	e002      	b.n	80008b8 <task2_handler+0x74>
		} else {

			SEGGER_SYSVIEW_PrintfTarget("Task2 fail taking semaphore 1\n");
 80008b2:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <task2_handler+0xa4>)
 80008b4:	f006 fe2a 	bl	800750c <SEGGER_SYSVIEW_PrintfTarget>
		}
		vTaskDelay(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008bc:	f002 fb7e 	bl	8002fbc <vTaskDelay>
		taskYIELD();
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <task2_handler+0xa8>)
 80008c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	f3bf 8f4f 	dsb	sy
 80008cc:	f3bf 8f6f 	isb	sy
		if ( xSemaphoreTake( xSemaphore1, ( TickType_t ) 10 ) == pdTRUE) {
 80008d0:	e7bc      	b.n	800084c <task2_handler+0x8>
 80008d2:	bf00      	nop
 80008d4:	20000038 	.word	0x20000038
 80008d8:	080077ac 	.word	0x080077ac
 80008dc:	2000003c 	.word	0x2000003c
 80008e0:	080077c4 	.word	0x080077c4
 80008e4:	080077dc 	.word	0x080077dc
 80008e8:	080077fc 	.word	0x080077fc
 80008ec:	e000ed04 	.word	0xe000ed04

080008f0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d101      	bne.n	8000906 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000902:	f000 f935 	bl	8000b70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40000800 	.word	0x40000800

08000914 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800095e:	f003 ff35 	bl	80047cc <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	@ 0x38
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4b33      	ldr	r3, [pc, #204]	@ (8000a54 <HAL_InitTick+0xe4>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	4a32      	ldr	r2, [pc, #200]	@ (8000a54 <HAL_InitTick+0xe4>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000990:	4b30      	ldr	r3, [pc, #192]	@ (8000a54 <HAL_InitTick+0xe4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f003 0304 	and.w	r3, r3, #4
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099c:	f107 0210 	add.w	r2, r7, #16
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 ffc6 	bl	8001938 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ac:	6a3b      	ldr	r3, [r7, #32]
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b6:	f000 ffab 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 80009ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80009bc:	e004      	b.n	80009c8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009be:	f000 ffa7 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 80009c2:	4603      	mov	r3, r0
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <HAL_InitTick+0xe8>)
 80009cc:	fba2 2303 	umull	r2, r3, r2, r3
 80009d0:	0c9b      	lsrs	r3, r3, #18
 80009d2:	3b01      	subs	r3, #1
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009d6:	4b21      	ldr	r3, [pc, #132]	@ (8000a5c <HAL_InitTick+0xec>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <HAL_InitTick+0xf0>)
 80009da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <HAL_InitTick+0xec>)
 80009de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009e4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <HAL_InitTick+0xec>)
 80009e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <HAL_InitTick+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <HAL_InitTick+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_InitTick+0xec>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009fc:	4817      	ldr	r0, [pc, #92]	@ (8000a5c <HAL_InitTick+0xec>)
 80009fe:	f000 ffcd 	bl	800199c <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11b      	bne.n	8000a48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a10:	4812      	ldr	r0, [pc, #72]	@ (8000a5c <HAL_InitTick+0xec>)
 8000a12:	f001 f81d 	bl	8001a50 <HAL_TIM_Base_Start_IT>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d111      	bne.n	8000a48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a24:	201e      	movs	r0, #30
 8000a26:	f000 f997 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d808      	bhi.n	8000a42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	201e      	movs	r0, #30
 8000a36:	f000 f973 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_InitTick+0xf4>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e002      	b.n	8000a48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3738      	adds	r7, #56	@ 0x38
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	2000004c 	.word	0x2000004c
 8000a60:	40000800 	.word	0x40000800
 8000a64:	20000004 	.word	0x20000004

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000aa4:	4802      	ldr	r0, [pc, #8]	@ (8000ab0 <TIM4_IRQHandler+0x10>)
 8000aa6:	f001 f835 	bl	8001b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000004c 	.word	0x2000004c

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopFillZerobss+0xe>
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x16>)
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopFillZerobss+0x1a>)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:
 8000aea:	58d4      	ldr	r4, [r2, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:
 8000af0:	18c4      	adds	r4, r0, r3
 8000af2:	428c      	cmp	r4, r1
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x1e>)
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopFillZerobss+0x22>)
 8000afa:	2300      	movs	r3, #0
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:
 8000b02:	42a2      	cmp	r2, r4
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>
 8000b06:	f006 fddb 	bl	80076c0 <__libc_init_array>
 8000b0a:	f7ff fd2b 	bl	8000564 <main>
 8000b0e:	4770      	bx	lr
 8000b10:	20020000 	.word	0x20020000
 8000b14:	20000000 	.word	0x20000000
 8000b18:	2000001c 	.word	0x2000001c
 8000b1c:	08007978 	.word	0x08007978
 8000b20:	2000001c 	.word	0x2000001c
 8000b24:	200144bc 	.word	0x200144bc

08000b28 <ADC_IRQHandler>:
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f7ff ff08 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fede 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000094 	.word	0x20000094

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000094 	.word	0x20000094

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e159      	b.n	8001044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8148 	bne.w	800103e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80a2 	beq.w	800103e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b57      	ldr	r3, [pc, #348]	@ (800105c <HAL_GPIO_Init+0x2e8>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a56      	ldr	r2, [pc, #344]	@ (800105c <HAL_GPIO_Init+0x2e8>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b54      	ldr	r3, [pc, #336]	@ (800105c <HAL_GPIO_Init+0x2e8>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a52      	ldr	r2, [pc, #328]	@ (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a49      	ldr	r2, [pc, #292]	@ (8001064 <HAL_GPIO_Init+0x2f0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x202>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a48      	ldr	r2, [pc, #288]	@ (8001068 <HAL_GPIO_Init+0x2f4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x1fe>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a47      	ldr	r2, [pc, #284]	@ (800106c <HAL_GPIO_Init+0x2f8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x1fa>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a46      	ldr	r2, [pc, #280]	@ (8001070 <HAL_GPIO_Init+0x2fc>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x1f6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a45      	ldr	r2, [pc, #276]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x1f2>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x204>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	@ (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b38      	ldr	r3, [pc, #224]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a2f      	ldr	r2, [pc, #188]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fea:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100e:	4a1a      	ldr	r2, [pc, #104]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001038:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <HAL_GPIO_Init+0x304>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f aea2 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40013c00 	.word	0x40013c00

0800107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
 8001088:	4613      	mov	r3, r2
 800108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001092:	887a      	ldrh	r2, [r7, #2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001098:	e003      	b.n	80010a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	041a      	lsls	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	619a      	str	r2, [r3, #24]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e267      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d075      	beq.n	80011ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010ce:	4b88      	ldr	r3, [pc, #544]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d00c      	beq.n	80010f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010da:	4b85      	ldr	r3, [pc, #532]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d112      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010e6:	4b82      	ldr	r3, [pc, #520]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010f2:	d10b      	bne.n	800110c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	4b7e      	ldr	r3, [pc, #504]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d05b      	beq.n	80011b8 <HAL_RCC_OscConfig+0x108>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d157      	bne.n	80011b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e242      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001114:	d106      	bne.n	8001124 <HAL_RCC_OscConfig+0x74>
 8001116:	4b76      	ldr	r3, [pc, #472]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e01d      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x98>
 800112e:	4b70      	ldr	r3, [pc, #448]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6f      	ldr	r2, [pc, #444]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001134:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b6d      	ldr	r3, [pc, #436]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6c      	ldr	r2, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0xb0>
 8001148:	4b69      	ldr	r3, [pc, #420]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a68      	ldr	r2, [pc, #416]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800114e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b66      	ldr	r3, [pc, #408]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a65      	ldr	r2, [pc, #404]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800115a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d013      	beq.n	8001190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fd16 	bl	8000b98 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fd12 	bl	8000b98 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e207      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b5b      	ldr	r3, [pc, #364]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0xc0>
 800118e:	e014      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fd02 	bl	8000b98 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fcfe 	bl	8000b98 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e1f3      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0xe8>
 80011b6:	e000      	b.n	80011ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d063      	beq.n	800128e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011c6:	4b4a      	ldr	r3, [pc, #296]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011d2:	4b47      	ldr	r3, [pc, #284]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d11c      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011de:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b41      	ldr	r3, [pc, #260]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e1c7      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4937      	ldr	r1, [pc, #220]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e03a      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d020      	beq.n	8001262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b34      	ldr	r3, [pc, #208]	@ (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fcb7 	bl	8000b98 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fcb3 	bl	8000b98 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1a8      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4925      	ldr	r1, [pc, #148]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e015      	b.n	800128e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001262:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <HAL_RCC_OscConfig+0x244>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc96 	bl	8000b98 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fc92 	bl	8000b98 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e187      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d036      	beq.n	8001308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d016      	beq.n	80012d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fc76 	bl	8000b98 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc72 	bl	8000b98 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e167      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <HAL_RCC_OscConfig+0x240>)
 80012c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x200>
 80012ce:	e01b      	b.n	8001308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d0:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_OscConfig+0x248>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc5f 	bl	8000b98 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012dc:	e00e      	b.n	80012fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012de:	f7ff fc5b 	bl	8000b98 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d907      	bls.n	80012fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e150      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470000 	.word	0x42470000
 80012f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	4b88      	ldr	r3, [pc, #544]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ea      	bne.n	80012de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8097 	beq.w	8001444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800131a:	4b81      	ldr	r3, [pc, #516]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	4b7d      	ldr	r3, [pc, #500]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	4a7c      	ldr	r2, [pc, #496]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	@ 0x40
 8001336:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001342:	2301      	movs	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b77      	ldr	r3, [pc, #476]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d118      	bne.n	8001384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001352:	4b74      	ldr	r3, [pc, #464]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a73      	ldr	r2, [pc, #460]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800135e:	f7ff fc1b 	bl	8000b98 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fc17 	bl	8000b98 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e10c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	4b6a      	ldr	r3, [pc, #424]	@ (8001524 <HAL_RCC_OscConfig+0x474>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x2ea>
 800138c:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001390:	4a63      	ldr	r2, [pc, #396]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6713      	str	r3, [r2, #112]	@ 0x70
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x30c>
 80013a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ba:	e00b      	b.n	80013d4 <HAL_RCC_OscConfig+0x324>
 80013bc:	4b58      	ldr	r3, [pc, #352]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4a57      	ldr	r2, [pc, #348]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c8:	4b55      	ldr	r3, [pc, #340]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013cc:	4a54      	ldr	r2, [pc, #336]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013ce:	f023 0304 	bic.w	r3, r3, #4
 80013d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d015      	beq.n	8001408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbdc 	bl	8000b98 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbd8 	bl	8000b98 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0cb      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fa:	4b49      	ldr	r3, [pc, #292]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ee      	beq.n	80013e4 <HAL_RCC_OscConfig+0x334>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fbc6 	bl	8000b98 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fbc2 	bl	8000b98 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e0b5      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1ee      	bne.n	8001410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b39      	ldr	r3, [pc, #228]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	4a38      	ldr	r2, [pc, #224]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 800143e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001442:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a1 	beq.w	8001590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	2b08      	cmp	r3, #8
 8001458:	d05c      	beq.n	8001514 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d141      	bne.n	80014e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fb96 	bl	8000b98 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001470:	f7ff fb92 	bl	8000b98 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e087      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	3b01      	subs	r3, #1
 80014a8:	041b      	lsls	r3, r3, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	491b      	ldr	r1, [pc, #108]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb6b 	bl	8000b98 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fb67 	bl	8000b98 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e05c      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x416>
 80014e4:	e054      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <HAL_RCC_OscConfig+0x478>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb54 	bl	8000b98 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fb50 	bl	8000b98 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e045      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_RCC_OscConfig+0x470>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x444>
 8001512:	e03d      	b.n	8001590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e038      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000
 8001528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x4ec>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d028      	beq.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d121      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d11a      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800155c:	4013      	ands	r3, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001564:	4293      	cmp	r3, r2
 8001566:	d111      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0cc      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90c      	bls.n	80015dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b65      	ldr	r3, [pc, #404]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b63      	ldr	r3, [pc, #396]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0b8      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d020      	beq.n	800162a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f4:	4b59      	ldr	r3, [pc, #356]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a58      	ldr	r2, [pc, #352]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b50      	ldr	r3, [pc, #320]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	494d      	ldr	r1, [pc, #308]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d044      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e07f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d003      	beq.n	800165e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	2b03      	cmp	r3, #3
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e067      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b37      	ldr	r3, [pc, #220]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4934      	ldr	r1, [pc, #208]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff fa82 	bl	8000b98 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff fa7e 	bl	8000b98 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e04f      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b25      	ldr	r3, [pc, #148]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d20c      	bcs.n	80016e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <HAL_RCC_ClockConfig+0x1b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e032      	b.n	800174e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4916      	ldr	r1, [pc, #88]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	490e      	ldr	r1, [pc, #56]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001726:	f000 f821 	bl	800176c <HAL_RCC_GetSysClockFreq>
 800172a:	4602      	mov	r2, r0
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	490a      	ldr	r1, [pc, #40]	@ (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	5ccb      	ldrb	r3, [r1, r3]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f912 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00
 800175c:	40023800 	.word	0x40023800
 8001760:	08007928 	.word	0x08007928
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b090      	sub	sp, #64	@ 0x40
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b08      	cmp	r3, #8
 800178e:	d00d      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x40>
 8001790:	2b08      	cmp	r3, #8
 8001792:	f200 80a1 	bhi.w	80018d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x34>
 800179a:	2b04      	cmp	r3, #4
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800179e:	e09b      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017a4:	e09b      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a6:	4b53      	ldr	r3, [pc, #332]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017aa:	e098      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ac:	4b4f      	ldr	r3, [pc, #316]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b6:	4b4d      	ldr	r3, [pc, #308]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d028      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c2:	4b4a      	ldr	r3, [pc, #296]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	2200      	movs	r2, #0
 80017ca:	623b      	str	r3, [r7, #32]
 80017cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017d4:	2100      	movs	r1, #0
 80017d6:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017d8:	fb03 f201 	mul.w	r2, r3, r1
 80017dc:	2300      	movs	r3, #0
 80017de:	fb00 f303 	mul.w	r3, r0, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	4a43      	ldr	r2, [pc, #268]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e6:	fba0 1202 	umull	r1, r2, r0, r2
 80017ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017ec:	460a      	mov	r2, r1
 80017ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f2:	4413      	add	r3, r2
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f8:	2200      	movs	r2, #0
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	61fa      	str	r2, [r7, #28]
 80017fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001806:	f7fe fd35 	bl	8000274 <__aeabi_uldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4613      	mov	r3, r2
 8001810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001812:	e053      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001814:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	2200      	movs	r2, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	617a      	str	r2, [r7, #20]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001826:	f04f 0b00 	mov.w	fp, #0
 800182a:	4652      	mov	r2, sl
 800182c:	465b      	mov	r3, fp
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	ebb2 080a 	subs.w	r8, r2, sl
 8001846:	eb63 090b 	sbc.w	r9, r3, fp
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800185a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800185e:	ebb2 0408 	subs.w	r4, r2, r8
 8001862:	eb63 0509 	sbc.w	r5, r3, r9
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	00eb      	lsls	r3, r5, #3
 8001870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001874:	00e2      	lsls	r2, r4, #3
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	eb14 030a 	adds.w	r3, r4, sl
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	eb45 030b 	adc.w	r3, r5, fp
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018a6:	2200      	movs	r2, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	60fa      	str	r2, [r7, #12]
 80018ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018b0:	f7fe fce0 	bl	8000274 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x180>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80018cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80018da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3740      	adds	r7, #64	@ 0x40
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	017d7840 	.word	0x017d7840

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	@ (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08007938 	.word	0x08007938

08001938 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	220f      	movs	r2, #15
 8001946:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001954:	4b0f      	ldr	r3, [pc, #60]	@ (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	08db      	lsrs	r3, r3, #3
 8001972:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <HAL_RCC_GetClockConfig+0x60>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0207 	and.w	r2, r3, #7
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	601a      	str	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e041      	b.n	8001a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f839 	bl	8001a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f000 f9b2 	bl	8001d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d001      	beq.n	8001a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e044      	b.n	8001af2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1e      	ldr	r2, [pc, #120]	@ (8001b00 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d018      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x6c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a92:	d013      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x6c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1a      	ldr	r2, [pc, #104]	@ (8001b04 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00e      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x6c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_TIM_Base_Start_IT+0xb8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d009      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x6c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <HAL_TIM_Base_Start_IT+0xbc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d004      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x6c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a16      	ldr	r2, [pc, #88]	@ (8001b10 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d111      	bne.n	8001ae0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d010      	beq.n	8001af0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ade:	e007      	b.n	8001af0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40000c00 	.word	0x40000c00
 8001b10:	40014000 	.word	0x40014000

08001b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d020      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01b      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0202 	mvn.w	r2, #2
 8001b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8d2 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001b64:	e005      	b.n	8001b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f8c4 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8d5 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d020      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d01b      	beq.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0204 	mvn.w	r2, #4
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8ac 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f89e 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8af 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d020      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0208 	mvn.w	r2, #8
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f886 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f878 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f889 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d020      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0210 	mvn.w	r2, #16
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2208      	movs	r2, #8
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f860 	bl	8001d08 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f852 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f863 	bl	8001d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00c      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0201 	mvn.w	r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7fe fe38 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00c      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8e6 	bl	8001e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f834 	bl	8001d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0220 	mvn.w	r2, #32
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8b8 	bl	8001e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3a      	ldr	r2, [pc, #232]	@ (8001e40 <TIM_Base_SetConfig+0xfc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00f      	beq.n	8001d7c <TIM_Base_SetConfig+0x38>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d62:	d00b      	beq.n	8001d7c <TIM_Base_SetConfig+0x38>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a37      	ldr	r2, [pc, #220]	@ (8001e44 <TIM_Base_SetConfig+0x100>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d007      	beq.n	8001d7c <TIM_Base_SetConfig+0x38>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a36      	ldr	r2, [pc, #216]	@ (8001e48 <TIM_Base_SetConfig+0x104>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d003      	beq.n	8001d7c <TIM_Base_SetConfig+0x38>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a35      	ldr	r2, [pc, #212]	@ (8001e4c <TIM_Base_SetConfig+0x108>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d108      	bne.n	8001d8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2b      	ldr	r2, [pc, #172]	@ (8001e40 <TIM_Base_SetConfig+0xfc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d01b      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d9c:	d017      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <TIM_Base_SetConfig+0x100>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <TIM_Base_SetConfig+0x104>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00f      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a26      	ldr	r2, [pc, #152]	@ (8001e4c <TIM_Base_SetConfig+0x108>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00b      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a25      	ldr	r2, [pc, #148]	@ (8001e50 <TIM_Base_SetConfig+0x10c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a24      	ldr	r2, [pc, #144]	@ (8001e54 <TIM_Base_SetConfig+0x110>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <TIM_Base_SetConfig+0x8a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	@ (8001e58 <TIM_Base_SetConfig+0x114>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a0e      	ldr	r2, [pc, #56]	@ (8001e40 <TIM_Base_SetConfig+0xfc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d103      	bne.n	8001e14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f023 0201 	bic.w	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
  }
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40000800 	.word	0x40000800
 8001e4c:	40000c00 	.word	0x40000c00
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40014400 	.word	0x40014400
 8001e58:	40014800 	.word	0x40014800

08001e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f103 0208 	add.w	r2, r3, #8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e9c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f103 0208 	add.w	r2, r3, #8
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f103 0208 	add.w	r2, r3, #8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f3c:	d103      	bne.n	8001f46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	e00c      	b.n	8001f60 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3308      	adds	r3, #8
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e002      	b.n	8001f54 <vListInsert+0x2e>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d2f6      	bcs.n	8001f4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6892      	ldr	r2, [r2, #8]
 8001fae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6852      	ldr	r2, [r2, #4]
 8001fb8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d103      	bne.n	8001fcc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <xQueueGenericReset+0x30>
        __asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	60fb      	str	r3, [r7, #12]
    }
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d05d      	beq.n	80020de <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002026:	2b00      	cmp	r3, #0
 8002028:	d059      	beq.n	80020de <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002032:	2100      	movs	r1, #0
 8002034:	fba3 2302 	umull	r2, r3, r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d000      	beq.n	800203e <xQueueGenericReset+0x52>
 800203c:	2101      	movs	r1, #1
 800203e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d14c      	bne.n	80020de <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002044:	f002 fc42 	bl	80048cc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002050:	6939      	ldr	r1, [r7, #16]
 8002052:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	441a      	add	r2, r3
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2200      	movs	r2, #0
 8002062:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002074:	3b01      	subs	r3, #1
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	441a      	add	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	22ff      	movs	r2, #255	@ 0xff
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	22ff      	movs	r2, #255	@ 0xff
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d114      	bne.n	80020c4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	3310      	adds	r3, #16
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fb4a 	bl	8003740 <xTaskRemoveFromEventList>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80020b2:	4b16      	ldr	r3, [pc, #88]	@ (800210c <xQueueGenericReset+0x120>)
 80020b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	e009      	b.n	80020d8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	3310      	adds	r3, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fedb 	bl	8001e84 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	3324      	adds	r3, #36	@ 0x24
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fed6 	bl	8001e84 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80020d8:	f002 fc2a 	bl	8004930 <vPortExitCritical>
 80020dc:	e001      	b.n	80020e2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10b      	bne.n	8002100 <xQueueGenericReset+0x114>
        __asm volatile
 80020e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	60bb      	str	r3, [r7, #8]
    }
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002100:	697b      	ldr	r3, [r7, #20]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000ed04 	.word	0xe000ed04

08002110 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	@ 0x28
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	4613      	mov	r3, r2
 800211c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d02e      	beq.n	8002186 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002128:	2100      	movs	r1, #0
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	fba3 2302 	umull	r2, r3, r3, r2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d000      	beq.n	8002138 <xQueueGenericCreate+0x28>
 8002136:	2101      	movs	r1, #1
 8002138:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d123      	bne.n	8002186 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002146:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800214a:	d81c      	bhi.n	8002186 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3350      	adds	r3, #80	@ 0x50
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fce8 	bl	8004b30 <pvPortMalloc>
 8002160:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01d      	beq.n	80021a4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3350      	adds	r3, #80	@ 0x50
 8002170:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f815 	bl	80021ae <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002184:	e00e      	b.n	80021a4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10b      	bne.n	80021a4 <xQueueGenericCreate+0x94>
        __asm volatile
 800218c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002190:	f383 8811 	msr	BASEPRI, r3
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	613b      	str	r3, [r7, #16]
    }
 800219e:	bf00      	nop
 80021a0:	bf00      	nop
 80021a2:	e7fd      	b.n	80021a0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80021a4:	69fb      	ldr	r3, [r7, #28]
    }
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e002      	b.n	80021d0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021dc:	2101      	movs	r1, #1
 80021de:	69b8      	ldr	r0, [r7, #24]
 80021e0:	f7ff ff04 	bl	8001fec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	2073      	movs	r0, #115	@ 0x73
 80021f4:	f004 fb70 	bl	80068d8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00e      	beq.n	800222c <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002220:	2300      	movs	r3, #0
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f81c 	bl	8002264 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800223e:	2301      	movs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	461a      	mov	r2, r3
 800224a:	6939      	ldr	r1, [r7, #16]
 800224c:	6978      	ldr	r0, [r7, #20]
 800224e:	f7ff ff5f 	bl	8002110 <xQueueGenericCreate>
 8002252:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff ffd3 	bl	8002200 <prvInitialiseMutex>

        return xNewQueue;
 800225a:	68fb      	ldr	r3, [r7, #12]
    }
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	@ 0x40
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002272:	2300      	movs	r3, #0
 8002274:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <xQueueGenericSend+0x34>
        __asm volatile
 8002280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <xQueueGenericSend+0x42>
 800229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <xQueueGenericSend+0x46>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueGenericSend+0x48>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <xQueueGenericSend+0x64>
        __asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d103      	bne.n	80022d6 <xQueueGenericSend+0x72>
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <xQueueGenericSend+0x76>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <xQueueGenericSend+0x78>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <xQueueGenericSend+0x94>
        __asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	623b      	str	r3, [r7, #32]
    }
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022f8:	f001 fc38 	bl	8003b6c <xTaskGetSchedulerState>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <xQueueGenericSend+0xa4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <xQueueGenericSend+0xa8>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <xQueueGenericSend+0xaa>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10b      	bne.n	800232a <xQueueGenericSend+0xc6>
        __asm volatile
 8002312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	61fb      	str	r3, [r7, #28]
    }
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	e7fd      	b.n	8002326 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800232a:	f002 facf 	bl	80048cc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800232e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <xQueueGenericSend+0xdc>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d136      	bne.n	80023ae <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fff6 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	460b      	mov	r3, r1
 8002352:	4601      	mov	r1, r0
 8002354:	205a      	movs	r0, #90	@ 0x5a
 8002356:	f004 fb35 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002360:	f000 fb06 	bl	8002970 <prvCopyDataToQueue>
 8002364:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <xQueueGenericSend+0x12c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	3324      	adds	r3, #36	@ 0x24
 8002372:	4618      	mov	r0, r3
 8002374:	f001 f9e4 	bl	8003740 <xTaskRemoveFromEventList>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d013      	beq.n	80023a6 <xQueueGenericSend+0x142>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800237e:	4b4d      	ldr	r3, [pc, #308]	@ (80024b4 <xQueueGenericSend+0x250>)
 8002380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	e00a      	b.n	80023a6 <xQueueGenericSend+0x142>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <xQueueGenericSend+0x142>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <xQueueGenericSend+0x250>)
 8002398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80023a6:	f002 fac3 	bl	8004930 <vPortExitCritical>
                return pdPASS;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07d      	b.n	80024aa <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d110      	bne.n	80023d6 <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80023b4:	f002 fabc 	bl	8004930 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80023b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 ffba 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	460b      	mov	r3, r1
 80023ca:	4601      	mov	r1, r0
 80023cc:	205a      	movs	r0, #90	@ 0x5a
 80023ce:	f004 faf9 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e069      	b.n	80024aa <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 80023d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 fa87 	bl	80038f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023ea:	f002 faa1 	bl	8004930 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023ee:	f000 fe81 	bl	80030f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023f2:	f002 fa6b 	bl	80048cc <vPortEnterCritical>
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002402:	d103      	bne.n	800240c <xQueueGenericSend+0x1a8>
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002412:	b25b      	sxtb	r3, r3
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002418:	d103      	bne.n	8002422 <xQueueGenericSend+0x1be>
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002422:	f002 fa85 	bl	8004930 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002426:	1d3a      	adds	r2, r7, #4
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f001 fa76 	bl	8003920 <xTaskCheckForTimeOut>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d124      	bne.n	8002484 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800243a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800243c:	f000 fb90 	bl	8002b60 <prvIsQueueFull>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d018      	beq.n	8002478 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002448:	3310      	adds	r3, #16
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f001 f906 	bl	8003660 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002456:	f000 fb1b 	bl	8002a90 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800245a:	f000 fe59 	bl	8003110 <xTaskResumeAll>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f47f af62 	bne.w	800232a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <xQueueGenericSend+0x250>)
 8002468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	e758      	b.n	800232a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800247a:	f000 fb09 	bl	8002a90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800247e:	f000 fe47 	bl	8003110 <xTaskResumeAll>
 8002482:	e752      	b.n	800232a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002484:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002486:	f000 fb03 	bl	8002a90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800248a:	f000 fe41 	bl	8003110 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800248e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002490:	4618      	mov	r0, r3
 8002492:	f004 ff4f 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	460b      	mov	r3, r1
 80024a0:	4601      	mov	r1, r0
 80024a2:	205a      	movs	r0, #90	@ 0x5a
 80024a4:	f004 fa8e 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80024a8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3738      	adds	r7, #56	@ 0x38
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08f      	sub	sp, #60	@ 0x3c
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10b      	bne.n	80024ea <xQueueReceive+0x32>
        __asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	623b      	str	r3, [r7, #32]
    }
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	e7fd      	b.n	80024e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <xQueueReceive+0x40>
 80024f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <xQueueReceive+0x44>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <xQueueReceive+0x46>
 80024fc:	2300      	movs	r3, #0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <xQueueReceive+0x62>
        __asm volatile
 8002502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	61fb      	str	r3, [r7, #28]
    }
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	e7fd      	b.n	8002516 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800251a:	f001 fb27 	bl	8003b6c <xTaskGetSchedulerState>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <xQueueReceive+0x72>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <xQueueReceive+0x76>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <xQueueReceive+0x78>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <xQueueReceive+0x94>
        __asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	61bb      	str	r3, [r7, #24]
    }
 8002546:	bf00      	nop
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800254c:	f002 f9be 	bl	80048cc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	2b00      	cmp	r3, #0
 800255a:	d02f      	beq.n	80025bc <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002560:	f000 fa70 	bl	8002a44 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	4618      	mov	r0, r3
 8002568:	f004 fee4 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 800256c:	4604      	mov	r4, r0
 800256e:	2000      	movs	r0, #0
 8002570:	f004 fee0 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2101      	movs	r1, #1
 800257a:	9100      	str	r1, [sp, #0]
 800257c:	4621      	mov	r1, r4
 800257e:	205c      	movs	r0, #92	@ 0x5c
 8002580:	f004 fa20 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00f      	beq.n	80025b4 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	3310      	adds	r3, #16
 8002598:	4618      	mov	r0, r3
 800259a:	f001 f8d1 	bl	8003740 <xTaskRemoveFromEventList>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025a4:	4b4d      	ldr	r3, [pc, #308]	@ (80026dc <xQueueReceive+0x224>)
 80025a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025b4:	f002 f9bc 	bl	8004930 <vPortExitCritical>
                return pdPASS;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e08a      	b.n	80026d2 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d113      	bne.n	80025ea <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025c2:	f002 f9b5 	bl	8004930 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 feb3 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80025ce:	4604      	mov	r4, r0
 80025d0:	2000      	movs	r0, #0
 80025d2:	f004 feaf 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2101      	movs	r1, #1
 80025dc:	9100      	str	r1, [sp, #0]
 80025de:	4621      	mov	r1, r4
 80025e0:	205c      	movs	r0, #92	@ 0x5c
 80025e2:	f004 f9ef 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e073      	b.n	80026d2 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f97d 	bl	80038f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025fe:	f002 f997 	bl	8004930 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002602:	f000 fd77 	bl	80030f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002606:	f002 f961 	bl	80048cc <vPortEnterCritical>
 800260a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002610:	b25b      	sxtb	r3, r3
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002616:	d103      	bne.n	8002620 <xQueueReceive+0x168>
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002626:	b25b      	sxtb	r3, r3
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800262c:	d103      	bne.n	8002636 <xQueueReceive+0x17e>
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002636:	f002 f97b 	bl	8004930 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800263a:	1d3a      	adds	r2, r7, #4
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f001 f96c 	bl	8003920 <xTaskCheckForTimeOut>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d124      	bne.n	8002698 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800264e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002650:	f000 fa70 	bl	8002b34 <prvIsQueueEmpty>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d018      	beq.n	800268c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	3324      	adds	r3, #36	@ 0x24
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fffc 	bl	8003660 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002668:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800266a:	f000 fa11 	bl	8002a90 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800266e:	f000 fd4f 	bl	8003110 <xTaskResumeAll>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f af69 	bne.w	800254c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <xQueueReceive+0x224>)
 800267c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	f3bf 8f6f 	isb	sy
 800268a:	e75f      	b.n	800254c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800268c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800268e:	f000 f9ff 	bl	8002a90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002692:	f000 fd3d 	bl	8003110 <xTaskResumeAll>
 8002696:	e759      	b.n	800254c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800269a:	f000 f9f9 	bl	8002a90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800269e:	f000 fd37 	bl	8003110 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026a4:	f000 fa46 	bl	8002b34 <prvIsQueueEmpty>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f43f af4e 	beq.w	800254c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fe3e 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80026b8:	4604      	mov	r4, r0
 80026ba:	2000      	movs	r0, #0
 80026bc:	f004 fe3a 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2101      	movs	r1, #1
 80026c6:	9100      	str	r1, [sp, #0]
 80026c8:	4621      	mov	r1, r4
 80026ca:	205c      	movs	r0, #92	@ 0x5c
 80026cc:	f004 f97a 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80026d0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3734      	adds	r7, #52	@ 0x34
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000ed04 	.word	0xe000ed04

080026e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b08f      	sub	sp, #60	@ 0x3c
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	61bb      	str	r3, [r7, #24]
    }
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <xQueueSemaphoreTake+0x54>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	617b      	str	r3, [r7, #20]
    }
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002734:	f001 fa1a 	bl	8003b6c <xTaskGetSchedulerState>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <xQueueSemaphoreTake+0x64>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <xQueueSemaphoreTake+0x68>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <xQueueSemaphoreTake+0x6a>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10b      	bne.n	8002766 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	613b      	str	r3, [r7, #16]
    }
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	e7fd      	b.n	8002762 <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002766:	f002 f8b1 	bl	80048cc <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d034      	beq.n	80027e0 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	4618      	mov	r0, r3
 800277a:	f004 fddb 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 800277e:	4604      	mov	r4, r0
 8002780:	2000      	movs	r0, #0
 8002782:	f004 fdd7 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 8002786:	4602      	mov	r2, r0
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2101      	movs	r1, #1
 800278c:	9100      	str	r1, [sp, #0]
 800278e:	4621      	mov	r1, r4
 8002790:	205c      	movs	r0, #92	@ 0x5c
 8002792:	f004 f917 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <xQueueSemaphoreTake+0xd0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80027a6:	f001 fbbf 	bl	8003f28 <pvTaskIncrementMutexHeldCount>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00f      	beq.n	80027d8 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	3310      	adds	r3, #16
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 ffbf 	bl	8003740 <xTaskRemoveFromEventList>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027c8:	4b5c      	ldr	r3, [pc, #368]	@ (800293c <xQueueSemaphoreTake+0x25c>)
 80027ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027d8:	f002 f8aa 	bl	8004930 <vPortExitCritical>
                return pdPASS;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0a9      	b.n	8002934 <xQueueSemaphoreTake+0x254>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d113      	bne.n	800280e <xQueueSemaphoreTake+0x12e>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80027e6:	f002 f8a3 	bl	8004930 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 fda1 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	4604      	mov	r4, r0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f004 fd9d 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4602      	mov	r2, r0
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2101      	movs	r1, #1
 8002800:	9100      	str	r1, [sp, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	205c      	movs	r0, #92	@ 0x5c
 8002806:	f004 f8dd 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800280a:	2300      	movs	r3, #0
 800280c:	e092      	b.n	8002934 <xQueueSemaphoreTake+0x254>
                }
                else if( xEntryTimeSet == pdFALSE )
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <xQueueSemaphoreTake+0x142>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002814:	f107 0308 	add.w	r3, r7, #8
 8002818:	4618      	mov	r0, r3
 800281a:	f001 f86b 	bl	80038f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800281e:	2301      	movs	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002822:	f002 f885 	bl	8004930 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002826:	f000 fc65 	bl	80030f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800282a:	f002 f84f 	bl	80048cc <vPortEnterCritical>
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002834:	b25b      	sxtb	r3, r3
 8002836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800283a:	d103      	bne.n	8002844 <xQueueSemaphoreTake+0x164>
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800284a:	b25b      	sxtb	r3, r3
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002850:	d103      	bne.n	800285a <xQueueSemaphoreTake+0x17a>
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800285a:	f002 f869 	bl	8004930 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800285e:	463a      	mov	r2, r7
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	4611      	mov	r1, r2
 8002866:	4618      	mov	r0, r3
 8002868:	f001 f85a 	bl	8003920 <xTaskCheckForTimeOut>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d132      	bne.n	80028d8 <xQueueSemaphoreTake+0x1f8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002874:	f000 f95e 	bl	8002b34 <prvIsQueueEmpty>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d026      	beq.n	80028cc <xQueueSemaphoreTake+0x1ec>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <xQueueSemaphoreTake+0x1ba>
                    {
                        taskENTER_CRITICAL();
 8002886:	f002 f821 	bl	80048cc <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4618      	mov	r0, r3
 8002890:	f001 f98a 	bl	8003ba8 <xTaskPriorityInherit>
 8002894:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8002896:	f002 f84b 	bl	8004930 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	3324      	adds	r3, #36	@ 0x24
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fedc 	bl	8003660 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80028a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028aa:	f000 f8f1 	bl	8002a90 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80028ae:	f000 fc2f 	bl	8003110 <xTaskResumeAll>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f47f af56 	bne.w	8002766 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 80028ba:	4b20      	ldr	r3, [pc, #128]	@ (800293c <xQueueSemaphoreTake+0x25c>)
 80028bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	e74c      	b.n	8002766 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80028cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028ce:	f000 f8df 	bl	8002a90 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028d2:	f000 fc1d 	bl	8003110 <xTaskResumeAll>
 80028d6:	e746      	b.n	8002766 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80028d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028da:	f000 f8d9 	bl	8002a90 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028de:	f000 fc17 	bl	8003110 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028e4:	f000 f926 	bl	8002b34 <prvIsQueueEmpty>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f43f af3b 	beq.w	8002766 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <xQueueSemaphoreTake+0x232>
                    {
                        taskENTER_CRITICAL();
 80028f6:	f001 ffe9 	bl	80048cc <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80028fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028fc:	f000 f820 	bl	8002940 <prvGetDisinheritPriorityAfterTimeout>
 8002900:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	69f9      	ldr	r1, [r7, #28]
 8002908:	4618      	mov	r0, r3
 800290a:	f001 fa49 	bl	8003da0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800290e:	f002 f80f 	bl	8004930 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fd0d 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 800291a:	4604      	mov	r4, r0
 800291c:	2000      	movs	r0, #0
 800291e:	f004 fd09 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 8002922:	4602      	mov	r2, r0
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	9100      	str	r1, [sp, #0]
 800292a:	4621      	mov	r1, r4
 800292c:	205c      	movs	r0, #92	@ 0x5c
 800292e:	f004 f849 	bl	80069c4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002932:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002934:	4618      	mov	r0, r3
 8002936:	3734      	adds	r7, #52	@ 0x34
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	e000ed04 	.word	0xe000ed04

08002940 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1c3 0305 	rsb	r3, r3, #5
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e001      	b.n	8002962 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002962:	68fb      	ldr	r3, [r7, #12]
    }
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002984:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d14d      	bne.n	8002a32 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4618      	mov	r0, r3
 800299c:	f001 f97e 	bl	8003c9c <xTaskPriorityDisinherit>
 80029a0:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e043      	b.n	8002a32 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d119      	bne.n	80029e4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6858      	ldr	r0, [r3, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	461a      	mov	r2, r3
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	f004 fea4 	bl	8007708 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	441a      	add	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d32b      	bcc.n	8002a32 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	e026      	b.n	8002a32 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	68d8      	ldr	r0, [r3, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	461a      	mov	r2, r3
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	f004 fe8a 	bl	8007708 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	425b      	negs	r3, r3
 80029fe:	441a      	add	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d207      	bcs.n	8002a20 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	425b      	negs	r3, r3
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d105      	bne.n	8002a32 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002a3a:	697b      	ldr	r3, [r7, #20]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d018      	beq.n	8002a88 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d303      	bcc.n	8002a78 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	461a      	mov	r2, r3
 8002a82:	6838      	ldr	r0, [r7, #0]
 8002a84:	f004 fe40 	bl	8007708 <memcpy>
    }
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a98:	f001 ff18 	bl	80048cc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aa2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aa4:	e011      	b.n	8002aca <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3324      	adds	r3, #36	@ 0x24
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fe44 	bl	8003740 <xTaskRemoveFromEventList>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002abe:	f000 ff97 	bl	80039f0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	dce9      	bgt.n	8002aa6 <prvUnlockQueue+0x16>
 8002ad2:	e000      	b.n	8002ad6 <prvUnlockQueue+0x46>
                    break;
 8002ad4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	22ff      	movs	r2, #255	@ 0xff
 8002ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002ade:	f001 ff27 	bl	8004930 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ae2:	f001 fef3 	bl	80048cc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002aec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002aee:	e011      	b.n	8002b14 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d012      	beq.n	8002b1e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3310      	adds	r3, #16
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fe1f 	bl	8003740 <xTaskRemoveFromEventList>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b08:	f000 ff72 	bl	80039f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b0c:	7bbb      	ldrb	r3, [r7, #14]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	dce9      	bgt.n	8002af0 <prvUnlockQueue+0x60>
 8002b1c:	e000      	b.n	8002b20 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b1e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	22ff      	movs	r2, #255	@ 0xff
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002b28:	f001 ff02 	bl	8004930 <vPortExitCritical>
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b3c:	f001 fec6 	bl	80048cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e001      	b.n	8002b52 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b52:	f001 feed 	bl	8004930 <vPortExitCritical>

    return xReturn;
 8002b56:	68fb      	ldr	r3, [r7, #12]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b68:	f001 feb0 	bl	80048cc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d102      	bne.n	8002b7e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e001      	b.n	8002b82 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b82:	f001 fed5 	bl	8004930 <vPortExitCritical>

    return xReturn;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	60fb      	str	r3, [r7, #12]
    }
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d024      	beq.n	8002c0c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e01e      	b.n	8002c06 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c3c <vQueueAddToRegistry+0xac>)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d105      	bne.n	8002be4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4a17      	ldr	r2, [pc, #92]	@ (8002c3c <vQueueAddToRegistry+0xac>)
 8002bde:	4413      	add	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
                    break;
 8002be2:	e013      	b.n	8002c0c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <vQueueAddToRegistry+0x70>
 8002bea:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <vQueueAddToRegistry+0xac>)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d104      	bne.n	8002c00 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <vQueueAddToRegistry+0xac>)
 8002bfc:	4413      	add	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3301      	adds	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b07      	cmp	r3, #7
 8002c0a:	d9dd      	bls.n	8002bc8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00f      	beq.n	8002c32 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 fb87 	bl	8007334 <SEGGER_SYSVIEW_ShrinkId>
 8002c26:	4601      	mov	r1, r0
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2071      	movs	r0, #113	@ 0x71
 8002c2e:	f003 fdf9 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000098 	.word	0x20000098

08002c40 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c50:	f001 fe3c 	bl	80048cc <vPortEnterCritical>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c5a:	b25b      	sxtb	r3, r3
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c60:	d103      	bne.n	8002c6a <vQueueWaitForMessageRestricted+0x2a>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c70:	b25b      	sxtb	r3, r3
 8002c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c76:	d103      	bne.n	8002c80 <vQueueWaitForMessageRestricted+0x40>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c80:	f001 fe56 	bl	8004930 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d106      	bne.n	8002c9a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3324      	adds	r3, #36	@ 0x24
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fd09 	bl	80036ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff fef8 	bl	8002a90 <prvUnlockQueue>
    }
 8002ca0:	bf00      	nop
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	@ 0x30
 8002cac:	af04      	add	r7, sp, #16
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 ff37 	bl	8004b30 <pvPortMalloc>
 8002cc2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d013      	beq.n	8002cf2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cca:	2058      	movs	r0, #88	@ 0x58
 8002ccc:	f001 ff30 	bl	8004b30 <pvPortMalloc>
 8002cd0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002cd8:	2258      	movs	r2, #88	@ 0x58
 8002cda:	2100      	movs	r1, #0
 8002cdc:	69f8      	ldr	r0, [r7, #28]
 8002cde:	f004 fce7 	bl	80076b0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ce8:	e005      	b.n	8002cf6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f001 ffdc 	bl	8004ca8 <vPortFree>
 8002cf0:	e001      	b.n	8002cf6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9303      	str	r3, [sp, #12]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	9302      	str	r3, [sp, #8]
 8002d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f80e 	bl	8002d34 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d18:	69f8      	ldr	r0, [r7, #28]
 8002d1a:	f000 f89b 	bl	8002e54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e002      	b.n	8002d2a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d28:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
    }
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	21a5      	movs	r1, #165	@ 0xa5
 8002d4e:	f004 fcaf 	bl	80076b0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f023 0307 	bic.w	r3, r3, #7
 8002d6a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	617b      	str	r3, [r7, #20]
    }
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	e7fd      	b.n	8002d8a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01e      	beq.n	8002dd2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
 8002d98:	e012      	b.n	8002dc0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	7819      	ldrb	r1, [r3, #0]
 8002da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	4413      	add	r3, r2
 8002da8:	3334      	adds	r3, #52	@ 0x34
 8002daa:	460a      	mov	r2, r1
 8002dac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d9e9      	bls.n	8002d9a <prvInitialiseNewTask+0x66>
 8002dc6:	e000      	b.n	8002dca <prvInitialiseNewTask+0x96>
            {
                break;
 8002dc8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d90b      	bls.n	8002df0 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	613b      	str	r3, [r7, #16]
    }
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d901      	bls.n	8002dfa <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002df6:	2304      	movs	r3, #4
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e04:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f85a 	bl	8001ec4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	3318      	adds	r3, #24
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f855 	bl	8001ec4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	f1c3 0205 	rsb	r2, r3, #5
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	69b8      	ldr	r0, [r7, #24]
 8002e36:	f001 fb97 	bl	8004568 <pxPortInitialiseStack>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
 8002e5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e5c:	f001 fd36 	bl	80048cc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e60:	4b4f      	ldr	r3, [pc, #316]	@ (8002fa0 <prvAddNewTaskToReadyList+0x14c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	4a4e      	ldr	r2, [pc, #312]	@ (8002fa0 <prvAddNewTaskToReadyList+0x14c>)
 8002e68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa4 <prvAddNewTaskToReadyList+0x150>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e72:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa4 <prvAddNewTaskToReadyList+0x150>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e78:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <prvAddNewTaskToReadyList+0x14c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d110      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e80:	f000 fdda 	bl	8003a38 <prvInitialiseTaskLists>
 8002e84:	e00d      	b.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e86:	4b48      	ldr	r3, [pc, #288]	@ (8002fa8 <prvAddNewTaskToReadyList+0x154>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e8e:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <prvAddNewTaskToReadyList+0x150>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d802      	bhi.n	8002ea2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e9c:	4a41      	ldr	r2, [pc, #260]	@ (8002fa4 <prvAddNewTaskToReadyList+0x150>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ea2:	4b42      	ldr	r3, [pc, #264]	@ (8002fac <prvAddNewTaskToReadyList+0x158>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4a40      	ldr	r2, [pc, #256]	@ (8002fac <prvAddNewTaskToReadyList+0x158>)
 8002eaa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eac:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <prvAddNewTaskToReadyList+0x158>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <prvAddNewTaskToReadyList+0x94>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 f973 	bl	80071a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	461c      	mov	r4, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	1ae3      	subs	r3, r4, r3
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	f002 f880 	bl	8004fe8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f004 f9e0 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <prvAddNewTaskToReadyList+0x15c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	4a2c      	ldr	r2, [pc, #176]	@ (8002fb0 <prvAddNewTaskToReadyList+0x15c>)
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f06:	492b      	ldr	r1, [pc, #172]	@ (8002fb4 <prvAddNewTaskToReadyList+0x160>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3304      	adds	r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	3204      	adds	r2, #4
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	1d1a      	adds	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb4 <prvAddNewTaskToReadyList+0x160>)
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	615a      	str	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f50:	4918      	ldr	r1, [pc, #96]	@ (8002fb4 <prvAddNewTaskToReadyList+0x160>)
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	1c59      	adds	r1, r3, #1
 8002f60:	4814      	ldr	r0, [pc, #80]	@ (8002fb4 <prvAddNewTaskToReadyList+0x160>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f6e:	f001 fcdf 	bl	8004930 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <prvAddNewTaskToReadyList+0x154>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00e      	beq.n	8002f98 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <prvAddNewTaskToReadyList+0x150>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d207      	bcs.n	8002f98 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <prvAddNewTaskToReadyList+0x164>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa0:	200001b0 	.word	0x200001b0
 8002fa4:	200000d8 	.word	0x200000d8
 8002fa8:	200001bc 	.word	0x200001bc
 8002fac:	200001cc 	.word	0x200001cc
 8002fb0:	200001b8 	.word	0x200001b8
 8002fb4:	200000dc 	.word	0x200000dc
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01c      	beq.n	8003008 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002fce:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <vTaskDelay+0x6c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <vTaskDelay+0x32>
        __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60bb      	str	r3, [r7, #8]
    }
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002fee:	f000 f881 	bl	80030f4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	2023      	movs	r0, #35	@ 0x23
 8002ff6:	f003 fbd9 	bl	80067ac <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 ffa7 	bl	8003f50 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003002:	f000 f885 	bl	8003110 <xTaskResumeAll>
 8003006:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 800300e:	4b07      	ldr	r3, [pc, #28]	@ (800302c <vTaskDelay+0x70>)
 8003010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200001d8 	.word	0x200001d8
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003036:	4b27      	ldr	r3, [pc, #156]	@ (80030d4 <vTaskStartScheduler+0xa4>)
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	2300      	movs	r3, #0
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	2300      	movs	r3, #0
 8003040:	2282      	movs	r2, #130	@ 0x82
 8003042:	4925      	ldr	r1, [pc, #148]	@ (80030d8 <vTaskStartScheduler+0xa8>)
 8003044:	4825      	ldr	r0, [pc, #148]	@ (80030dc <vTaskStartScheduler+0xac>)
 8003046:	f7ff fe2f 	bl	8002ca8 <xTaskCreate>
 800304a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003052:	f000 fffd 	bl	8004050 <xTimerCreateTimerTask>
 8003056:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d124      	bne.n	80030a8 <vTaskStartScheduler+0x78>
        __asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	60bb      	str	r3, [r7, #8]
    }
 8003070:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <vTaskStartScheduler+0xb0>)
 8003074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003078:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800307a:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <vTaskStartScheduler+0xb4>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003080:	4b19      	ldr	r3, [pc, #100]	@ (80030e8 <vTaskStartScheduler+0xb8>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003086:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <vTaskStartScheduler+0xbc>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <vTaskStartScheduler+0xa4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d102      	bne.n	8003098 <vTaskStartScheduler+0x68>
 8003092:	f004 f86d 	bl	8007170 <SEGGER_SYSVIEW_OnIdle>
 8003096:	e004      	b.n	80030a2 <vTaskStartScheduler+0x72>
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <vTaskStartScheduler+0xbc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 f8c5 	bl	800722c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80030a2:	f001 faef 	bl	8004684 <xPortStartScheduler>
 80030a6:	e00f      	b.n	80030c8 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ae:	d10b      	bne.n	80030c8 <vTaskStartScheduler+0x98>
        __asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	607b      	str	r3, [r7, #4]
    }
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <vTaskStartScheduler+0xc0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	200001d4 	.word	0x200001d4
 80030d8:	08007854 	.word	0x08007854
 80030dc:	08003a09 	.word	0x08003a09
 80030e0:	200001d0 	.word	0x200001d0
 80030e4:	200001bc 	.word	0x200001bc
 80030e8:	200001b4 	.word	0x200001b4
 80030ec:	200000d8 	.word	0x200000d8
 80030f0:	2000000c 	.word	0x2000000c

080030f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <vTaskSuspendAll+0x18>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a03      	ldr	r2, [pc, #12]	@ (800310c <vTaskSuspendAll+0x18>)
 8003100:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003102:	bf00      	nop
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	200001d8 	.word	0x200001d8

08003110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800311e:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <xTaskResumeAll+0x1dc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <xTaskResumeAll+0x2e>
        __asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	607b      	str	r3, [r7, #4]
    }
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	e7fd      	b.n	800313a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800313e:	f001 fbc5 	bl	80048cc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003142:	4b6a      	ldr	r3, [pc, #424]	@ (80032ec <xTaskResumeAll+0x1dc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	4a68      	ldr	r2, [pc, #416]	@ (80032ec <xTaskResumeAll+0x1dc>)
 800314a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314c:	4b67      	ldr	r3, [pc, #412]	@ (80032ec <xTaskResumeAll+0x1dc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 80c4 	bne.w	80032de <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003156:	4b66      	ldr	r3, [pc, #408]	@ (80032f0 <xTaskResumeAll+0x1e0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80bf 	beq.w	80032de <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003160:	e08e      	b.n	8003280 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003162:	4b64      	ldr	r3, [pc, #400]	@ (80032f4 <xTaskResumeAll+0x1e4>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	6a12      	ldr	r2, [r2, #32]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	69d2      	ldr	r2, [r2, #28]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3318      	adds	r3, #24
 800318c:	429a      	cmp	r2, r3
 800318e:	d103      	bne.n	8003198 <xTaskResumeAll+0x88>
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2200      	movs	r2, #0
 800319c:	629a      	str	r2, [r3, #40]	@ 0x28
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	68d2      	ldr	r2, [r2, #12]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	6892      	ldr	r2, [r2, #8]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3304      	adds	r3, #4
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d103      	bne.n	80031d6 <xTaskResumeAll+0xc6>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 f861 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f2:	2201      	movs	r2, #1
 80031f4:	409a      	lsls	r2, r3
 80031f6:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <xTaskResumeAll+0x1e8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	4a3e      	ldr	r2, [pc, #248]	@ (80032f8 <xTaskResumeAll+0x1e8>)
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003204:	493d      	ldr	r1, [pc, #244]	@ (80032fc <xTaskResumeAll+0x1ec>)
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	3304      	adds	r3, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	3204      	adds	r2, #4
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	1d1a      	adds	r2, r3, #4
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4a2e      	ldr	r2, [pc, #184]	@ (80032fc <xTaskResumeAll+0x1ec>)
 8003244:	441a      	add	r2, r3
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	615a      	str	r2, [r3, #20]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	492b      	ldr	r1, [pc, #172]	@ (80032fc <xTaskResumeAll+0x1ec>)
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	1c59      	adds	r1, r3, #1
 800325e:	4827      	ldr	r0, [pc, #156]	@ (80032fc <xTaskResumeAll+0x1ec>)
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4403      	add	r3, r0
 800326a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003270:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <xTaskResumeAll+0x1f0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800327a:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <xTaskResumeAll+0x1f4>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <xTaskResumeAll+0x1e4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f47f af6c 	bne.w	8003162 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003290:	f000 fc50 	bl	8003b34 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003294:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <xTaskResumeAll+0x1f8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d010      	beq.n	80032c2 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80032a0:	f000 f858 	bl	8003354 <xTaskIncrementTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80032aa:	4b16      	ldr	r3, [pc, #88]	@ (8003304 <xTaskResumeAll+0x1f4>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f1      	bne.n	80032a0 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 80032bc:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <xTaskResumeAll+0x1f8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <xTaskResumeAll+0x1f4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <xTaskResumeAll+0x1fc>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032de:	f001 fb27 	bl	8004930 <vPortExitCritical>

    return xAlreadyYielded;
 80032e2:	69bb      	ldr	r3, [r7, #24]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	200001d8 	.word	0x200001d8
 80032f0:	200001b0 	.word	0x200001b0
 80032f4:	20000170 	.word	0x20000170
 80032f8:	200001b8 	.word	0x200001b8
 80032fc:	200000dc 	.word	0x200000dc
 8003300:	200000d8 	.word	0x200000d8
 8003304:	200001c4 	.word	0x200001c4
 8003308:	200001c0 	.word	0x200001c0
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003316:	4b05      	ldr	r3, [pc, #20]	@ (800332c <xTaskGetTickCount+0x1c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800331c:	687b      	ldr	r3, [r7, #4]
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	200001b4 	.word	0x200001b4

08003330 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003336:	f001 fbb9 	bl	8004aac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800333e:	4b04      	ldr	r3, [pc, #16]	@ (8003350 <xTaskGetTickCountFromISR+0x20>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003344:	683b      	ldr	r3, [r7, #0]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200001b4 	.word	0x200001b4

08003354 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08a      	sub	sp, #40	@ 0x28
 8003358:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335e:	4b80      	ldr	r3, [pc, #512]	@ (8003560 <xTaskIncrementTick+0x20c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 80f1 	bne.w	800354a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003368:	4b7e      	ldr	r3, [pc, #504]	@ (8003564 <xTaskIncrementTick+0x210>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003370:	4a7c      	ldr	r2, [pc, #496]	@ (8003564 <xTaskIncrementTick+0x210>)
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d121      	bne.n	80033c0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800337c:	4b7a      	ldr	r3, [pc, #488]	@ (8003568 <xTaskIncrementTick+0x214>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	607b      	str	r3, [r7, #4]
    }
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <xTaskIncrementTick+0x46>
 800339e:	4b72      	ldr	r3, [pc, #456]	@ (8003568 <xTaskIncrementTick+0x214>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	4b71      	ldr	r3, [pc, #452]	@ (800356c <xTaskIncrementTick+0x218>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a6f      	ldr	r2, [pc, #444]	@ (8003568 <xTaskIncrementTick+0x214>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4a6f      	ldr	r2, [pc, #444]	@ (800356c <xTaskIncrementTick+0x218>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003570 <xTaskIncrementTick+0x21c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3301      	adds	r3, #1
 80033b8:	4a6d      	ldr	r2, [pc, #436]	@ (8003570 <xTaskIncrementTick+0x21c>)
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	f000 fbba 	bl	8003b34 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80033c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <xTaskIncrementTick+0x220>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	f0c0 80aa 	bcc.w	8003520 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033cc:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <xTaskIncrementTick+0x214>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d6:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <xTaskIncrementTick+0x220>)
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033dc:	601a      	str	r2, [r3, #0]
                    break;
 80033de:	e09f      	b.n	8003520 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	4b61      	ldr	r3, [pc, #388]	@ (8003568 <xTaskIncrementTick+0x214>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d203      	bcs.n	8003400 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003574 <xTaskIncrementTick+0x220>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033fe:	e08f      	b.n	8003520 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	6892      	ldr	r2, [r2, #8]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	3304      	adds	r3, #4
 8003422:	429a      	cmp	r2, r3
 8003424:	d103      	bne.n	800342e <xTaskIncrementTick+0xda>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2200      	movs	r2, #0
 8003432:	615a      	str	r2, [r3, #20]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1e5a      	subs	r2, r3, #1
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01e      	beq.n	8003484 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	6a12      	ldr	r2, [r2, #32]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	69d2      	ldr	r2, [r2, #28]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	3318      	adds	r3, #24
 8003468:	429a      	cmp	r2, r3
 800346a:	d103      	bne.n	8003474 <xTaskIncrementTick+0x120>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6a1a      	ldr	r2, [r3, #32]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1e5a      	subs	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 ff12 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003490:	2201      	movs	r2, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <xTaskIncrementTick+0x224>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4313      	orrs	r3, r2
 800349a:	4a37      	ldr	r2, [pc, #220]	@ (8003578 <xTaskIncrementTick+0x224>)
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a2:	4936      	ldr	r1, [pc, #216]	@ (800357c <xTaskIncrementTick+0x228>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3304      	adds	r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	3204      	adds	r2, #4
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1d1a      	adds	r2, r3, #4
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a26      	ldr	r2, [pc, #152]	@ (800357c <xTaskIncrementTick+0x228>)
 80034e2:	441a      	add	r2, r3
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	615a      	str	r2, [r3, #20]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ec:	4923      	ldr	r1, [pc, #140]	@ (800357c <xTaskIncrementTick+0x228>)
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	1c59      	adds	r1, r3, #1
 80034fc:	481f      	ldr	r0, [pc, #124]	@ (800357c <xTaskIncrementTick+0x228>)
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350e:	4b1c      	ldr	r3, [pc, #112]	@ (8003580 <xTaskIncrementTick+0x22c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	f67f af59 	bls.w	80033cc <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800351e:	e755      	b.n	80033cc <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003520:	4b17      	ldr	r3, [pc, #92]	@ (8003580 <xTaskIncrementTick+0x22c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003526:	4915      	ldr	r1, [pc, #84]	@ (800357c <xTaskIncrementTick+0x228>)
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d901      	bls.n	800353c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800353c:	4b11      	ldr	r3, [pc, #68]	@ (8003584 <xTaskIncrementTick+0x230>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
 8003548:	e004      	b.n	8003554 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800354a:	4b0f      	ldr	r3, [pc, #60]	@ (8003588 <xTaskIncrementTick+0x234>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	4a0d      	ldr	r2, [pc, #52]	@ (8003588 <xTaskIncrementTick+0x234>)
 8003552:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003556:	4618      	mov	r0, r3
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200001d8 	.word	0x200001d8
 8003564:	200001b4 	.word	0x200001b4
 8003568:	20000168 	.word	0x20000168
 800356c:	2000016c 	.word	0x2000016c
 8003570:	200001c8 	.word	0x200001c8
 8003574:	200001d0 	.word	0x200001d0
 8003578:	200001b8 	.word	0x200001b8
 800357c:	200000dc 	.word	0x200000dc
 8003580:	200000d8 	.word	0x200000d8
 8003584:	200001c4 	.word	0x200001c4
 8003588:	200001c0 	.word	0x200001c0

0800358c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003592:	4b2d      	ldr	r3, [pc, #180]	@ (8003648 <vTaskSwitchContext+0xbc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800359a:	4b2c      	ldr	r3, [pc, #176]	@ (800364c <vTaskSwitchContext+0xc0>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80035a0:	e04e      	b.n	8003640 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80035a2:	4b2a      	ldr	r3, [pc, #168]	@ (800364c <vTaskSwitchContext+0xc0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <vTaskSwitchContext+0xc4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	f1c3 031f 	rsb	r3, r3, #31
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	4925      	ldr	r1, [pc, #148]	@ (8003654 <vTaskSwitchContext+0xc8>)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <vTaskSwitchContext+0x5e>
        __asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	607b      	str	r3, [r7, #4]
    }
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <vTaskSwitchContext+0x5a>
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4a17      	ldr	r2, [pc, #92]	@ (8003654 <vTaskSwitchContext+0xc8>)
 80035f6:	4413      	add	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	3308      	adds	r3, #8
 800360c:	429a      	cmp	r2, r3
 800360e:	d104      	bne.n	800361a <vTaskSwitchContext+0x8e>
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a0d      	ldr	r2, [pc, #52]	@ (8003658 <vTaskSwitchContext+0xcc>)
 8003622:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <vTaskSwitchContext+0xcc>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <vTaskSwitchContext+0xd0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d102      	bne.n	8003636 <vTaskSwitchContext+0xaa>
 8003630:	f003 fd9e 	bl	8007170 <SEGGER_SYSVIEW_OnIdle>
}
 8003634:	e004      	b.n	8003640 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003636:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <vTaskSwitchContext+0xcc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 fdf6 	bl	800722c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003640:	bf00      	nop
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	200001d8 	.word	0x200001d8
 800364c:	200001c4 	.word	0x200001c4
 8003650:	200001b8 	.word	0x200001b8
 8003654:	200000dc 	.word	0x200000dc
 8003658:	200000d8 	.word	0x200000d8
 800365c:	200001d4 	.word	0x200001d4

08003660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10b      	bne.n	8003688 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
    }
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003688:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <vTaskPlaceOnEventList+0x48>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3318      	adds	r3, #24
 800368e:	4619      	mov	r1, r3
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fe fc48 	bl	8001f26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003696:	2101      	movs	r1, #1
 8003698:	6838      	ldr	r0, [r7, #0]
 800369a:	f000 fc59 	bl	8003f50 <prvAddCurrentTaskToDelayedList>
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200000d8 	.word	0x200000d8

080036ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	613b      	str	r3, [r7, #16]
    }
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	4b17      	ldr	r3, [pc, #92]	@ (800373c <vTaskPlaceOnEventListRestricted+0x90>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	61da      	str	r2, [r3, #28]
 80036e4:	4b15      	ldr	r3, [pc, #84]	@ (800373c <vTaskPlaceOnEventListRestricted+0x90>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6892      	ldr	r2, [r2, #8]
 80036ec:	621a      	str	r2, [r3, #32]
 80036ee:	4b13      	ldr	r3, [pc, #76]	@ (800373c <vTaskPlaceOnEventListRestricted+0x90>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	3218      	adds	r2, #24
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <vTaskPlaceOnEventListRestricted+0x90>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f103 0218 	add.w	r2, r3, #24
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <vTaskPlaceOnEventListRestricted+0x90>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003722:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003724:	2024      	movs	r0, #36	@ 0x24
 8003726:	f003 f823 	bl	8006770 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68b8      	ldr	r0, [r7, #8]
 800372e:	f000 fc0f 	bl	8003f50 <prvAddCurrentTaskToDelayedList>
    }
 8003732:	bf00      	nop
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200000d8 	.word	0x200000d8

08003740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	@ 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	60fb      	str	r3, [r7, #12]
    }
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	e7fd      	b.n	800376a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	6a3a      	ldr	r2, [r7, #32]
 800377a:	6a12      	ldr	r2, [r2, #32]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	69d2      	ldr	r2, [r2, #28]
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	3318      	adds	r3, #24
 8003790:	429a      	cmp	r2, r3
 8003792:	d103      	bne.n	800379c <xTaskRemoveFromEventList+0x5c>
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2200      	movs	r2, #0
 80037a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	1e5a      	subs	r2, r3, #1
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ac:	4b4b      	ldr	r3, [pc, #300]	@ (80038dc <xTaskRemoveFromEventList+0x19c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d162      	bne.n	800387a <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	6a3a      	ldr	r2, [r7, #32]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	3304      	adds	r3, #4
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d103      	bne.n	80037e2 <xTaskRemoveFromEventList+0xa2>
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fd5b 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fe:	2201      	movs	r2, #1
 8003800:	409a      	lsls	r2, r3
 8003802:	4b37      	ldr	r3, [pc, #220]	@ (80038e0 <xTaskRemoveFromEventList+0x1a0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	4a35      	ldr	r2, [pc, #212]	@ (80038e0 <xTaskRemoveFromEventList+0x1a0>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003810:	4934      	ldr	r1, [pc, #208]	@ (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3304      	adds	r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	60da      	str	r2, [r3, #12]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	6a3a      	ldr	r2, [r7, #32]
 8003836:	3204      	adds	r2, #4
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4a25      	ldr	r2, [pc, #148]	@ (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 8003850:	441a      	add	r2, r3
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	615a      	str	r2, [r3, #20]
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	4922      	ldr	r1, [pc, #136]	@ (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1c59      	adds	r1, r3, #1
 800386a:	481e      	ldr	r0, [pc, #120]	@ (80038e4 <xTaskRemoveFromEventList+0x1a4>)
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4403      	add	r3, r0
 8003876:	6019      	str	r1, [r3, #0]
 8003878:	e01b      	b.n	80038b2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800387a:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <xTaskRemoveFromEventList+0x1a8>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	61da      	str	r2, [r3, #28]
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	621a      	str	r2, [r3, #32]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	3218      	adds	r2, #24
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f103 0218 	add.w	r2, r3, #24
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	4a10      	ldr	r2, [pc, #64]	@ (80038e8 <xTaskRemoveFromEventList+0x1a8>)
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038a8:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <xTaskRemoveFromEventList+0x1a8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	4a0e      	ldr	r2, [pc, #56]	@ (80038e8 <xTaskRemoveFromEventList+0x1a8>)
 80038b0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <xTaskRemoveFromEventList+0x1ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	429a      	cmp	r2, r3
 80038be:	d905      	bls.n	80038cc <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038c0:	2301      	movs	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <xTaskRemoveFromEventList+0x1b0>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e001      	b.n	80038d0 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3728      	adds	r7, #40	@ 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200001d8 	.word	0x200001d8
 80038e0:	200001b8 	.word	0x200001b8
 80038e4:	200000dc 	.word	0x200000dc
 80038e8:	20000170 	.word	0x20000170
 80038ec:	200000d8 	.word	0x200000d8
 80038f0:	200001c4 	.word	0x200001c4

080038f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <vTaskInternalSetTimeOutState+0x24>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <vTaskInternalSetTimeOutState+0x28>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	605a      	str	r2, [r3, #4]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	200001c8 	.word	0x200001c8
 800391c:	200001b4 	.word	0x200001b4

08003920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	613b      	str	r3, [r7, #16]
    }
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800394e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	60fb      	str	r3, [r7, #12]
    }
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003966:	f000 ffb1 	bl	80048cc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800396a:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <xTaskCheckForTimeOut+0xc8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003982:	d102      	bne.n	800398a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	e026      	b.n	80039d8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b17      	ldr	r3, [pc, #92]	@ (80039ec <xTaskCheckForTimeOut+0xcc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d00a      	beq.n	80039ac <xTaskCheckForTimeOut+0x8c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	429a      	cmp	r2, r3
 800399e:	d305      	bcc.n	80039ac <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e015      	b.n	80039d8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20b      	bcs.n	80039ce <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	1ad2      	subs	r2, r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff96 	bl	80038f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	e004      	b.n	80039d8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039d8:	f000 ffaa 	bl	8004930 <vPortExitCritical>

    return xReturn;
 80039dc:	69fb      	ldr	r3, [r7, #28]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200001b4 	.word	0x200001b4
 80039ec:	200001c8 	.word	0x200001c8

080039f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039f4:	4b03      	ldr	r3, [pc, #12]	@ (8003a04 <vTaskMissedYield+0x14>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	200001c4 	.word	0x200001c4

08003a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a10:	f000 f852 	bl	8003ab8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a14:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <prvIdleTask+0x28>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d9f9      	bls.n	8003a10 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <prvIdleTask+0x2c>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a2c:	e7f0      	b.n	8003a10 <prvIdleTask+0x8>
 8003a2e:	bf00      	nop
 8003a30:	200000dc 	.word	0x200000dc
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	e00c      	b.n	8003a5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a12      	ldr	r2, [pc, #72]	@ (8003a98 <prvInitialiseTaskLists+0x60>)
 8003a50:	4413      	add	r3, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fa16 	bl	8001e84 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d9ef      	bls.n	8003a44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a64:	480d      	ldr	r0, [pc, #52]	@ (8003a9c <prvInitialiseTaskLists+0x64>)
 8003a66:	f7fe fa0d 	bl	8001e84 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a6a:	480d      	ldr	r0, [pc, #52]	@ (8003aa0 <prvInitialiseTaskLists+0x68>)
 8003a6c:	f7fe fa0a 	bl	8001e84 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a70:	480c      	ldr	r0, [pc, #48]	@ (8003aa4 <prvInitialiseTaskLists+0x6c>)
 8003a72:	f7fe fa07 	bl	8001e84 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a76:	480c      	ldr	r0, [pc, #48]	@ (8003aa8 <prvInitialiseTaskLists+0x70>)
 8003a78:	f7fe fa04 	bl	8001e84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a7c:	480b      	ldr	r0, [pc, #44]	@ (8003aac <prvInitialiseTaskLists+0x74>)
 8003a7e:	f7fe fa01 	bl	8001e84 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <prvInitialiseTaskLists+0x78>)
 8003a84:	4a05      	ldr	r2, [pc, #20]	@ (8003a9c <prvInitialiseTaskLists+0x64>)
 8003a86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a88:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab4 <prvInitialiseTaskLists+0x7c>)
 8003a8a:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <prvInitialiseTaskLists+0x68>)
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200000dc 	.word	0x200000dc
 8003a9c:	20000140 	.word	0x20000140
 8003aa0:	20000154 	.word	0x20000154
 8003aa4:	20000170 	.word	0x20000170
 8003aa8:	20000184 	.word	0x20000184
 8003aac:	2000019c 	.word	0x2000019c
 8003ab0:	20000168 	.word	0x20000168
 8003ab4:	2000016c 	.word	0x2000016c

08003ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003abe:	e019      	b.n	8003af4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003ac0:	f000 ff04 	bl	80048cc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac4:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <prvCheckTasksWaitingTermination+0x50>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fa61 	bl	8001f98 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <prvCheckTasksWaitingTermination+0x54>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	4a0b      	ldr	r2, [pc, #44]	@ (8003b0c <prvCheckTasksWaitingTermination+0x54>)
 8003ade:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003ae8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003aea:	f000 ff21 	bl	8004930 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f810 	bl	8003b14 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e1      	bne.n	8003ac0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000184 	.word	0x20000184
 8003b0c:	200001b0 	.word	0x200001b0
 8003b10:	20000198 	.word	0x20000198

08003b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f8c1 	bl	8004ca8 <vPortFree>
            vPortFree( pxTCB );
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f001 f8be 	bl	8004ca8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b38:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <prvResetNextTaskUnblockTime+0x30>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <prvResetNextTaskUnblockTime+0x34>)
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b48:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b4a:	e005      	b.n	8003b58 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b4c:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <prvResetNextTaskUnblockTime+0x30>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a04      	ldr	r2, [pc, #16]	@ (8003b68 <prvResetNextTaskUnblockTime+0x34>)
 8003b56:	6013      	str	r3, [r2, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000168 	.word	0x20000168
 8003b68:	200001d0 	.word	0x200001d0

08003b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <xTaskGetSchedulerState+0x34>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d102      	bne.n	8003b80 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	e008      	b.n	8003b92 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b80:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <xTaskGetSchedulerState+0x38>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	e001      	b.n	8003b92 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b92:	687b      	ldr	r3, [r7, #4]
    }
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	200001bc 	.word	0x200001bc
 8003ba4:	200001d8 	.word	0x200001d8

08003ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d063      	beq.n	8003c86 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc2:	4b33      	ldr	r3, [pc, #204]	@ (8003c90 <xTaskPriorityInherit+0xe8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d253      	bcs.n	8003c74 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db06      	blt.n	8003be2 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c90 <xTaskPriorityInherit+0xe8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	f1c3 0205 	rsb	r2, r3, #5
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6959      	ldr	r1, [r3, #20]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a28      	ldr	r2, [pc, #160]	@ (8003c94 <xTaskPriorityInherit+0xec>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4299      	cmp	r1, r3
 8003bf8:	d12f      	bne.n	8003c5a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe f9ca 	bl	8001f98 <uxListRemove>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	2201      	movs	r2, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43da      	mvns	r2, r3
 8003c16:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <xTaskPriorityInherit+0xf0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c98 <xTaskPriorityInherit+0xf0>)
 8003c1e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <xTaskPriorityInherit+0xe8>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <xTaskPriorityInherit+0xf0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <xTaskPriorityInherit+0xf0>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <xTaskPriorityInherit+0xec>)
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f7fe f943 	bl	8001ede <vListInsertEnd>
 8003c58:	e004      	b.n	8003c64 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <xTaskPriorityInherit+0xe8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4619      	mov	r1, r3
 8003c68:	2049      	movs	r0, #73	@ 0x49
 8003c6a:	f002 fd9f 	bl	80067ac <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e008      	b.n	8003c86 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <xTaskPriorityInherit+0xe8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d201      	bcs.n	8003c86 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003c82:	2301      	movs	r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c86:	68fb      	ldr	r3, [r7, #12]
    }
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	200000d8 	.word	0x200000d8
 8003c94:	200000dc 	.word	0x200000dc
 8003c98:	200001b8 	.word	0x200001b8

08003c9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d06a      	beq.n	8003d88 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003cb2:	4b38      	ldr	r3, [pc, #224]	@ (8003d94 <xTaskPriorityDisinherit+0xf8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d00b      	beq.n	8003cd4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60fb      	str	r3, [r7, #12]
    }
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60bb      	str	r3, [r7, #8]
    }
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d03e      	beq.n	8003d88 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d13a      	bne.n	8003d88 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe f93e 	bl	8001f98 <uxListRemove>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	2201      	movs	r2, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <xTaskPriorityDisinherit+0xfc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4013      	ands	r3, r2
 8003d34:	4a18      	ldr	r2, [pc, #96]	@ (8003d98 <xTaskPriorityDisinherit+0xfc>)
 8003d36:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	204a      	movs	r0, #74	@ 0x4a
 8003d3e:	f002 fd35 	bl	80067ac <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	f1c3 0205 	rsb	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <xTaskPriorityDisinherit+0xfc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	4a0c      	ldr	r2, [pc, #48]	@ (8003d98 <xTaskPriorityDisinherit+0xfc>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4a09      	ldr	r2, [pc, #36]	@ (8003d9c <xTaskPriorityDisinherit+0x100>)
 8003d76:	441a      	add	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7fe f8ad 	bl	8001ede <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d88:	697b      	ldr	r3, [r7, #20]
    }
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200000d8 	.word	0x200000d8
 8003d98:	200001b8 	.word	0x200001b8
 8003d9c:	200000dc 	.word	0x200000dc

08003da0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	@ 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80ad 	beq.w	8003f14 <vTaskPriorityDisinheritAfterTimeout+0x174>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	613b      	str	r3, [r7, #16]
    }
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	e7fd      	b.n	8003dd6 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d902      	bls.n	8003dea <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de8:	e002      	b.n	8003df0 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df6:	429a      	cmp	r2, r3
 8003df8:	f000 808c 	beq.w	8003f14 <vTaskPriorityDisinheritAfterTimeout+0x174>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	f040 8086 	bne.w	8003f14 <vTaskPriorityDisinheritAfterTimeout+0x174>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003e08:	4b44      	ldr	r3, [pc, #272]	@ (8003f1c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a3a      	ldr	r2, [r7, #32]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d10b      	bne.n	8003e2a <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60fb      	str	r3, [r7, #12]
    }
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	204a      	movs	r0, #74	@ 0x4a
 8003e30:	f002 fcbc 	bl	80067ac <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db04      	blt.n	8003e52 <vTaskPriorityDisinheritAfterTimeout+0xb2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	f1c3 0205 	rsb	r2, r3, #5
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	6959      	ldr	r1, [r3, #20]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a2f      	ldr	r2, [pc, #188]	@ (8003f20 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8003e62:	4413      	add	r3, r2
 8003e64:	4299      	cmp	r1, r3
 8003e66:	d155      	bne.n	8003f14 <vTaskPriorityDisinheritAfterTimeout+0x174>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe f893 	bl	8001f98 <uxListRemove>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <vTaskPriorityDisinheritAfterTimeout+0xee>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	4a26      	ldr	r2, [pc, #152]	@ (8003f24 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8003e8c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f003 fa0d 	bl	80072b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f24 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eac:	491c      	ldr	r1, [pc, #112]	@ (8003f20 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3304      	adds	r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	3204      	adds	r2, #4
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4a0d      	ldr	r2, [pc, #52]	@ (8003f20 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8003eec:	441a      	add	r2, r3
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	615a      	str	r2, [r3, #20]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef6:	490a      	ldr	r1, [pc, #40]	@ (8003f20 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	1c59      	adds	r1, r3, #1
 8003f06:	4806      	ldr	r0, [pc, #24]	@ (8003f20 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4403      	add	r3, r0
 8003f12:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003f14:	bf00      	nop
 8003f16:	3728      	adds	r7, #40	@ 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200000d8 	.word	0x200000d8
 8003f20:	200000dc 	.word	0x200000dc
 8003f24:	200001b8 	.word	0x200001b8

08003f28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003f2c:	4b07      	ldr	r3, [pc, #28]	@ (8003f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f3a:	3201      	adds	r2, #1
 8003f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8003f3e:	4b03      	ldr	r3, [pc, #12]	@ (8003f4c <pvTaskIncrementMutexHeldCount+0x24>)
 8003f40:	681b      	ldr	r3, [r3, #0]
    }
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	200000d8 	.word	0x200000d8

08003f50 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003f5a:	4b36      	ldr	r3, [pc, #216]	@ (8004034 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f60:	4b35      	ldr	r3, [pc, #212]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe f816 	bl	8001f98 <uxListRemove>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10b      	bne.n	8003f8a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f72:	4b31      	ldr	r3, [pc, #196]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	2201      	movs	r2, #1
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	4b2e      	ldr	r3, [pc, #184]	@ (800403c <prvAddCurrentTaskToDelayedList+0xec>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4013      	ands	r3, r2
 8003f86:	4a2d      	ldr	r2, [pc, #180]	@ (800403c <prvAddCurrentTaskToDelayedList+0xec>)
 8003f88:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f90:	d124      	bne.n	8003fdc <prvAddCurrentTaskToDelayedList+0x8c>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d021      	beq.n	8003fdc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f98:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	6892      	ldr	r2, [r2, #8]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	3204      	adds	r2, #4
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	1d1a      	adds	r2, r3, #4
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1d      	ldr	r2, [pc, #116]	@ (8004040 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fcc:	615a      	str	r2, [r3, #20]
 8003fce:	4b1c      	ldr	r3, [pc, #112]	@ (8004040 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004040 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003fda:	e026      	b.n	800402a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fe4:	4b14      	ldr	r3, [pc, #80]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d209      	bcs.n	8004008 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff4:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	4619      	mov	r1, r3
 8004000:	4610      	mov	r0, r2
 8004002:	f7fd ff90 	bl	8001f26 <vListInsert>
}
 8004006:	e010      	b.n	800402a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004008:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <prvAddCurrentTaskToDelayedList+0xf8>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <prvAddCurrentTaskToDelayedList+0xe8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3304      	adds	r3, #4
 8004012:	4619      	mov	r1, r3
 8004014:	4610      	mov	r0, r2
 8004016:	f7fd ff86 	bl	8001f26 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800401a:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <prvAddCurrentTaskToDelayedList+0xfc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	429a      	cmp	r2, r3
 8004022:	d202      	bcs.n	800402a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004024:	4a09      	ldr	r2, [pc, #36]	@ (800404c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	200001b4 	.word	0x200001b4
 8004038:	200000d8 	.word	0x200000d8
 800403c:	200001b8 	.word	0x200001b8
 8004040:	2000019c 	.word	0x2000019c
 8004044:	2000016c 	.word	0x2000016c
 8004048:	20000168 	.word	0x20000168
 800404c:	200001d0 	.word	0x200001d0

08004050 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004056:	2300      	movs	r3, #0
 8004058:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800405a:	f000 fa4f 	bl	80044fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800405e:	4b12      	ldr	r3, [pc, #72]	@ (80040a8 <xTimerCreateTimerTask+0x58>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004066:	4b11      	ldr	r3, [pc, #68]	@ (80040ac <xTimerCreateTimerTask+0x5c>)
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	2302      	movs	r3, #2
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2300      	movs	r3, #0
 8004070:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004074:	490e      	ldr	r1, [pc, #56]	@ (80040b0 <xTimerCreateTimerTask+0x60>)
 8004076:	480f      	ldr	r0, [pc, #60]	@ (80040b4 <xTimerCreateTimerTask+0x64>)
 8004078:	f7fe fe16 	bl	8002ca8 <xTaskCreate>
 800407c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10b      	bne.n	800409c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	603b      	str	r3, [r7, #0]
    }
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800409c:	687b      	ldr	r3, [r7, #4]
    }
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2000020c 	.word	0x2000020c
 80040ac:	20000210 	.word	0x20000210
 80040b0:	0800785c 	.word	0x0800785c
 80040b4:	0800415d 	.word	0x0800415d

080040b8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80040c4:	e008      	b.n	80040d8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4413      	add	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	18d1      	adds	r1, r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f8df 	bl	80042a8 <prvInsertTimerInActiveList>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ea      	bne.n	80040c6 <prvReloadTimer+0xe>
        }
    }
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004106:	4b14      	ldr	r3, [pc, #80]	@ (8004158 <prvProcessExpiredTimer+0x5c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3304      	adds	r3, #4
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd ff3f 	bl	8001f98 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ffc3 	bl	80040b8 <prvReloadTimer>
 8004132:	e008      	b.n	8004146 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	4798      	blx	r3
    }
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000204 	.word	0x20000204

0800415c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004164:	f107 0308 	add.w	r3, r7, #8
 8004168:	4618      	mov	r0, r3
 800416a:	f000 f859 	bl	8004220 <prvGetNextExpireTime>
 800416e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4619      	mov	r1, r3
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f805 	bl	8004184 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800417a:	f000 f8d7 	bl	800432c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800417e:	bf00      	nop
 8004180:	e7f0      	b.n	8004164 <prvTimerTask+0x8>
	...

08004184 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800418e:	f7fe ffb1 	bl	80030f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f866 	bl	8004268 <prvSampleTimeNow>
 800419c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d130      	bne.n	8004206 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <prvProcessTimerOrBlockTask+0x3c>
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d806      	bhi.n	80041c0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80041b2:	f7fe ffad 	bl	8003110 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff ff9f 	bl	80040fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80041be:	e024      	b.n	800420a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041c6:	4b13      	ldr	r3, [pc, #76]	@ (8004214 <prvProcessTimerOrBlockTask+0x90>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <prvProcessTimerOrBlockTask+0x50>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <prvProcessTimerOrBlockTask+0x52>
 80041d4:	2300      	movs	r3, #0
 80041d6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <prvProcessTimerOrBlockTask+0x94>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	4619      	mov	r1, r3
 80041e6:	f7fe fd2b 	bl	8002c40 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80041ea:	f7fe ff91 	bl	8003110 <xTaskResumeAll>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80041f4:	4b09      	ldr	r3, [pc, #36]	@ (800421c <prvProcessTimerOrBlockTask+0x98>)
 80041f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	f3bf 8f6f 	isb	sy
    }
 8004204:	e001      	b.n	800420a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004206:	f7fe ff83 	bl	8003110 <xTaskResumeAll>
    }
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000208 	.word	0x20000208
 8004218:	2000020c 	.word	0x2000020c
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004228:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <prvGetNextExpireTime+0x44>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <prvGetNextExpireTime+0x16>
 8004232:	2201      	movs	r2, #1
 8004234:	e000      	b.n	8004238 <prvGetNextExpireTime+0x18>
 8004236:	2200      	movs	r2, #0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004244:	4b07      	ldr	r3, [pc, #28]	@ (8004264 <prvGetNextExpireTime+0x44>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e001      	b.n	8004254 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004254:	68fb      	ldr	r3, [r7, #12]
    }
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000204 	.word	0x20000204

08004268 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004270:	f7ff f84e 	bl	8003310 <xTaskGetTickCount>
 8004274:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004276:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <prvSampleTimeNow+0x3c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	429a      	cmp	r2, r3
 800427e:	d205      	bcs.n	800428c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004280:	f000 f916 	bl	80044b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e002      	b.n	8004292 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004292:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <prvSampleTimeNow+0x3c>)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004298:	68fb      	ldr	r3, [r7, #12]
    }
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000214 	.word	0x20000214

080042a8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d812      	bhi.n	80042f4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	1ad2      	subs	r2, r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d302      	bcc.n	80042e2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e01b      	b.n	800431a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <prvInsertTimerInActiveList+0x7c>)
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3304      	adds	r3, #4
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f7fd fe1a 	bl	8001f26 <vListInsert>
 80042f2:	e012      	b.n	800431a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d206      	bcs.n	800430a <prvInsertTimerInActiveList+0x62>
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e007      	b.n	800431a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800430a:	4b07      	ldr	r3, [pc, #28]	@ (8004328 <prvInsertTimerInActiveList+0x80>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3304      	adds	r3, #4
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fd fe06 	bl	8001f26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800431a:	697b      	ldr	r3, [r7, #20]
    }
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000208 	.word	0x20000208
 8004328:	20000204 	.word	0x20000204

0800432c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800432c:	b580      	push	{r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004332:	e0a9      	b.n	8004488 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f2c0 80a6 	blt.w	8004488 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	3304      	adds	r3, #4
 800434c:	4618      	mov	r0, r3
 800434e:	f7fd fe23 	bl	8001f98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff87 	bl	8004268 <prvSampleTimeNow>
 800435a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	3b01      	subs	r3, #1
 8004360:	2b08      	cmp	r3, #8
 8004362:	f200 808e 	bhi.w	8004482 <prvProcessReceivedCommands+0x156>
 8004366:	a201      	add	r2, pc, #4	@ (adr r2, 800436c <prvProcessReceivedCommands+0x40>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	08004391 	.word	0x08004391
 8004370:	08004391 	.word	0x08004391
 8004374:	080043f9 	.word	0x080043f9
 8004378:	0800440d 	.word	0x0800440d
 800437c:	08004459 	.word	0x08004459
 8004380:	08004391 	.word	0x08004391
 8004384:	08004391 	.word	0x08004391
 8004388:	080043f9 	.word	0x080043f9
 800438c:	0800440d 	.word	0x0800440d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	18d1      	adds	r1, r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	69f8      	ldr	r0, [r7, #28]
 80043b0:	f7ff ff7a 	bl	80042a8 <prvInsertTimerInActiveList>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d065      	beq.n	8004486 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4619      	mov	r1, r3
 80043d4:	69f8      	ldr	r0, [r7, #28]
 80043d6:	f7ff fe6f 	bl	80040b8 <prvReloadTimer>
 80043da:	e008      	b.n	80043ee <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043e2:	f023 0301 	bic.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	69f8      	ldr	r0, [r7, #28]
 80043f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80043f6:	e046      	b.n	8004486 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	b2da      	uxtb	r2, r3
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800440a:	e03d      	b.n	8004488 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	b2da      	uxtb	r2, r3
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	617b      	str	r3, [r7, #20]
    }
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	18d1      	adds	r1, r2, r3
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	69f8      	ldr	r0, [r7, #28]
 8004452:	f7ff ff29 	bl	80042a8 <prvInsertTimerInActiveList>
                        break;
 8004456:	e017      	b.n	8004488 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004466:	69f8      	ldr	r0, [r7, #28]
 8004468:	f000 fc1e 	bl	8004ca8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800446c:	e00c      	b.n	8004488 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004480:	e002      	b.n	8004488 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <prvProcessReceivedCommands+0x15c>
                        break;
 8004486:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004488:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <prvProcessReceivedCommands+0x180>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f107 0108 	add.w	r1, r7, #8
 8004490:	2200      	movs	r2, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe f810 	bl	80024b8 <xQueueReceive>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	f47f af4a 	bne.w	8004334 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	2000020c 	.word	0x2000020c

080044b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044b6:	e009      	b.n	80044cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044b8:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <prvSwitchTimerLists+0x44>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80044c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044c6:	6838      	ldr	r0, [r7, #0]
 80044c8:	f7ff fe18 	bl	80040fc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <prvSwitchTimerLists+0x44>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f0      	bne.n	80044b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80044d6:	4b07      	ldr	r3, [pc, #28]	@ (80044f4 <prvSwitchTimerLists+0x44>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <prvSwitchTimerLists+0x48>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <prvSwitchTimerLists+0x44>)
 80044e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044e4:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <prvSwitchTimerLists+0x48>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6013      	str	r3, [r2, #0]
    }
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000204 	.word	0x20000204
 80044f8:	20000208 	.word	0x20000208

080044fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004500:	f000 f9e4 	bl	80048cc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004504:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <prvCheckForValidListAndQueue+0x54>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11d      	bne.n	8004548 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800450c:	4811      	ldr	r0, [pc, #68]	@ (8004554 <prvCheckForValidListAndQueue+0x58>)
 800450e:	f7fd fcb9 	bl	8001e84 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004512:	4811      	ldr	r0, [pc, #68]	@ (8004558 <prvCheckForValidListAndQueue+0x5c>)
 8004514:	f7fd fcb6 	bl	8001e84 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <prvCheckForValidListAndQueue+0x60>)
 800451a:	4a0e      	ldr	r2, [pc, #56]	@ (8004554 <prvCheckForValidListAndQueue+0x58>)
 800451c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800451e:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <prvCheckForValidListAndQueue+0x64>)
 8004520:	4a0d      	ldr	r2, [pc, #52]	@ (8004558 <prvCheckForValidListAndQueue+0x5c>)
 8004522:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004524:	2200      	movs	r2, #0
 8004526:	210c      	movs	r1, #12
 8004528:	200a      	movs	r0, #10
 800452a:	f7fd fdf1 	bl	8002110 <xQueueGenericCreate>
 800452e:	4603      	mov	r3, r0
 8004530:	4a07      	ldr	r2, [pc, #28]	@ (8004550 <prvCheckForValidListAndQueue+0x54>)
 8004532:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004534:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <prvCheckForValidListAndQueue+0x54>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800453c:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <prvCheckForValidListAndQueue+0x54>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4908      	ldr	r1, [pc, #32]	@ (8004564 <prvCheckForValidListAndQueue+0x68>)
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fb24 	bl	8002b90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004548:	f000 f9f2 	bl	8004930 <vPortExitCritical>
    }
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}
 8004550:	2000020c 	.word	0x2000020c
 8004554:	200001dc 	.word	0x200001dc
 8004558:	200001f0 	.word	0x200001f0
 800455c:	20000204 	.word	0x20000204
 8004560:	20000208 	.word	0x20000208
 8004564:	08007864 	.word	0x08007864

08004568 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b04      	subs	r3, #4
 8004578:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004580:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b04      	subs	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b04      	subs	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004598:	4a0c      	ldr	r2, [pc, #48]	@ (80045cc <pxPortInitialiseStack+0x64>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b14      	subs	r3, #20
 80045a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b04      	subs	r3, #4
 80045ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f06f 0202 	mvn.w	r2, #2
 80045b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b20      	subs	r3, #32
 80045bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80045be:	68fb      	ldr	r3, [r7, #12]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	080045d1 	.word	0x080045d1

080045d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80045da:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <prvTaskExitError+0x58>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e2:	d00b      	beq.n	80045fc <prvTaskExitError+0x2c>
        __asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
    }
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <prvTaskExitError+0x28>
        __asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	60bb      	str	r3, [r7, #8]
    }
 800460e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004610:	bf00      	nop
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0fc      	beq.n	8004612 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000010 	.word	0x20000010
 800462c:	00000000 	.word	0x00000000

08004630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004630:	4b07      	ldr	r3, [pc, #28]	@ (8004650 <pxCurrentTCBConst2>)
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6808      	ldr	r0, [r1, #0]
 8004636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463a:	f380 8809 	msr	PSP, r0
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8811 	msr	BASEPRI, r0
 800464a:	4770      	bx	lr
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst2>:
 8004650:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004658:	4808      	ldr	r0, [pc, #32]	@ (800467c <prvPortStartFirstTask+0x24>)
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	6800      	ldr	r0, [r0, #0]
 800465e:	f380 8808 	msr	MSP, r0
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8814 	msr	CONTROL, r0
 800466a:	b662      	cpsie	i
 800466c:	b661      	cpsie	f
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	df00      	svc	0
 8004678:	bf00      	nop
 800467a:	0000      	.short	0x0000
 800467c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop

08004684 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800468a:	4b47      	ldr	r3, [pc, #284]	@ (80047a8 <xPortStartScheduler+0x124>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a47      	ldr	r2, [pc, #284]	@ (80047ac <xPortStartScheduler+0x128>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10b      	bne.n	80046ac <xPortStartScheduler+0x28>
        __asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	613b      	str	r3, [r7, #16]
    }
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	e7fd      	b.n	80046a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ac:	4b3e      	ldr	r3, [pc, #248]	@ (80047a8 <xPortStartScheduler+0x124>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a3f      	ldr	r2, [pc, #252]	@ (80047b0 <xPortStartScheduler+0x12c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10b      	bne.n	80046ce <xPortStartScheduler+0x4a>
        __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60fb      	str	r3, [r7, #12]
    }
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	e7fd      	b.n	80046ca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ce:	4b39      	ldr	r3, [pc, #228]	@ (80047b4 <xPortStartScheduler+0x130>)
 80046d0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	22ff      	movs	r2, #255	@ 0xff
 80046de:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <xPortStartScheduler+0x134>)
 80046f4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046f6:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <xPortStartScheduler+0x138>)
 80046f8:	2207      	movs	r2, #7
 80046fa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046fc:	e009      	b.n	8004712 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80046fe:	4b2f      	ldr	r3, [pc, #188]	@ (80047bc <xPortStartScheduler+0x138>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3b01      	subs	r3, #1
 8004704:	4a2d      	ldr	r2, [pc, #180]	@ (80047bc <xPortStartScheduler+0x138>)
 8004706:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471a:	2b80      	cmp	r3, #128	@ 0x80
 800471c:	d0ef      	beq.n	80046fe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800471e:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <xPortStartScheduler+0x138>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00b      	beq.n	8004742 <xPortStartScheduler+0xbe>
        __asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60bb      	str	r3, [r7, #8]
    }
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <xPortStartScheduler+0x138>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	021b      	lsls	r3, r3, #8
 8004748:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <xPortStartScheduler+0x138>)
 800474a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800474c:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <xPortStartScheduler+0x138>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004754:	4a19      	ldr	r2, [pc, #100]	@ (80047bc <xPortStartScheduler+0x138>)
 8004756:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004760:	4b17      	ldr	r3, [pc, #92]	@ (80047c0 <xPortStartScheduler+0x13c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a16      	ldr	r2, [pc, #88]	@ (80047c0 <xPortStartScheduler+0x13c>)
 8004766:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800476a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800476c:	4b14      	ldr	r3, [pc, #80]	@ (80047c0 <xPortStartScheduler+0x13c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a13      	ldr	r2, [pc, #76]	@ (80047c0 <xPortStartScheduler+0x13c>)
 8004772:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004776:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004778:	f000 f968 	bl	8004a4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800477c:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <xPortStartScheduler+0x140>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004782:	f000 f987 	bl	8004a94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <xPortStartScheduler+0x144>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a0f      	ldr	r2, [pc, #60]	@ (80047c8 <xPortStartScheduler+0x144>)
 800478c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004790:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004792:	f7ff ff61 	bl	8004658 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004796:	f7fe fef9 	bl	800358c <vTaskSwitchContext>
    prvTaskExitError();
 800479a:	f7ff ff19 	bl	80045d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed00 	.word	0xe000ed00
 80047ac:	410fc271 	.word	0x410fc271
 80047b0:	410fc270 	.word	0x410fc270
 80047b4:	e000e400 	.word	0xe000e400
 80047b8:	20000218 	.word	0x20000218
 80047bc:	2000021c 	.word	0x2000021c
 80047c0:	e000ed20 	.word	0xe000ed20
 80047c4:	20000010 	.word	0x20000010
 80047c8:	e000ef34 	.word	0xe000ef34

080047cc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047d2:	4b38      	ldr	r3, [pc, #224]	@ (80048b4 <vInitPrioGroupValue+0xe8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a38      	ldr	r2, [pc, #224]	@ (80048b8 <vInitPrioGroupValue+0xec>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d10b      	bne.n	80047f4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	613b      	str	r3, [r7, #16]
    }
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047f4:	4b2f      	ldr	r3, [pc, #188]	@ (80048b4 <vInitPrioGroupValue+0xe8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a30      	ldr	r2, [pc, #192]	@ (80048bc <vInitPrioGroupValue+0xf0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d10b      	bne.n	8004816 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
    }
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004816:	4b2a      	ldr	r3, [pc, #168]	@ (80048c0 <vInitPrioGroupValue+0xf4>)
 8004818:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	22ff      	movs	r2, #255	@ 0xff
 8004826:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004830:	78fb      	ldrb	r3, [r7, #3]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <vInitPrioGroupValue+0xf8>)
 800483c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800483e:	4b22      	ldr	r3, [pc, #136]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 8004840:	2207      	movs	r2, #7
 8004842:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004844:	e009      	b.n	800485a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004846:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 800484e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	b2db      	uxtb	r3, r3
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	b2db      	uxtb	r3, r3
 8004858:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b80      	cmp	r3, #128	@ 0x80
 8004864:	d0ef      	beq.n	8004846 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004866:	4b18      	ldr	r3, [pc, #96]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1c3 0307 	rsb	r3, r3, #7
 800486e:	2b04      	cmp	r3, #4
 8004870:	d00b      	beq.n	800488a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60bb      	str	r3, [r7, #8]
    }
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800488a:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	4a0d      	ldr	r2, [pc, #52]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 8004892:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800489c:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <vInitPrioGroupValue+0xfc>)
 800489e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000ed00 	.word	0xe000ed00
 80048b8:	410fc271 	.word	0x410fc271
 80048bc:	410fc270 	.word	0x410fc270
 80048c0:	e000e400 	.word	0xe000e400
 80048c4:	20000218 	.word	0x20000218
 80048c8:	2000021c 	.word	0x2000021c

080048cc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
        __asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	607b      	str	r3, [r7, #4]
    }
 80048e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80048e6:	4b10      	ldr	r3, [pc, #64]	@ (8004928 <vPortEnterCritical+0x5c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3301      	adds	r3, #1
 80048ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004928 <vPortEnterCritical+0x5c>)
 80048ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80048f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <vPortEnterCritical+0x5c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d110      	bne.n	800491a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <vPortEnterCritical+0x60>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <vPortEnterCritical+0x4e>
        __asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	603b      	str	r3, [r7, #0]
    }
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <vPortEnterCritical+0x4a>
    }
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000010 	.word	0x20000010
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004936:	4b12      	ldr	r3, [pc, #72]	@ (8004980 <vPortExitCritical+0x50>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10b      	bne.n	8004956 <vPortExitCritical+0x26>
        __asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
    }
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	e7fd      	b.n	8004952 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004956:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <vPortExitCritical+0x50>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a08      	ldr	r2, [pc, #32]	@ (8004980 <vPortExitCritical+0x50>)
 800495e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <vPortExitCritical+0x50>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <vPortExitCritical+0x44>
 8004968:	2300      	movs	r3, #0
 800496a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004972:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	20000010 	.word	0x20000010
	...

08004990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004990:	f3ef 8009 	mrs	r0, PSP
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <pxCurrentTCBConst>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f01e 0f10 	tst.w	lr, #16
 80049a0:	bf08      	it	eq
 80049a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	6010      	str	r0, [r2, #0]
 80049ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80049b4:	f380 8811 	msr	BASEPRI, r0
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f7fe fde4 	bl	800358c <vTaskSwitchContext>
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f380 8811 	msr	BASEPRI, r0
 80049cc:	bc09      	pop	{r0, r3}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d6:	f01e 0f10 	tst.w	lr, #16
 80049da:	bf08      	it	eq
 80049dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049e0:	f380 8809 	msr	PSP, r0
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst>:
 80049f0:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
        __asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
    }
 8004a10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004a12:	f002 fb33 	bl	800707c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004a16:	f7fe fc9d 	bl	8003354 <xTaskIncrementTick>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d006      	beq.n	8004a2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004a20:	f002 fb8a 	bl	8007138 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a24:	4b08      	ldr	r3, [pc, #32]	@ (8004a48 <SysTick_Handler+0x50>)
 8004a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e001      	b.n	8004a32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004a2e:	f002 fb67 	bl	8007100 <SEGGER_SYSVIEW_RecordExitISR>
 8004a32:	2300      	movs	r3, #0
 8004a34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f383 8811 	msr	BASEPRI, r3
    }
 8004a3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <vPortSetupTimerInterrupt+0x34>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a56:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <vPortSetupTimerInterrupt+0x38>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a88 <vPortSetupTimerInterrupt+0x3c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a0a      	ldr	r2, [pc, #40]	@ (8004a8c <vPortSetupTimerInterrupt+0x40>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	4a09      	ldr	r2, [pc, #36]	@ (8004a90 <vPortSetupTimerInterrupt+0x44>)
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a6e:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <vPortSetupTimerInterrupt+0x34>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000e010 	.word	0xe000e010
 8004a84:	e000e018 	.word	0xe000e018
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	10624dd3 	.word	0x10624dd3
 8004a90:	e000e014 	.word	0xe000e014

08004a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004aa4 <vPortEnableVFP+0x10>
 8004a98:	6801      	ldr	r1, [r0, #0]
 8004a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004a9e:	6001      	str	r1, [r0, #0]
 8004aa0:	4770      	bx	lr
 8004aa2:	0000      	.short	0x0000
 8004aa4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop

08004aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ab2:	f3ef 8305 	mrs	r3, IPSR
 8004ab6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d915      	bls.n	8004aea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <vPortValidateInterruptPriority+0x74>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ac8:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <vPortValidateInterruptPriority+0x78>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	7afa      	ldrb	r2, [r7, #11]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d20b      	bcs.n	8004aea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	607b      	str	r3, [r7, #4]
    }
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004aea:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <vPortValidateInterruptPriority+0x7c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004af2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b2c <vPortValidateInterruptPriority+0x80>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d90b      	bls.n	8004b12 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	603b      	str	r3, [r7, #0]
    }
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <vPortValidateInterruptPriority+0x62>
    }
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000e3f0 	.word	0xe000e3f0
 8004b24:	20000218 	.word	0x20000218
 8004b28:	e000ed0c 	.word	0xe000ed0c
 8004b2c:	2000021c 	.word	0x2000021c

08004b30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004b3c:	f7fe fada 	bl	80030f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004b40:	4b54      	ldr	r3, [pc, #336]	@ (8004c94 <pvPortMalloc+0x164>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004b48:	f000 f90c 	bl	8004d64 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d012      	beq.n	8004b78 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004b52:	2208      	movs	r2, #8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d804      	bhi.n	8004b74 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	4413      	add	r3, r2
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	e001      	b.n	8004b78 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	db71      	blt.n	8004c62 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d06e      	beq.n	8004c62 <pvPortMalloc+0x132>
 8004b84:	4b44      	ldr	r3, [pc, #272]	@ (8004c98 <pvPortMalloc+0x168>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d869      	bhi.n	8004c62 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b8e:	4b43      	ldr	r3, [pc, #268]	@ (8004c9c <pvPortMalloc+0x16c>)
 8004b90:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b92:	4b42      	ldr	r3, [pc, #264]	@ (8004c9c <pvPortMalloc+0x16c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b98:	e004      	b.n	8004ba4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d903      	bls.n	8004bb6 <pvPortMalloc+0x86>
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f1      	bne.n	8004b9a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004bb6:	4b37      	ldr	r3, [pc, #220]	@ (8004c94 <pvPortMalloc+0x164>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d050      	beq.n	8004c62 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	4413      	add	r3, r2
 8004bc8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	1ad2      	subs	r2, r2, r3
 8004bda:	2308      	movs	r3, #8
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d920      	bls.n	8004c24 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00b      	beq.n	8004c0c <pvPortMalloc+0xdc>
        __asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	613b      	str	r3, [r7, #16]
    }
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1ad2      	subs	r2, r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f000 f8fc 	bl	8004e1c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c24:	4b1c      	ldr	r3, [pc, #112]	@ (8004c98 <pvPortMalloc+0x168>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004c98 <pvPortMalloc+0x168>)
 8004c30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c32:	4b19      	ldr	r3, [pc, #100]	@ (8004c98 <pvPortMalloc+0x168>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <pvPortMalloc+0x170>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d203      	bcs.n	8004c46 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c3e:	4b16      	ldr	r3, [pc, #88]	@ (8004c98 <pvPortMalloc+0x168>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <pvPortMalloc+0x170>)
 8004c44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c58:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <pvPortMalloc+0x174>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a11      	ldr	r2, [pc, #68]	@ (8004ca4 <pvPortMalloc+0x174>)
 8004c60:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c62:	f7fe fa55 	bl	8003110 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <pvPortMalloc+0x158>
        __asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
    }
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <pvPortMalloc+0x154>
    return pvReturn;
 8004c88:	69fb      	ldr	r3, [r7, #28]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3728      	adds	r7, #40	@ 0x28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20012e28 	.word	0x20012e28
 8004c98:	20012e2c 	.word	0x20012e2c
 8004c9c:	20012e20 	.word	0x20012e20
 8004ca0:	20012e30 	.word	0x20012e30
 8004ca4:	20012e34 	.word	0x20012e34

08004ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04b      	beq.n	8004d52 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004cba:	2308      	movs	r3, #8
 8004cbc:	425b      	negs	r3, r3
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	db0b      	blt.n	8004ce8 <vPortFree+0x40>
        __asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
    }
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <vPortFree+0x60>
        __asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60bb      	str	r3, [r7, #8]
    }
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0fdb      	lsrs	r3, r3, #31
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01c      	beq.n	8004d52 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d118      	bne.n	8004d52 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004d2c:	f7fe f9e2 	bl	80030f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <vPortFree+0xb4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	4a08      	ldr	r2, [pc, #32]	@ (8004d5c <vPortFree+0xb4>)
 8004d3c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d3e:	6938      	ldr	r0, [r7, #16]
 8004d40:	f000 f86c 	bl	8004e1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d44:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <vPortFree+0xb8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	4a05      	ldr	r2, [pc, #20]	@ (8004d60 <vPortFree+0xb8>)
 8004d4c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d4e:	f7fe f9df 	bl	8003110 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20012e2c 	.word	0x20012e2c
 8004d60:	20012e38 	.word	0x20012e38

08004d64 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d6a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004d70:	4b25      	ldr	r3, [pc, #148]	@ (8004e08 <prvHeapInit+0xa4>)
 8004d72:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00c      	beq.n	8004d98 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3307      	adds	r3, #7
 8004d82:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <prvHeapInit+0xa4>)
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e0c <prvHeapInit+0xa8>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e0c <prvHeapInit+0xa8>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4413      	add	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004db0:	2208      	movs	r2, #8
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0307 	bic.w	r3, r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <prvHeapInit+0xac>)
 8004dc4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004dc6:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <prvHeapInit+0xac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004dce:	4b10      	ldr	r3, [pc, #64]	@ (8004e10 <prvHeapInit+0xac>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004de4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <prvHeapInit+0xac>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <prvHeapInit+0xb0>)
 8004df2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a07      	ldr	r2, [pc, #28]	@ (8004e18 <prvHeapInit+0xb4>)
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000220 	.word	0x20000220
 8004e0c:	20012e20 	.word	0x20012e20
 8004e10:	20012e28 	.word	0x20012e28
 8004e14:	20012e30 	.word	0x20012e30
 8004e18:	20012e2c 	.word	0x20012e2c

08004e1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e24:	4b28      	ldr	r3, [pc, #160]	@ (8004ec8 <prvInsertBlockIntoFreeList+0xac>)
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e002      	b.n	8004e30 <prvInsertBlockIntoFreeList+0x14>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d8f7      	bhi.n	8004e2a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4413      	add	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d108      	bne.n	8004e5e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d118      	bne.n	8004ea4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b15      	ldr	r3, [pc, #84]	@ (8004ecc <prvInsertBlockIntoFreeList+0xb0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d00d      	beq.n	8004e9a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e008      	b.n	8004eac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <prvInsertBlockIntoFreeList+0xb0>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e003      	b.n	8004eac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d002      	beq.n	8004eba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20012e20 	.word	0x20012e20
 8004ecc:	20012e28 	.word	0x20012e28

08004ed0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	e033      	b.n	8004f44 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004edc:	491e      	ldr	r1, [pc, #120]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	491a      	ldr	r1, [pc, #104]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3304      	adds	r3, #4
 8004efc:	6819      	ldr	r1, [r3, #0]
 8004efe:	4c16      	ldr	r4, [pc, #88]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4423      	add	r3, r4
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	681c      	ldr	r4, [r3, #0]
 8004f10:	4d11      	ldr	r5, [pc, #68]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	442b      	add	r3, r5
 8004f1e:	330c      	adds	r3, #12
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	4e0d      	ldr	r6, [pc, #52]	@ (8004f58 <_cbSendTaskList+0x88>)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4433      	add	r3, r6
 8004f30:	3310      	adds	r3, #16
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	462b      	mov	r3, r5
 8004f38:	4622      	mov	r2, r4
 8004f3a:	f000 f8bd 	bl	80050b8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3301      	adds	r3, #1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	4b05      	ldr	r3, [pc, #20]	@ (8004f5c <_cbSendTaskList+0x8c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d3c6      	bcc.n	8004edc <_cbSendTaskList+0xc>
  }
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	20012e3c 	.word	0x20012e3c
 8004f5c:	20012edc 	.word	0x20012edc

08004f60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f68:	f7fe f9e2 	bl	8003330 <xTaskGetTickCountFromISR>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2200      	movs	r2, #0
 8004f70:	469a      	mov	sl, r3
 8004f72:	4693      	mov	fp, r2
 8004f74:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	f04f 0a00 	mov.w	sl, #0
 8004f84:	f04f 0b00 	mov.w	fp, #0
 8004f88:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f8c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f90:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f94:	4652      	mov	r2, sl
 8004f96:	465b      	mov	r3, fp
 8004f98:	1a14      	subs	r4, r2, r0
 8004f9a:	eb63 0501 	sbc.w	r5, r3, r1
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	00ab      	lsls	r3, r5, #2
 8004fa8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004fac:	00a2      	lsls	r2, r4, #2
 8004fae:	4614      	mov	r4, r2
 8004fb0:	461d      	mov	r5, r3
 8004fb2:	eb14 0800 	adds.w	r8, r4, r0
 8004fb6:	eb45 0901 	adc.w	r9, r5, r1
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fce:	4690      	mov	r8, r2
 8004fd0:	4699      	mov	r9, r3
 8004fd2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004fe8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ff6:	2205      	movs	r2, #5
 8004ff8:	492b      	ldr	r1, [pc, #172]	@ (80050a8 <SYSVIEW_AddTask+0xc0>)
 8004ffa:	68b8      	ldr	r0, [r7, #8]
 8004ffc:	f002 fb48 	bl	8007690 <memcmp>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04b      	beq.n	800509e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005006:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b07      	cmp	r3, #7
 800500c:	d903      	bls.n	8005016 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800500e:	4828      	ldr	r0, [pc, #160]	@ (80050b0 <SYSVIEW_AddTask+0xc8>)
 8005010:	f002 fa90 	bl	8007534 <SEGGER_SYSVIEW_Warn>
    return;
 8005014:	e044      	b.n	80050a0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005016:	4b25      	ldr	r3, [pc, #148]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4926      	ldr	r1, [pc, #152]	@ (80050b4 <SYSVIEW_AddTask+0xcc>)
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800502a:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4921      	ldr	r1, [pc, #132]	@ (80050b4 <SYSVIEW_AddTask+0xcc>)
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	3304      	adds	r3, #4
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005040:	4b1a      	ldr	r3, [pc, #104]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	491b      	ldr	r1, [pc, #108]	@ (80050b4 <SYSVIEW_AddTask+0xcc>)
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3308      	adds	r3, #8
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005056:	4b15      	ldr	r3, [pc, #84]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4916      	ldr	r1, [pc, #88]	@ (80050b4 <SYSVIEW_AddTask+0xcc>)
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	330c      	adds	r3, #12
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800506c:	4b0f      	ldr	r3, [pc, #60]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4910      	ldr	r1, [pc, #64]	@ (80050b4 <SYSVIEW_AddTask+0xcc>)
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3310      	adds	r3, #16
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <SYSVIEW_AddTask+0xc4>)
 800508a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f80e 	bl	80050b8 <SYSVIEW_SendTaskInfo>
 800509c:	e000      	b.n	80050a0 <SYSVIEW_AddTask+0xb8>
    return;
 800509e:	bf00      	nop

}
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	0800786c 	.word	0x0800786c
 80050ac:	20012edc 	.word	0x20012edc
 80050b0:	08007874 	.word	0x08007874
 80050b4:	20012e3c 	.word	0x20012e3c

080050b8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	@ 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	2214      	movs	r2, #20
 80050cc:	2100      	movs	r1, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 faee 	bl	80076b0 <memset>
  TaskInfo.TaskID     = TaskID;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fe77 	bl	8006de0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	@ 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <__NVIC_EnableIRQ>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db0b      	blt.n	8005126 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	4907      	ldr	r1, [pc, #28]	@ (8005134 <__NVIC_EnableIRQ+0x38>)
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2001      	movs	r0, #1
 800511e:	fa00 f202 	lsl.w	r2, r0, r2
 8005122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000e100 	.word	0xe000e100

08005138 <__NVIC_SetPriority>:
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	6039      	str	r1, [r7, #0]
 8005142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005148:	2b00      	cmp	r3, #0
 800514a:	db0a      	blt.n	8005162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	490c      	ldr	r1, [pc, #48]	@ (8005184 <__NVIC_SetPriority+0x4c>)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	0112      	lsls	r2, r2, #4
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	440b      	add	r3, r1
 800515c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005160:	e00a      	b.n	8005178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4908      	ldr	r1, [pc, #32]	@ (8005188 <__NVIC_SetPriority+0x50>)
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	3b04      	subs	r3, #4
 8005170:	0112      	lsls	r2, r2, #4
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	440b      	add	r3, r1
 8005176:	761a      	strb	r2, [r3, #24]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	e000e100 	.word	0xe000e100
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005192:	f002 fa2b 	bl	80075ec <SEGGER_SYSVIEW_IsStarted>
 8005196:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800519e:	f001 fca3 	bl	8006ae8 <SEGGER_SYSVIEW_Start>
  }
}
 80051a2:	bf00      	nop
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80051b6:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <_cbOnUARTRx+0x3c>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d806      	bhi.n	80051cc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80051be:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <_cbOnUARTRx+0x3c>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <_cbOnUARTRx+0x3c>)
 80051c8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80051ca:	e009      	b.n	80051e0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80051cc:	f7ff ffde 	bl	800518c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <_cbOnUARTRx+0x3c>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4618      	mov	r0, r3
 80051d6:	1dfb      	adds	r3, r7, #7
 80051d8:	2201      	movs	r2, #1
 80051da:	4619      	mov	r1, r3
 80051dc:	f000 fb9a 	bl	8005914 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80051e0:	bf00      	nop
}
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000014 	.word	0x20000014

080051ec <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80051f4:	4b14      	ldr	r3, [pc, #80]	@ (8005248 <_cbOnUARTTx+0x5c>)
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d80f      	bhi.n	800521c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80051fc:	4b12      	ldr	r3, [pc, #72]	@ (8005248 <_cbOnUARTTx+0x5c>)
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	461a      	mov	r2, r3
 8005202:	4b12      	ldr	r3, [pc, #72]	@ (800524c <_cbOnUARTTx+0x60>)
 8005204:	5c9a      	ldrb	r2, [r3, r2]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800520a:	4b0f      	ldr	r3, [pc, #60]	@ (8005248 <_cbOnUARTTx+0x5c>)
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	3301      	adds	r3, #1
 8005210:	b2da      	uxtb	r2, r3
 8005212:	4b0d      	ldr	r3, [pc, #52]	@ (8005248 <_cbOnUARTTx+0x5c>)
 8005214:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
    goto Done;
 800521a:	e00f      	b.n	800523c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800521c:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <_cbOnUARTTx+0x5c>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	f000 fa19 	bl	800565c <SEGGER_RTT_ReadUpBufferNoLock>
 800522a:	4603      	mov	r3, r0
 800522c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	da02      	bge.n	800523a <_cbOnUARTTx+0x4e>
    r = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e000      	b.n	800523c <_cbOnUARTTx+0x50>
  }
Done:
 800523a:	bf00      	nop
  return r;
 800523c:	68fb      	ldr	r3, [r7, #12]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000014 	.word	0x20000014
 800524c:	08007948 	.word	0x08007948

08005250 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005258:	4a04      	ldr	r2, [pc, #16]	@ (800526c <SEGGER_UART_init+0x1c>)
 800525a:	4905      	ldr	r1, [pc, #20]	@ (8005270 <SEGGER_UART_init+0x20>)
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f863 	bl	8005328 <HIF_UART_Init>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	080051ad 	.word	0x080051ad
 8005270:	080051ed 	.word	0x080051ed

08005274 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800527a:	4b1e      	ldr	r3, [pc, #120]	@ (80052f4 <USART2_IRQHandler+0x80>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d011      	beq.n	80052ae <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <USART2_IRQHandler+0x84>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 030b 	and.w	r3, r3, #11
 8005298:	2b00      	cmp	r3, #0
 800529a:	d108      	bne.n	80052ae <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800529c:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <USART2_IRQHandler+0x88>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80052a4:	4b15      	ldr	r3, [pc, #84]	@ (80052fc <USART2_IRQHandler+0x88>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	79fa      	ldrb	r2, [r7, #7]
 80052aa:	4610      	mov	r0, r2
 80052ac:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <USART2_IRQHandler+0x8c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80052c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005300 <USART2_IRQHandler+0x8c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	1dfa      	adds	r2, r7, #7
 80052c6:	4610      	mov	r0, r2
 80052c8:	4798      	blx	r3
 80052ca:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80052d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <USART2_IRQHandler+0x90>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0b      	ldr	r2, [pc, #44]	@ (8005304 <USART2_IRQHandler+0x90>)
 80052d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e006      	b.n	80052ee <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80052e0:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <USART2_IRQHandler+0x80>)
 80052e2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80052e4:	79fa      	ldrb	r2, [r7, #7]
 80052e6:	4b04      	ldr	r3, [pc, #16]	@ (80052f8 <USART2_IRQHandler+0x84>)
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e000      	b.n	80052ee <USART2_IRQHandler+0x7a>
      return;
 80052ec:	bf00      	nop
    }
  }
}
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40004400 	.word	0x40004400
 80052f8:	40004404 	.word	0x40004404
 80052fc:	20012ee0 	.word	0x20012ee0
 8005300:	20012ee4 	.word	0x20012ee4
 8005304:	4000440c 	.word	0x4000440c

08005308 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800530c:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a04      	ldr	r2, [pc, #16]	@ (8005324 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005316:	6013      	str	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	4000440c 	.word	0x4000440c

08005328 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005334:	4b2e      	ldr	r3, [pc, #184]	@ (80053f0 <HIF_UART_Init+0xc8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2d      	ldr	r2, [pc, #180]	@ (80053f0 <HIF_UART_Init+0xc8>)
 800533a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800533e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005340:	4b2c      	ldr	r3, [pc, #176]	@ (80053f4 <HIF_UART_Init+0xcc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2b      	ldr	r2, [pc, #172]	@ (80053f4 <HIF_UART_Init+0xcc>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800534c:	4b2a      	ldr	r3, [pc, #168]	@ (80053f8 <HIF_UART_Init+0xd0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005358:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005360:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005362:	4a25      	ldr	r2, [pc, #148]	@ (80053f8 <HIF_UART_Init+0xd0>)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005368:	4b24      	ldr	r3, [pc, #144]	@ (80053fc <HIF_UART_Init+0xd4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005374:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800537c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800537e:	4a1f      	ldr	r2, [pc, #124]	@ (80053fc <HIF_UART_Init+0xd4>)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005384:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <HIF_UART_Init+0xd8>)
 8005386:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800538a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800538c:	4b1d      	ldr	r3, [pc, #116]	@ (8005404 <HIF_UART_Init+0xdc>)
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005392:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <HIF_UART_Init+0xe0>)
 8005394:	2280      	movs	r2, #128	@ 0x80
 8005396:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800539e:	4a1b      	ldr	r2, [pc, #108]	@ (800540c <HIF_UART_Init+0xe4>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	3301      	adds	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b6:	d302      	bcc.n	80053be <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80053b8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80053bc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4a11      	ldr	r2, [pc, #68]	@ (8005410 <HIF_UART_Init+0xe8>)
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80053ce:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <HIF_UART_Init+0xec>)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80053d4:	4a10      	ldr	r2, [pc, #64]	@ (8005418 <HIF_UART_Init+0xf0>)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80053da:	2106      	movs	r1, #6
 80053dc:	2026      	movs	r0, #38	@ 0x26
 80053de:	f7ff feab 	bl	8005138 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80053e2:	2026      	movs	r0, #38	@ 0x26
 80053e4:	f7ff fe8a 	bl	80050fc <__NVIC_EnableIRQ>
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40023840 	.word	0x40023840
 80053f4:	40023830 	.word	0x40023830
 80053f8:	40020020 	.word	0x40020020
 80053fc:	40020000 	.word	0x40020000
 8005400:	4000440c 	.word	0x4000440c
 8005404:	40004410 	.word	0x40004410
 8005408:	40004414 	.word	0x40004414
 800540c:	0501bd00 	.word	0x0501bd00
 8005410:	40004408 	.word	0x40004408
 8005414:	20012ee0 	.word	0x20012ee0
 8005418:	20012ee4 	.word	0x20012ee4

0800541c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005422:	4b24      	ldr	r3, [pc, #144]	@ (80054b4 <_DoInit+0x98>)
 8005424:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2203      	movs	r2, #3
 800542a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2203      	movs	r2, #3
 8005430:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <_DoInit+0x9c>)
 8005436:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a20      	ldr	r2, [pc, #128]	@ (80054bc <_DoInit+0xa0>)
 800543c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005444:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a17      	ldr	r2, [pc, #92]	@ (80054b8 <_DoInit+0x9c>)
 800545c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a17      	ldr	r2, [pc, #92]	@ (80054c0 <_DoInit+0xa4>)
 8005462:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2210      	movs	r2, #16
 8005468:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3307      	adds	r3, #7
 8005480:	4a10      	ldr	r2, [pc, #64]	@ (80054c4 <_DoInit+0xa8>)
 8005482:	6810      	ldr	r0, [r2, #0]
 8005484:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005486:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a0e      	ldr	r2, [pc, #56]	@ (80054c8 <_DoInit+0xac>)
 800548e:	6810      	ldr	r0, [r2, #0]
 8005490:	6018      	str	r0, [r3, #0]
 8005492:	8891      	ldrh	r1, [r2, #4]
 8005494:	7992      	ldrb	r2, [r2, #6]
 8005496:	8099      	strh	r1, [r3, #4]
 8005498:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800549a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054a4:	f3bf 8f5f 	dmb	sy
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20012ee8 	.word	0x20012ee8
 80054b8:	080078c4 	.word	0x080078c4
 80054bc:	20012f90 	.word	0x20012f90
 80054c0:	20013390 	.word	0x20013390
 80054c4:	080078d0 	.word	0x080078d0
 80054c8:	080078d4 	.word	0x080078d4

080054cc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	@ 0x28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80054d8:	2300      	movs	r3, #0
 80054da:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d905      	bls.n	80054fc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fa:	e007      	b.n	800550c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	1acb      	subs	r3, r1, r3
 8005506:	4413      	add	r3, r2
 8005508:	3b01      	subs	r3, #1
 800550a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	4293      	cmp	r3, r2
 8005518:	bf28      	it	cs
 800551a:	4613      	movcs	r3, r2
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800551e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4293      	cmp	r3, r2
 8005524:	bf28      	it	cs
 8005526:	4613      	movcs	r3, r2
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	6978      	ldr	r0, [r7, #20]
 800553a:	f002 f8e5 	bl	8007708 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800553e:	6a3a      	ldr	r2, [r7, #32]
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	4413      	add	r3, r2
 8005544:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	4413      	add	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	4413      	add	r3, r2
 800555c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	429a      	cmp	r2, r3
 8005566:	d101      	bne.n	800556c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800556c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	69fa      	ldr	r2, [r7, #28]
 8005574:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1b2      	bne.n	80054e2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800557c:	6a3b      	ldr	r3, [r7, #32]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3728      	adds	r7, #40	@ 0x28
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005586:	b580      	push	{r7, lr}
 8005588:	b088      	sub	sp, #32
 800558a:	af00      	add	r7, sp, #0
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d911      	bls.n	80055ce <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	6938      	ldr	r0, [r7, #16]
 80055ba:	f002 f8a5 	bl	8007708 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055be:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	441a      	add	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80055cc:	e01f      	b.n	800560e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	6938      	ldr	r0, [r7, #16]
 80055e2:	f002 f891 	bl	8007708 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4619      	mov	r1, r3
 80055fe:	6938      	ldr	r0, [r7, #16]
 8005600:	f002 f882 	bl	8007708 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005604:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	60da      	str	r2, [r3, #12]
}
 800560e:	bf00      	nop
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005616:	b480      	push	{r7}
 8005618:	b087      	sub	sp, #28
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	429a      	cmp	r2, r3
 8005630:	d808      	bhi.n	8005644 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	1ad2      	subs	r2, r2, r3
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	3b01      	subs	r3, #1
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e004      	b.n	800564e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800564e:	697b      	ldr	r3, [r7, #20]
}
 8005650:	4618      	mov	r0, r3
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	@ 0x30
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005668:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800566a:	623b      	str	r3, [r7, #32]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005676:	f7ff fed1 	bl	800541c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4a37      	ldr	r2, [pc, #220]	@ (8005764 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005688:	4413      	add	r3, r2
 800568a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800569c:	2300      	movs	r3, #0
 800569e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d92b      	bls.n	8005700 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bf28      	it	cs
 80056ba:	4613      	movcs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	4413      	add	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056ce:	f002 f81b 	bl	8007708 <memcpy>
    NumBytesRead += NumBytesRem;
 80056d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80056da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d101      	bne.n	8005700 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80056fc:	2300      	movs	r3, #0
 80056fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4293      	cmp	r3, r2
 800570e:	bf28      	it	cs
 8005710:	4613      	movcs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d019      	beq.n	800574e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005720:	4413      	add	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6939      	ldr	r1, [r7, #16]
 8005728:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800572a:	f001 ffed 	bl	8007708 <memcpy>
    NumBytesRead += NumBytesRem;
 800572e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800574e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005758:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800575a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800575c:	4618      	mov	r0, r3
 800575e:	3730      	adds	r7, #48	@ 0x30
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20012ee8 	.word	0x20012ee8

08005768 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	@ 0x30
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005774:	4b3e      	ldr	r3, [pc, #248]	@ (8005870 <SEGGER_RTT_ReadNoLock+0x108>)
 8005776:	623b      	str	r3, [r7, #32]
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <SEGGER_RTT_ReadNoLock+0x1e>
 8005782:	f7ff fe4b 	bl	800541c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4613      	mov	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4413      	add	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	3360      	adds	r3, #96	@ 0x60
 8005792:	4a37      	ldr	r2, [pc, #220]	@ (8005870 <SEGGER_RTT_ReadNoLock+0x108>)
 8005794:	4413      	add	r3, r2
 8005796:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d92b      	bls.n	800580c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4293      	cmp	r3, r2
 80057c4:	bf28      	it	cs
 80057c6:	4613      	movcs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	4413      	add	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	6939      	ldr	r1, [r7, #16]
 80057d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057da:	f001 ff95 	bl	8007708 <memcpy>
    NumBytesRead += NumBytesRem;
 80057de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	4413      	add	r3, r2
 80057e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	4413      	add	r3, r2
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005804:	429a      	cmp	r2, r3
 8005806:	d101      	bne.n	800580c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005808:	2300      	movs	r3, #0
 800580a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4293      	cmp	r3, r2
 800581a:	bf28      	it	cs
 800581c:	4613      	movcs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d019      	beq.n	800585a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	4413      	add	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	6939      	ldr	r1, [r7, #16]
 8005834:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005836:	f001 ff67 	bl	8007708 <memcpy>
    NumBytesRead += NumBytesRem;
 800583a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800585a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005864:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005868:	4618      	mov	r0, r3
 800586a:	3730      	adds	r7, #48	@ 0x30
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20012ee8 	.word	0x20012ee8

08005874 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	3360      	adds	r3, #96	@ 0x60
 8005890:	4a1f      	ldr	r2, [pc, #124]	@ (8005910 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005892:	4413      	add	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d029      	beq.n	80058f2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d82e      	bhi.n	8005900 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d013      	beq.n	80058d2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80058aa:	e029      	b.n	8005900 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058ac:	6978      	ldr	r0, [r7, #20]
 80058ae:	f7ff feb2 	bl	8005616 <_GetAvailWriteSpace>
 80058b2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d202      	bcs.n	80058c2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80058bc:	2300      	movs	r3, #0
 80058be:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80058c0:	e021      	b.n	8005906 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	69b9      	ldr	r1, [r7, #24]
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f7ff fe5b 	bl	8005586 <_WriteNoCheck>
    break;
 80058d0:	e019      	b.n	8005906 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f7ff fe9f 	bl	8005616 <_GetAvailWriteSpace>
 80058d8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4293      	cmp	r3, r2
 80058e0:	bf28      	it	cs
 80058e2:	4613      	movcs	r3, r2
 80058e4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	6978      	ldr	r0, [r7, #20]
 80058ec:	f7ff fe4b 	bl	8005586 <_WriteNoCheck>
    break;
 80058f0:	e009      	b.n	8005906 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	69b9      	ldr	r1, [r7, #24]
 80058f6:	6978      	ldr	r0, [r7, #20]
 80058f8:	f7ff fde8 	bl	80054cc <_WriteBlocking>
 80058fc:	61f8      	str	r0, [r7, #28]
    break;
 80058fe:	e002      	b.n	8005906 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
    break;
 8005904:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005906:	69fb      	ldr	r3, [r7, #28]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20012ee8 	.word	0x20012ee8

08005914 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005920:	4b0e      	ldr	r3, [pc, #56]	@ (800595c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800592e:	f7ff fd75 	bl	800541c <_DoInit>
  SEGGER_RTT_LOCK();
 8005932:	f3ef 8311 	mrs	r3, BASEPRI
 8005936:	f04f 0120 	mov.w	r1, #32
 800593a:	f381 8811 	msr	BASEPRI, r1
 800593e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff ff95 	bl	8005874 <SEGGER_RTT_WriteDownBufferNoLock>
 800594a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005952:	697b      	ldr	r3, [r7, #20]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20012ee8 	.word	0x20012ee8

08005960 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800596e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a64 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <SEGGER_RTT_AllocUpBuffer+0x20>
 800597c:	f7ff fd4e 	bl	800541c <_DoInit>
  SEGGER_RTT_LOCK();
 8005980:	f3ef 8311 	mrs	r3, BASEPRI
 8005984:	f04f 0120 	mov.w	r1, #32
 8005988:	f381 8811 	msr	BASEPRI, r1
 800598c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800598e:	4b35      	ldr	r3, [pc, #212]	@ (8005a64 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005990:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005996:	6939      	ldr	r1, [r7, #16]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	4613      	mov	r3, r2
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	4413      	add	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	440b      	add	r3, r1
 80059a6:	3304      	adds	r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	3301      	adds	r3, #1
 80059b2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	dbeb      	blt.n	8005996 <SEGGER_RTT_AllocUpBuffer+0x36>
 80059be:	e000      	b.n	80059c2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059c0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	da3f      	bge.n	8005a4c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80059cc:	6939      	ldr	r1, [r7, #16]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	4613      	mov	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	4413      	add	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	440b      	add	r3, r1
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059e0:	6939      	ldr	r1, [r7, #16]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	3304      	adds	r3, #4
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80059f6:	6939      	ldr	r1, [r7, #16]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	4613      	mov	r3, r2
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	4413      	add	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	440b      	add	r3, r1
 8005a04:	3320      	adds	r3, #32
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a0a:	6939      	ldr	r1, [r7, #16]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	440b      	add	r3, r1
 8005a18:	3328      	adds	r3, #40	@ 0x28
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a1e:	6939      	ldr	r1, [r7, #16]
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	3324      	adds	r3, #36	@ 0x24
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a32:	6939      	ldr	r1, [r7, #16]
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	332c      	adds	r3, #44	@ 0x2c
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a46:	f3bf 8f5f 	dmb	sy
 8005a4a:	e002      	b.n	8005a52 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a50:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a58:	69fb      	ldr	r3, [r7, #28]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20012ee8 	.word	0x20012ee8

08005a68 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a76:	4b33      	ldr	r3, [pc, #204]	@ (8005b44 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a84:	f7ff fcca 	bl	800541c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a88:	4b2e      	ldr	r3, [pc, #184]	@ (8005b44 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005a8a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	461a      	mov	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d24d      	bcs.n	8005b34 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005a98:	f3ef 8311 	mrs	r3, BASEPRI
 8005a9c:	f04f 0120 	mov.w	r1, #32
 8005aa0:	f381 8811 	msr	BASEPRI, r1
 8005aa4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d031      	beq.n	8005b10 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005aac:	6979      	ldr	r1, [r7, #20]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	440b      	add	r3, r1
 8005aba:	3360      	adds	r3, #96	@ 0x60
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ac0:	6979      	ldr	r1, [r7, #20]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	440b      	add	r3, r1
 8005ace:	3364      	adds	r3, #100	@ 0x64
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005ad4:	6979      	ldr	r1, [r7, #20]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	440b      	add	r3, r1
 8005ae2:	3368      	adds	r3, #104	@ 0x68
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005ae8:	6979      	ldr	r1, [r7, #20]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	3370      	adds	r3, #112	@ 0x70
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005afc:	6979      	ldr	r1, [r7, #20]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4613      	mov	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	4413      	add	r3, r2
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	440b      	add	r3, r1
 8005b0a:	336c      	adds	r3, #108	@ 0x6c
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	440b      	add	r3, r1
 8005b1e:	3374      	adds	r3, #116	@ 0x74
 8005b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b22:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b24:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	e002      	b.n	8005b3a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b38:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20012ee8 	.word	0x20012ee8

08005b48 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b58:	e002      	b.n	8005b60 <_EncodeStr+0x18>
    Len++;
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4413      	add	r3, r2
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f6      	bne.n	8005b5a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d901      	bls.n	8005b78 <_EncodeStr+0x30>
    Len = Limit;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b7c:	d806      	bhi.n	8005b8c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	60fa      	str	r2, [r7, #12]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e011      	b.n	8005bb0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	60fa      	str	r2, [r7, #12]
 8005b92:	22ff      	movs	r2, #255	@ 0xff
 8005b94:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	60fa      	str	r2, [r7, #12]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	0a19      	lsrs	r1, r3, #8
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	60fa      	str	r2, [r7, #12]
 8005bac:	b2ca      	uxtb	r2, r1
 8005bae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bb4:	e00a      	b.n	8005bcc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	1c53      	adds	r3, r2, #1
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1c59      	adds	r1, r3, #1
 8005bc0:	60f9      	str	r1, [r7, #12]
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
    n++;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d3f0      	bcc.n	8005bb6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3304      	adds	r3, #4
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c02:	4b35      	ldr	r3, [pc, #212]	@ (8005cd8 <_HandleIncomingPacket+0xdc>)
 8005c04:	7e1b      	ldrb	r3, [r3, #24]
 8005c06:	4618      	mov	r0, r3
 8005c08:	1cfb      	adds	r3, r7, #3
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	f7ff fdab 	bl	8005768 <SEGGER_RTT_ReadNoLock>
 8005c12:	4603      	mov	r3, r0
 8005c14:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dd59      	ble.n	8005cd0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	2b80      	cmp	r3, #128	@ 0x80
 8005c20:	d032      	beq.n	8005c88 <_HandleIncomingPacket+0x8c>
 8005c22:	2b80      	cmp	r3, #128	@ 0x80
 8005c24:	dc42      	bgt.n	8005cac <_HandleIncomingPacket+0xb0>
 8005c26:	2b07      	cmp	r3, #7
 8005c28:	dc16      	bgt.n	8005c58 <_HandleIncomingPacket+0x5c>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dd3e      	ble.n	8005cac <_HandleIncomingPacket+0xb0>
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	d83b      	bhi.n	8005cac <_HandleIncomingPacket+0xb0>
 8005c34:	a201      	add	r2, pc, #4	@ (adr r2, 8005c3c <_HandleIncomingPacket+0x40>)
 8005c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3a:	bf00      	nop
 8005c3c:	08005c5f 	.word	0x08005c5f
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08005c6b 	.word	0x08005c6b
 8005c48:	08005c71 	.word	0x08005c71
 8005c4c:	08005c77 	.word	0x08005c77
 8005c50:	08005c7d 	.word	0x08005c7d
 8005c54:	08005c83 	.word	0x08005c83
 8005c58:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c5a:	d034      	beq.n	8005cc6 <_HandleIncomingPacket+0xca>
 8005c5c:	e026      	b.n	8005cac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c5e:	f000 ff43 	bl	8006ae8 <SEGGER_SYSVIEW_Start>
      break;
 8005c62:	e035      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c64:	f000 fffc 	bl	8006c60 <SEGGER_SYSVIEW_Stop>
      break;
 8005c68:	e032      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c6a:	f001 f9d5 	bl	8007018 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c6e:	e02f      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c70:	f001 f99a 	bl	8006fa8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c74:	e02c      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c76:	f001 f819 	bl	8006cac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c7a:	e029      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c7c:	f001 fc08 	bl	8007490 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c80:	e026      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c82:	f001 fbe7 	bl	8007454 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c86:	e023      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c88:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <_HandleIncomingPacket+0xdc>)
 8005c8a:	7e1b      	ldrb	r3, [r3, #24]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	1cfb      	adds	r3, r7, #3
 8005c90:	2201      	movs	r2, #1
 8005c92:	4619      	mov	r1, r3
 8005c94:	f7ff fd68 	bl	8005768 <SEGGER_RTT_ReadNoLock>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	dd13      	ble.n	8005cca <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fb55 	bl	8007354 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005caa:	e00e      	b.n	8005cca <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	da0c      	bge.n	8005cce <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cb4:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <_HandleIncomingPacket+0xdc>)
 8005cb6:	7e1b      	ldrb	r3, [r3, #24]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	1cfb      	adds	r3, r7, #3
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f7ff fd52 	bl	8005768 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005cc4:	e003      	b.n	8005cce <_HandleIncomingPacket+0xd2>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e002      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <_HandleIncomingPacket+0xd4>
      break;
 8005cce:	bf00      	nop
    }
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	200143a8 	.word	0x200143a8

08005cdc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08c      	sub	sp, #48	@ 0x30
 8005ce0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	3301      	adds	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cf0:	4b32      	ldr	r3, [pc, #200]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf6:	e00b      	b.n	8005d10 <_TrySendOverflowPacket+0x34>
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfe:	1c59      	adds	r1, r3, #1
 8005d00:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0c:	09db      	lsrs	r3, r3, #7
 8005d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d14:	d8f0      	bhi.n	8005cf8 <_TrySendOverflowPacket+0x1c>
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d26:	4b26      	ldr	r3, [pc, #152]	@ (8005dc0 <_TrySendOverflowPacket+0xe4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d2c:	4b23      	ldr	r3, [pc, #140]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	623b      	str	r3, [r7, #32]
 8005d3e:	e00b      	b.n	8005d58 <_TrySendOverflowPacket+0x7c>
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	09db      	lsrs	r3, r3, #7
 8005d56:	623b      	str	r3, [r7, #32]
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d5c:	d8f0      	bhi.n	8005d40 <_TrySendOverflowPacket+0x64>
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d64:	6a3a      	ldr	r2, [r7, #32]
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d6e:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005d70:	785b      	ldrb	r3, [r3, #1]
 8005d72:	4618      	mov	r0, r3
 8005d74:	1d3b      	adds	r3, r7, #4
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	1d3b      	adds	r3, r7, #4
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f7fa fa2e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d84:	4603      	mov	r3, r0
 8005d86:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005d88:	f7ff fabe 	bl	8005308 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d92:	4a0a      	ldr	r2, [pc, #40]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d98:	4b08      	ldr	r3, [pc, #32]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b06      	ldr	r3, [pc, #24]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	e004      	b.n	8005db0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005da6:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a03      	ldr	r2, [pc, #12]	@ (8005dbc <_TrySendOverflowPacket+0xe0>)
 8005dae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005db0:	693b      	ldr	r3, [r7, #16]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3730      	adds	r7, #48	@ 0x30
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200143a8 	.word	0x200143a8
 8005dc0:	e0001004 	.word	0xe0001004

08005dc4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	@ 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005dd0:	4b6d      	ldr	r3, [pc, #436]	@ (8005f88 <_SendPacket+0x1c4>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d010      	beq.n	8005dfa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8005f88 <_SendPacket+0x1c4>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80a5 	beq.w	8005f2c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005de2:	4b69      	ldr	r3, [pc, #420]	@ (8005f88 <_SendPacket+0x1c4>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d109      	bne.n	8005dfe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005dea:	f7ff ff77 	bl	8005cdc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005dee:	4b66      	ldr	r3, [pc, #408]	@ (8005f88 <_SendPacket+0x1c4>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	f040 809c 	bne.w	8005f30 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005df8:	e001      	b.n	8005dfe <_SendPacket+0x3a>
    goto Send;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <_SendPacket+0x3c>
Send:
 8005dfe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b1f      	cmp	r3, #31
 8005e04:	d809      	bhi.n	8005e1a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e06:	4b60      	ldr	r3, [pc, #384]	@ (8005f88 <_SendPacket+0x1c4>)
 8005e08:	69da      	ldr	r2, [r3, #28]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 808d 	bne.w	8005f34 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b17      	cmp	r3, #23
 8005e1e:	d807      	bhi.n	8005e30 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e03d      	b.n	8005eac <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e3c:	d912      	bls.n	8005e64 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	09da      	lsrs	r2, r3, #7
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	3a01      	subs	r2, #1
 8005e56:	60fa      	str	r2, [r7, #12]
 8005e58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e006      	b.n	8005e72 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e76:	d912      	bls.n	8005e9e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	09da      	lsrs	r2, r3, #7
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	60fa      	str	r2, [r7, #12]
 8005e92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e006      	b.n	8005eac <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005eac:	4b37      	ldr	r3, [pc, #220]	@ (8005f8c <_SendPacket+0x1c8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005eb2:	4b35      	ldr	r3, [pc, #212]	@ (8005f88 <_SendPacket+0x1c4>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	623b      	str	r3, [r7, #32]
 8005ec4:	e00b      	b.n	8005ede <_SendPacket+0x11a>
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	1c59      	adds	r1, r3, #1
 8005ece:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ed0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	09db      	lsrs	r3, r3, #7
 8005edc:	623b      	str	r3, [r7, #32]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ee2:	d8f0      	bhi.n	8005ec6 <_SendPacket+0x102>
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005eea:	6a3a      	ldr	r2, [r7, #32]
 8005eec:	b2d2      	uxtb	r2, r2
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005ef4:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <_SendPacket+0x1c4>)
 8005ef6:	785b      	ldrb	r3, [r3, #1]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	f7fa f96c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f0c:	f7ff f9fc 	bl	8005308 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f16:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	60d3      	str	r3, [r2, #12]
 8005f1c:	e00b      	b.n	8005f36 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	4b18      	ldr	r3, [pc, #96]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e004      	b.n	8005f36 <_SendPacket+0x172>
    goto SendDone;
 8005f2c:	bf00      	nop
 8005f2e:	e002      	b.n	8005f36 <_SendPacket+0x172>
      goto SendDone;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <_SendPacket+0x172>
      goto SendDone;
 8005f34:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f36:	4b14      	ldr	r3, [pc, #80]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f38:	7e1b      	ldrb	r3, [r3, #24]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4a14      	ldr	r2, [pc, #80]	@ (8005f90 <_SendPacket+0x1cc>)
 8005f3e:	460b      	mov	r3, r1
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	440b      	add	r3, r1
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	336c      	adds	r3, #108	@ 0x6c
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f4e:	7e1b      	ldrb	r3, [r3, #24]
 8005f50:	4618      	mov	r0, r3
 8005f52:	490f      	ldr	r1, [pc, #60]	@ (8005f90 <_SendPacket+0x1cc>)
 8005f54:	4603      	mov	r3, r0
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4403      	add	r3, r0
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3370      	adds	r3, #112	@ 0x70
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d00b      	beq.n	8005f7e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f66:	4b08      	ldr	r3, [pc, #32]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f68:	789b      	ldrb	r3, [r3, #2]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f74:	f7ff fe42 	bl	8005bfc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f78:	4b03      	ldr	r3, [pc, #12]	@ (8005f88 <_SendPacket+0x1c4>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f7e:	bf00      	nop
 8005f80:	3728      	adds	r7, #40	@ 0x28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	200143a8 	.word	0x200143a8
 8005f8c:	e0001004 	.word	0xe0001004
 8005f90:	20012ee8 	.word	0x20012ee8

08005f94 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	@ 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	2b80      	cmp	r3, #128	@ 0x80
 8005fac:	d80a      	bhi.n	8005fc4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6051      	str	r1, [r2, #4]
 8005fb8:	78fa      	ldrb	r2, [r7, #3]
 8005fba:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	2b80      	cmp	r3, #128	@ 0x80
 8005fca:	d15a      	bne.n	8006082 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	623b      	str	r3, [r7, #32]
 8005fec:	e00b      	b.n	8006006 <_StoreChar+0x72>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	1c59      	adds	r1, r3, #1
 8005ff6:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ff8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	09db      	lsrs	r3, r3, #7
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	2b7f      	cmp	r3, #127	@ 0x7f
 800600a:	d8f0      	bhi.n	8005fee <_StoreChar+0x5a>
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	627a      	str	r2, [r7, #36]	@ 0x24
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	2300      	movs	r3, #0
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e00b      	b.n	800603e <_StoreChar+0xaa>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	b2da      	uxtb	r2, r3
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	61f9      	str	r1, [r7, #28]
 8006030:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b7f      	cmp	r3, #127	@ 0x7f
 8006042:	d8f0      	bhi.n	8006026 <_StoreChar+0x92>
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	221a      	movs	r2, #26
 800605a:	6939      	ldr	r1, [r7, #16]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff feb1 	bl	8005dc4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fdbb 	bl	8005be2 <_PreparePacket>
 800606c:	4602      	mov	r2, r0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	611a      	str	r2, [r3, #16]
  }
}
 8006082:	bf00      	nop
 8006084:	3728      	adds	r7, #40	@ 0x28
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	@ 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800609e:	2301      	movs	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80060a2:	2301      	movs	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060a6:	e007      	b.n	80060b8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	623b      	str	r3, [r7, #32]
    Width++;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	3301      	adds	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060b8:	6a3a      	ldr	r2, [r7, #32]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d2f3      	bcs.n	80060a8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d901      	bls.n	80060cc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d000      	beq.n	80060d8 <_PrintUnsigned+0x4c>
 80060d6:	e01f      	b.n	8006118 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01c      	beq.n	8006118 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80060de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <_PrintUnsigned+0x68>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <_PrintUnsigned+0x68>
        c = '0';
 80060ee:	2330      	movs	r3, #48	@ 0x30
 80060f0:	76fb      	strb	r3, [r7, #27]
 80060f2:	e001      	b.n	80060f8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80060f4:	2320      	movs	r3, #32
 80060f6:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060f8:	e007      	b.n	800610a <_PrintUnsigned+0x7e>
        FieldWidth--;
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	3b01      	subs	r3, #1
 80060fe:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006100:	7efb      	ldrb	r3, [r7, #27]
 8006102:	4619      	mov	r1, r3
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff45 	bl	8005f94 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <_PrintUnsigned+0x8c>
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	429a      	cmp	r2, r3
 8006116:	d3f0      	bcc.n	80060fa <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d903      	bls.n	8006126 <_PrintUnsigned+0x9a>
      NumDigits--;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	e009      	b.n	800613a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	fbb2 f3f3 	udiv	r3, r2, r3
 800612e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	d200      	bcs.n	800613a <_PrintUnsigned+0xae>
        break;
 8006138:	e005      	b.n	8006146 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006144:	e7e8      	b.n	8006118 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006154:	fb02 f303 	mul.w	r3, r2, r3
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800615e:	4a15      	ldr	r2, [pc, #84]	@ (80061b4 <_PrintUnsigned+0x128>)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff13 	bl	8005f94 <_StoreChar>
    Digit /= Base;
 800616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e3      	bne.n	8006146 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d011      	beq.n	80061ac <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800618e:	e006      	b.n	800619e <_PrintUnsigned+0x112>
        FieldWidth--;
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	3b01      	subs	r3, #1
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8006196:	2120      	movs	r1, #32
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fefb 	bl	8005f94 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <_PrintUnsigned+0x120>
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d3f1      	bcc.n	8006190 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80061ac:	bf00      	nop
 80061ae:	3728      	adds	r7, #40	@ 0x28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	08007958 	.word	0x08007958

080061b8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfb8      	it	lt
 80061cc:	425b      	neglt	r3, r3
 80061ce:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061d4:	e007      	b.n	80061e6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	fb92 f3f3 	sdiv	r3, r2, r3
 80061de:	613b      	str	r3, [r7, #16]
    Width++;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3301      	adds	r3, #1
 80061e4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	daf3      	bge.n	80061d6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d901      	bls.n	80061fa <_PrintInt+0x42>
    Width = NumDigits;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <_PrintInt+0x5e>
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b00      	cmp	r3, #0
 8006204:	db04      	blt.n	8006210 <_PrintInt+0x58>
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <_PrintInt+0x5e>
    FieldWidth--;
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	3b01      	subs	r3, #1
 8006214:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <_PrintInt+0x6e>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <_PrintInt+0x9c>
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d111      	bne.n	8006254 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00e      	beq.n	8006254 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006236:	e006      	b.n	8006246 <_PrintInt+0x8e>
        FieldWidth--;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	3b01      	subs	r3, #1
 800623c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800623e:	2120      	movs	r1, #32
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fea7 	bl	8005f94 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <_PrintInt+0x9c>
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	429a      	cmp	r2, r3
 8006252:	d3f1      	bcc.n	8006238 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	da07      	bge.n	800626a <_PrintInt+0xb2>
    v = -v;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	425b      	negs	r3, r3
 800625e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006260:	212d      	movs	r1, #45	@ 0x2d
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fe96 	bl	8005f94 <_StoreChar>
 8006268:	e008      	b.n	800627c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006274:	212b      	movs	r1, #43	@ 0x2b
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fe8c 	bl	8005f94 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d019      	beq.n	80062ba <_PrintInt+0x102>
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d114      	bne.n	80062ba <_PrintInt+0x102>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d111      	bne.n	80062ba <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00e      	beq.n	80062ba <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800629c:	e006      	b.n	80062ac <_PrintInt+0xf4>
        FieldWidth--;
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80062a4:	2130      	movs	r1, #48	@ 0x30
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fe74 	bl	8005f94 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <_PrintInt+0x102>
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d3f1      	bcc.n	800629e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f7ff fedf 	bl	800608c <_PrintUnsigned>
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b098      	sub	sp, #96	@ 0x60
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062e4:	f3ef 8311 	mrs	r3, BASEPRI
 80062e8:	f04f 0120 	mov.w	r1, #32
 80062ec:	f381 8811 	msr	BASEPRI, r1
 80062f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062f2:	48b7      	ldr	r0, [pc, #732]	@ (80065d0 <_VPrintTarget+0x2f8>)
 80062f4:	f7ff fc75 	bl	8005be2 <_PreparePacket>
 80062f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80062fa:	4bb5      	ldr	r3, [pc, #724]	@ (80065d0 <_VPrintTarget+0x2f8>)
 80062fc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800631e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8183 	beq.w	800662e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006328:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800632c:	2b25      	cmp	r3, #37	@ 0x25
 800632e:	f040 8170 	bne.w	8006612 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006332:	2300      	movs	r3, #0
 8006334:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006336:	2301      	movs	r3, #1
 8006338:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006342:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006346:	3b23      	subs	r3, #35	@ 0x23
 8006348:	2b0d      	cmp	r3, #13
 800634a:	d83f      	bhi.n	80063cc <_VPrintTarget+0xf4>
 800634c:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <_VPrintTarget+0x7c>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	080063bd 	.word	0x080063bd
 8006358:	080063cd 	.word	0x080063cd
 800635c:	080063cd 	.word	0x080063cd
 8006360:	080063cd 	.word	0x080063cd
 8006364:	080063cd 	.word	0x080063cd
 8006368:	080063cd 	.word	0x080063cd
 800636c:	080063cd 	.word	0x080063cd
 8006370:	080063cd 	.word	0x080063cd
 8006374:	080063ad 	.word	0x080063ad
 8006378:	080063cd 	.word	0x080063cd
 800637c:	0800638d 	.word	0x0800638d
 8006380:	080063cd 	.word	0x080063cd
 8006384:	080063cd 	.word	0x080063cd
 8006388:	0800639d 	.word	0x0800639d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800638c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e01a      	b.n	80063d2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800639c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800639e:	f043 0302 	orr.w	r3, r3, #2
 80063a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e012      	b.n	80063d2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80063ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ae:	f043 0304 	orr.w	r3, r3, #4
 80063b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e00a      	b.n	80063d2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80063bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063be:	f043 0308 	orr.w	r3, r3, #8
 80063c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e002      	b.n	80063d2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80063cc:	2300      	movs	r3, #0
 80063ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80063d0:	bf00      	nop
        }
      } while (v);
 80063d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1b0      	bne.n	800633a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80063d8:	2300      	movs	r3, #0
 80063da:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80063e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80063ea:	d912      	bls.n	8006412 <_VPrintTarget+0x13a>
 80063ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063f0:	2b39      	cmp	r3, #57	@ 0x39
 80063f2:	d80e      	bhi.n	8006412 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80063fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	461a      	mov	r2, r3
 8006406:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800640a:	4413      	add	r3, r2
 800640c:	3b30      	subs	r3, #48	@ 0x30
 800640e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006410:	e7e4      	b.n	80063dc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006412:	2300      	movs	r3, #0
 8006414:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800641e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006422:	2b2e      	cmp	r3, #46	@ 0x2e
 8006424:	d11d      	bne.n	8006462 <_VPrintTarget+0x18a>
        sFormat++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3301      	adds	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006438:	2b2f      	cmp	r3, #47	@ 0x2f
 800643a:	d912      	bls.n	8006462 <_VPrintTarget+0x18a>
 800643c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006440:	2b39      	cmp	r3, #57	@ 0x39
 8006442:	d80e      	bhi.n	8006462 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800644a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	461a      	mov	r2, r3
 8006456:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800645a:	4413      	add	r3, r2
 800645c:	3b30      	subs	r3, #48	@ 0x30
 800645e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006460:	e7e4      	b.n	800642c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800646a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800646e:	2b6c      	cmp	r3, #108	@ 0x6c
 8006470:	d003      	beq.n	800647a <_VPrintTarget+0x1a2>
 8006472:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006476:	2b68      	cmp	r3, #104	@ 0x68
 8006478:	d107      	bne.n	800648a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3301      	adds	r3, #1
 8006486:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006488:	e7ef      	b.n	800646a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800648a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800648e:	2b25      	cmp	r3, #37	@ 0x25
 8006490:	f000 80b3 	beq.w	80065fa <_VPrintTarget+0x322>
 8006494:	2b25      	cmp	r3, #37	@ 0x25
 8006496:	f2c0 80b7 	blt.w	8006608 <_VPrintTarget+0x330>
 800649a:	2b78      	cmp	r3, #120	@ 0x78
 800649c:	f300 80b4 	bgt.w	8006608 <_VPrintTarget+0x330>
 80064a0:	2b58      	cmp	r3, #88	@ 0x58
 80064a2:	f2c0 80b1 	blt.w	8006608 <_VPrintTarget+0x330>
 80064a6:	3b58      	subs	r3, #88	@ 0x58
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	f200 80ad 	bhi.w	8006608 <_VPrintTarget+0x330>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <_VPrintTarget+0x1dc>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080065ab 	.word	0x080065ab
 80064b8:	08006609 	.word	0x08006609
 80064bc:	08006609 	.word	0x08006609
 80064c0:	08006609 	.word	0x08006609
 80064c4:	08006609 	.word	0x08006609
 80064c8:	08006609 	.word	0x08006609
 80064cc:	08006609 	.word	0x08006609
 80064d0:	08006609 	.word	0x08006609
 80064d4:	08006609 	.word	0x08006609
 80064d8:	08006609 	.word	0x08006609
 80064dc:	08006609 	.word	0x08006609
 80064e0:	08006539 	.word	0x08006539
 80064e4:	0800655f 	.word	0x0800655f
 80064e8:	08006609 	.word	0x08006609
 80064ec:	08006609 	.word	0x08006609
 80064f0:	08006609 	.word	0x08006609
 80064f4:	08006609 	.word	0x08006609
 80064f8:	08006609 	.word	0x08006609
 80064fc:	08006609 	.word	0x08006609
 8006500:	08006609 	.word	0x08006609
 8006504:	08006609 	.word	0x08006609
 8006508:	08006609 	.word	0x08006609
 800650c:	08006609 	.word	0x08006609
 8006510:	08006609 	.word	0x08006609
 8006514:	080065d5 	.word	0x080065d5
 8006518:	08006609 	.word	0x08006609
 800651c:	08006609 	.word	0x08006609
 8006520:	08006609 	.word	0x08006609
 8006524:	08006609 	.word	0x08006609
 8006528:	08006585 	.word	0x08006585
 800652c:	08006609 	.word	0x08006609
 8006530:	08006609 	.word	0x08006609
 8006534:	080065ab 	.word	0x080065ab
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6011      	str	r1, [r2, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006548:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 800654c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006550:	f107 0314 	add.w	r3, r7, #20
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fd1c 	bl	8005f94 <_StoreChar>
        break;
 800655c:	e055      	b.n	800660a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	1d19      	adds	r1, r3, #4
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6011      	str	r1, [r2, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800656c:	f107 0014 	add.w	r0, r7, #20
 8006570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006572:	9301      	str	r3, [sp, #4]
 8006574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657a:	220a      	movs	r2, #10
 800657c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800657e:	f7ff fe1b 	bl	80061b8 <_PrintInt>
        break;
 8006582:	e042      	b.n	800660a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	1d19      	adds	r1, r3, #4
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6011      	str	r1, [r2, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006592:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006594:	f107 0014 	add.w	r0, r7, #20
 8006598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a2:	220a      	movs	r2, #10
 80065a4:	f7ff fd72 	bl	800608c <_PrintUnsigned>
        break;
 80065a8:	e02f      	b.n	800660a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	1d19      	adds	r1, r3, #4
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6011      	str	r1, [r2, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80065b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065ba:	f107 0014 	add.w	r0, r7, #20
 80065be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c8:	2210      	movs	r2, #16
 80065ca:	f7ff fd5f 	bl	800608c <_PrintUnsigned>
        break;
 80065ce:	e01c      	b.n	800660a <_VPrintTarget+0x332>
 80065d0:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	1d19      	adds	r1, r3, #4
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065e4:	f107 0014 	add.w	r0, r7, #20
 80065e8:	2300      	movs	r3, #0
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	2308      	movs	r3, #8
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	2308      	movs	r3, #8
 80065f2:	2210      	movs	r2, #16
 80065f4:	f7ff fd4a 	bl	800608c <_PrintUnsigned>
        break;
 80065f8:	e007      	b.n	800660a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80065fa:	f107 0314 	add.w	r3, r7, #20
 80065fe:	2125      	movs	r1, #37	@ 0x25
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fcc7 	bl	8005f94 <_StoreChar>
        break;
 8006606:	e000      	b.n	800660a <_VPrintTarget+0x332>
      default:
        break;
 8006608:	bf00      	nop
      }
      sFormat++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e007      	b.n	8006622 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006612:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006616:	f107 0314 	add.w	r3, r7, #20
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fcb9 	bl	8005f94 <_StoreChar>
    }
  } while (*sFormat);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f47f ae72 	bne.w	8006310 <_VPrintTarget+0x38>
 800662c:	e000      	b.n	8006630 <_VPrintTarget+0x358>
      break;
 800662e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d041      	beq.n	80066ba <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	643b      	str	r3, [r7, #64]	@ 0x40
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006646:	e00b      	b.n	8006660 <_VPrintTarget+0x388>
 8006648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800664a:	b2da      	uxtb	r2, r3
 800664c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664e:	1c59      	adds	r1, r3, #1
 8006650:	6439      	str	r1, [r7, #64]	@ 0x40
 8006652:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665c:	09db      	lsrs	r3, r3, #7
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006662:	2b7f      	cmp	r3, #127	@ 0x7f
 8006664:	d8f0      	bhi.n	8006648 <_VPrintTarget+0x370>
 8006666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	643a      	str	r2, [r7, #64]	@ 0x40
 800666c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006674:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800667a:	2300      	movs	r3, #0
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
 800667e:	e00b      	b.n	8006698 <_VPrintTarget+0x3c0>
 8006680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006682:	b2da      	uxtb	r2, r3
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	63b9      	str	r1, [r7, #56]	@ 0x38
 800668a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006694:	09db      	lsrs	r3, r3, #7
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
 8006698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669a:	2b7f      	cmp	r3, #127	@ 0x7f
 800669c:	d8f0      	bhi.n	8006680 <_VPrintTarget+0x3a8>
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80066a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	69b9      	ldr	r1, [r7, #24]
 80066b2:	221a      	movs	r2, #26
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff fb85 	bl	8005dc4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80066c0:	bf00      	nop
 80066c2:	3758      	adds	r7, #88	@ 0x58
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af02      	add	r7, sp, #8
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066d6:	2300      	movs	r3, #0
 80066d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80066dc:	4917      	ldr	r1, [pc, #92]	@ (800673c <SEGGER_SYSVIEW_Init+0x74>)
 80066de:	4818      	ldr	r0, [pc, #96]	@ (8006740 <SEGGER_SYSVIEW_Init+0x78>)
 80066e0:	f7ff f93e 	bl	8005960 <SEGGER_RTT_AllocUpBuffer>
 80066e4:	4603      	mov	r3, r0
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b16      	ldr	r3, [pc, #88]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066ec:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ee:	785a      	ldrb	r2, [r3, #1]
 80066f0:	4b14      	ldr	r3, [pc, #80]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 80066f2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066f4:	4b13      	ldr	r3, [pc, #76]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 80066f6:	7e1b      	ldrb	r3, [r3, #24]
 80066f8:	4618      	mov	r0, r3
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	2308      	movs	r3, #8
 8006700:	4a11      	ldr	r2, [pc, #68]	@ (8006748 <SEGGER_SYSVIEW_Init+0x80>)
 8006702:	490f      	ldr	r1, [pc, #60]	@ (8006740 <SEGGER_SYSVIEW_Init+0x78>)
 8006704:	f7ff f9b0 	bl	8005a68 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 800670a:	2200      	movs	r2, #0
 800670c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800670e:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <SEGGER_SYSVIEW_Init+0x84>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a0c      	ldr	r2, [pc, #48]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 8006714:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006716:	4a0b      	ldr	r2, [pc, #44]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800671c:	4a09      	ldr	r2, [pc, #36]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006722:	4a08      	ldr	r2, [pc, #32]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006728:	4a06      	ldr	r2, [pc, #24]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800672e:	4b05      	ldr	r3, [pc, #20]	@ (8006744 <SEGGER_SYSVIEW_Init+0x7c>)
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	200133a0 	.word	0x200133a0
 8006740:	080078dc 	.word	0x080078dc
 8006744:	200143a8 	.word	0x200143a8
 8006748:	200143a0 	.word	0x200143a0
 800674c:	e0001004 	.word	0xe0001004

08006750 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006758:	4a04      	ldr	r2, [pc, #16]	@ (800676c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6113      	str	r3, [r2, #16]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	200143a8 	.word	0x200143a8

08006770 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006778:	f3ef 8311 	mrs	r3, BASEPRI
 800677c:	f04f 0120 	mov.w	r1, #32
 8006780:	f381 8811 	msr	BASEPRI, r1
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	4808      	ldr	r0, [pc, #32]	@ (80067a8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006788:	f7ff fa2b 	bl	8005be2 <_PreparePacket>
 800678c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	68b9      	ldr	r1, [r7, #8]
 8006792:	68b8      	ldr	r0, [r7, #8]
 8006794:	f7ff fb16 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f383 8811 	msr	BASEPRI, r3
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200143d8 	.word	0x200143d8

080067ac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067b6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ba:	f04f 0120 	mov.w	r1, #32
 80067be:	f381 8811 	msr	BASEPRI, r1
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	4816      	ldr	r0, [pc, #88]	@ (8006820 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067c6:	f7ff fa0c 	bl	8005be2 <_PreparePacket>
 80067ca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e00b      	b.n	80067f2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	1c59      	adds	r1, r3, #1
 80067e2:	61f9      	str	r1, [r7, #28]
 80067e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067e8:	b2d2      	uxtb	r2, r2
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	09db      	lsrs	r3, r3, #7
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067f6:	d8f0      	bhi.n	80067da <SEGGER_SYSVIEW_RecordU32+0x2e>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	61fa      	str	r2, [r7, #28]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6938      	ldr	r0, [r7, #16]
 800680e:	f7ff fad9 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f383 8811 	msr	BASEPRI, r3
}
 8006818:	bf00      	nop
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200143d8 	.word	0x200143d8

08006824 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b08c      	sub	sp, #48	@ 0x30
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006830:	f3ef 8311 	mrs	r3, BASEPRI
 8006834:	f04f 0120 	mov.w	r1, #32
 8006838:	f381 8811 	msr	BASEPRI, r1
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	4825      	ldr	r0, [pc, #148]	@ (80068d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006840:	f7ff f9cf 	bl	8005be2 <_PreparePacket>
 8006844:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006852:	e00b      	b.n	800686c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	b2da      	uxtb	r2, r3
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800685e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	09db      	lsrs	r3, r3, #7
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006870:	d8f0      	bhi.n	8006854 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	e00b      	b.n	80068a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	1c59      	adds	r1, r3, #1
 8006894:	6279      	str	r1, [r7, #36]	@ 0x24
 8006896:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	09db      	lsrs	r3, r3, #7
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068a8:	d8f0      	bhi.n	800688c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	6979      	ldr	r1, [r7, #20]
 80068be:	69b8      	ldr	r0, [r7, #24]
 80068c0:	f7ff fa80 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f383 8811 	msr	BASEPRI, r3
}
 80068ca:	bf00      	nop
 80068cc:	3730      	adds	r7, #48	@ 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	200143d8 	.word	0x200143d8

080068d8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08e      	sub	sp, #56	@ 0x38
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80068e6:	f3ef 8311 	mrs	r3, BASEPRI
 80068ea:	f04f 0120 	mov.w	r1, #32
 80068ee:	f381 8811 	msr	BASEPRI, r1
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	4832      	ldr	r0, [pc, #200]	@ (80069c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80068f6:	f7ff f974 	bl	8005be2 <_PreparePacket>
 80068fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	633b      	str	r3, [r7, #48]	@ 0x30
 8006908:	e00b      	b.n	8006922 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006910:	1c59      	adds	r1, r3, #1
 8006912:	6379      	str	r1, [r7, #52]	@ 0x34
 8006914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691e:	09db      	lsrs	r3, r3, #7
 8006920:	633b      	str	r3, [r7, #48]	@ 0x30
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	2b7f      	cmp	r3, #127	@ 0x7f
 8006926:	d8f0      	bhi.n	800690a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	637a      	str	r2, [r7, #52]	@ 0x34
 800692e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006940:	e00b      	b.n	800695a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	b2da      	uxtb	r2, r3
 8006946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006948:	1c59      	adds	r1, r3, #1
 800694a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800694c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006956:	09db      	lsrs	r3, r3, #7
 8006958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	2b7f      	cmp	r3, #127	@ 0x7f
 800695e:	d8f0      	bhi.n	8006942 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	e00b      	b.n	8006992 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	b2da      	uxtb	r2, r3
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	1c59      	adds	r1, r3, #1
 8006982:	6279      	str	r1, [r7, #36]	@ 0x24
 8006984:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	09db      	lsrs	r3, r3, #7
 8006990:	623b      	str	r3, [r7, #32]
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	2b7f      	cmp	r3, #127	@ 0x7f
 8006996:	d8f0      	bhi.n	800697a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	627a      	str	r2, [r7, #36]	@ 0x24
 800699e:	6a3a      	ldr	r2, [r7, #32]
 80069a0:	b2d2      	uxtb	r2, r2
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	6979      	ldr	r1, [r7, #20]
 80069ac:	69b8      	ldr	r0, [r7, #24]
 80069ae:	f7ff fa09 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f383 8811 	msr	BASEPRI, r3
}
 80069b8:	bf00      	nop
 80069ba:	3738      	adds	r7, #56	@ 0x38
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	200143d8 	.word	0x200143d8

080069c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b090      	sub	sp, #64	@ 0x40
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069d2:	f3ef 8311 	mrs	r3, BASEPRI
 80069d6:	f04f 0120 	mov.w	r1, #32
 80069da:	f381 8811 	msr	BASEPRI, r1
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	4840      	ldr	r0, [pc, #256]	@ (8006ae4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80069e2:	f7ff f8fe 	bl	8005be2 <_PreparePacket>
 80069e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069f4:	e00b      	b.n	8006a0e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	09db      	lsrs	r3, r3, #7
 8006a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a12:	d8f0      	bhi.n	80069f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	6379      	str	r1, [r7, #52]	@ 0x34
 8006a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a64:	e00b      	b.n	8006a7e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	1c59      	adds	r1, r3, #1
 8006a6e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	09db      	lsrs	r3, r3, #7
 8006a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a82:	d8f0      	bhi.n	8006a66 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a9a:	623b      	str	r3, [r7, #32]
 8006a9c:	e00b      	b.n	8006ab6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	1c59      	adds	r1, r3, #1
 8006aa6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aa8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	09db      	lsrs	r3, r3, #7
 8006ab4:	623b      	str	r3, [r7, #32]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aba:	d8f0      	bhi.n	8006a9e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ac2:	6a3a      	ldr	r2, [r7, #32]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	69b8      	ldr	r0, [r7, #24]
 8006ad2:	f7ff f977 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f383 8811 	msr	BASEPRI, r3
}
 8006adc:	bf00      	nop
 8006ade:	3740      	adds	r7, #64	@ 0x40
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	200143d8 	.word	0x200143d8

08006ae8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08c      	sub	sp, #48	@ 0x30
 8006aec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006aee:	4b59      	ldr	r3, [pc, #356]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006af4:	f3ef 8311 	mrs	r3, BASEPRI
 8006af8:	f04f 0120 	mov.w	r1, #32
 8006afc:	f381 8811 	msr	BASEPRI, r1
 8006b00:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b02:	4b54      	ldr	r3, [pc, #336]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	220a      	movs	r2, #10
 8006b08:	4953      	ldr	r1, [pc, #332]	@ (8006c58 <SEGGER_SYSVIEW_Start+0x170>)
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7f9 fb68 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006b16:	f7fe fbf7 	bl	8005308 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b1a:	200a      	movs	r0, #10
 8006b1c:	f7ff fe28 	bl	8006770 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b20:	f3ef 8311 	mrs	r3, BASEPRI
 8006b24:	f04f 0120 	mov.w	r1, #32
 8006b28:	f381 8811 	msr	BASEPRI, r1
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	484b      	ldr	r0, [pc, #300]	@ (8006c5c <SEGGER_SYSVIEW_Start+0x174>)
 8006b30:	f7ff f857 	bl	8005be2 <_PreparePacket>
 8006b34:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b3e:	4b45      	ldr	r3, [pc, #276]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b44:	e00b      	b.n	8006b5e <SEGGER_SYSVIEW_Start+0x76>
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	09db      	lsrs	r3, r3, #7
 8006b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b62:	d8f0      	bhi.n	8006b46 <SEGGER_SYSVIEW_Start+0x5e>
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b78:	4b36      	ldr	r3, [pc, #216]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	e00b      	b.n	8006b98 <SEGGER_SYSVIEW_Start+0xb0>
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9c:	d8f0      	bhi.n	8006b80 <SEGGER_SYSVIEW_Start+0x98>
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	4b28      	ldr	r3, [pc, #160]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	e00b      	b.n	8006bd2 <SEGGER_SYSVIEW_Start+0xea>
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	1c59      	adds	r1, r3, #1
 8006bc2:	61f9      	str	r1, [r7, #28]
 8006bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	09db      	lsrs	r3, r3, #7
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bd6:	d8f0      	bhi.n	8006bba <SEGGER_SYSVIEW_Start+0xd2>
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	61fa      	str	r2, [r7, #28]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	e00b      	b.n	8006c0a <SEGGER_SYSVIEW_Start+0x122>
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	1c59      	adds	r1, r3, #1
 8006bfa:	6179      	str	r1, [r7, #20]
 8006bfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	09db      	lsrs	r3, r3, #7
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c0e:	d8f0      	bhi.n	8006bf2 <SEGGER_SYSVIEW_Start+0x10a>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	617a      	str	r2, [r7, #20]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c20:	2218      	movs	r2, #24
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff f8cd 	bl	8005dc4 <_SendPacket>
      RECORD_END();
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c30:	4b08      	ldr	r3, [pc, #32]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006c38:	4b06      	ldr	r3, [pc, #24]	@ (8006c54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006c3e:	f000 f9eb 	bl	8007018 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006c42:	f000 f9b1 	bl	8006fa8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006c46:	f000 fc23 	bl	8007490 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006c4a:	bf00      	nop
 8006c4c:	3730      	adds	r7, #48	@ 0x30
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	200143a8 	.word	0x200143a8
 8006c58:	0800794c 	.word	0x0800794c
 8006c5c:	200143d8 	.word	0x200143d8

08006c60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c66:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6a:	f04f 0120 	mov.w	r1, #32
 8006c6e:	f381 8811 	msr	BASEPRI, r1
 8006c72:	607b      	str	r3, [r7, #4]
 8006c74:	480b      	ldr	r0, [pc, #44]	@ (8006ca4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006c76:	f7fe ffb4 	bl	8005be2 <_PreparePacket>
 8006c7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c84:	220b      	movs	r2, #11
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6838      	ldr	r0, [r7, #0]
 8006c8a:	f7ff f89b 	bl	8005dc4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c8e:	4b06      	ldr	r3, [pc, #24]	@ (8006ca8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f383 8811 	msr	BASEPRI, r3
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200143d8 	.word	0x200143d8
 8006ca8:	200143a8 	.word	0x200143a8

08006cac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	@ 0x30
 8006cb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb6:	f04f 0120 	mov.w	r1, #32
 8006cba:	f381 8811 	msr	BASEPRI, r1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	4845      	ldr	r0, [pc, #276]	@ (8006dd8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006cc2:	f7fe ff8e 	bl	8005be2 <_PreparePacket>
 8006cc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd0:	4b42      	ldr	r3, [pc, #264]	@ (8006ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd6:	e00b      	b.n	8006cf0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ce2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	09db      	lsrs	r3, r3, #7
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf4:	d8f0      	bhi.n	8006cd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0a:	4b34      	ldr	r3, [pc, #208]	@ (8006ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	623b      	str	r3, [r7, #32]
 8006d10:	e00b      	b.n	8006d2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d2e:	d8f0      	bhi.n	8006d12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	4b25      	ldr	r3, [pc, #148]	@ (8006ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e00b      	b.n	8006d64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1c59      	adds	r1, r3, #1
 8006d54:	61f9      	str	r1, [r7, #28]
 8006d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	09db      	lsrs	r3, r3, #7
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d68:	d8f0      	bhi.n	8006d4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	61fa      	str	r2, [r7, #28]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e00b      	b.n	8006d9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	6179      	str	r1, [r7, #20]
 8006d8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	09db      	lsrs	r3, r3, #7
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006da0:	d8f0      	bhi.n	8006d84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	617a      	str	r2, [r7, #20]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006db2:	2218      	movs	r2, #24
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	68b8      	ldr	r0, [r7, #8]
 8006db8:	f7ff f804 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006dc2:	4b06      	ldr	r3, [pc, #24]	@ (8006ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006dca:	4b04      	ldr	r3, [pc, #16]	@ (8006ddc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dce:	4798      	blx	r3
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3730      	adds	r7, #48	@ 0x30
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200143d8 	.word	0x200143d8
 8006ddc:	200143a8 	.word	0x200143a8

08006de0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b092      	sub	sp, #72	@ 0x48
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006de8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dec:	f04f 0120 	mov.w	r1, #32
 8006df0:	f381 8811 	msr	BASEPRI, r1
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	486a      	ldr	r0, [pc, #424]	@ (8006fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006df8:	f7fe fef3 	bl	8005be2 <_PreparePacket>
 8006dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4b66      	ldr	r3, [pc, #408]	@ (8006fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e12:	e00b      	b.n	8006e2c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	6479      	str	r1, [r7, #68]	@ 0x44
 8006e1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e28:	09db      	lsrs	r3, r3, #7
 8006e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e30:	d8f0      	bhi.n	8006e14 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4c:	e00b      	b.n	8006e66 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e54:	1c59      	adds	r1, r3, #1
 8006e56:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	09db      	lsrs	r3, r3, #7
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e6a:	d8f0      	bhi.n	8006e4e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	4619      	mov	r1, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7fe fe5f 	bl	8005b48 <_EncodeStr>
 8006e8a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e8c:	2209      	movs	r2, #9
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	6938      	ldr	r0, [r7, #16]
 8006e92:	f7fe ff97 	bl	8005dc4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b40      	ldr	r3, [pc, #256]	@ (8006fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eaa:	e00b      	b.n	8006ec4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	6379      	str	r1, [r7, #52]	@ 0x34
 8006eb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec0:	09db      	lsrs	r3, r3, #7
 8006ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec8:	d8f0      	bhi.n	8006eac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ee4:	e00b      	b.n	8006efe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	1c59      	adds	r1, r3, #1
 8006eee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ef0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efa:	09db      	lsrs	r3, r3, #7
 8006efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f02:	d8f0      	bhi.n	8006ee6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	623b      	str	r3, [r7, #32]
 8006f1e:	e00b      	b.n	8006f38 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f26:	1c59      	adds	r1, r3, #1
 8006f28:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	09db      	lsrs	r3, r3, #7
 8006f36:	623b      	str	r3, [r7, #32]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f3c:	d8f0      	bhi.n	8006f20 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f44:	6a3a      	ldr	r2, [r7, #32]
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	61fb      	str	r3, [r7, #28]
 8006f52:	2300      	movs	r3, #0
 8006f54:	61bb      	str	r3, [r7, #24]
 8006f56:	e00b      	b.n	8006f70 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	61f9      	str	r1, [r7, #28]
 8006f62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	09db      	lsrs	r3, r3, #7
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f74:	d8f0      	bhi.n	8006f58 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	61fa      	str	r2, [r7, #28]
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f86:	2215      	movs	r2, #21
 8006f88:	68f9      	ldr	r1, [r7, #12]
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f7fe ff1a 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f383 8811 	msr	BASEPRI, r3
}
 8006f96:	bf00      	nop
 8006f98:	3748      	adds	r7, #72	@ 0x48
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200143d8 	.word	0x200143d8
 8006fa4:	200143a8 	.word	0x200143a8

08006fa8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006fac:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006fb4:	4b05      	ldr	r3, [pc, #20]	@ (8006fcc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006fbe:	4b03      	ldr	r3, [pc, #12]	@ (8006fcc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4798      	blx	r3
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200143a8 	.word	0x200143a8

08006fd0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fdc:	f04f 0120 	mov.w	r1, #32
 8006fe0:	f381 8811 	msr	BASEPRI, r1
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	480b      	ldr	r0, [pc, #44]	@ (8007014 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006fe8:	f7fe fdfb 	bl	8005be2 <_PreparePacket>
 8006fec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fee:	2280      	movs	r2, #128	@ 0x80
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	6938      	ldr	r0, [r7, #16]
 8006ff4:	f7fe fda8 	bl	8005b48 <_EncodeStr>
 8006ff8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ffa:	220e      	movs	r2, #14
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	6938      	ldr	r0, [r7, #16]
 8007000:	f7fe fee0 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f383 8811 	msr	BASEPRI, r3
}
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200143d8 	.word	0x200143d8

08007018 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800701e:	4b15      	ldr	r3, [pc, #84]	@ (8007074 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01a      	beq.n	800705c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007026:	4b13      	ldr	r3, [pc, #76]	@ (8007074 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d015      	beq.n	800705c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007030:	4b10      	ldr	r3, [pc, #64]	@ (8007074 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4798      	blx	r3
 8007038:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800703c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800703e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007042:	f04f 0200 	mov.w	r2, #0
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	000a      	movs	r2, r1
 800704c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800704e:	4613      	mov	r3, r2
 8007050:	461a      	mov	r2, r3
 8007052:	4621      	mov	r1, r4
 8007054:	200d      	movs	r0, #13
 8007056:	f7ff fbe5 	bl	8006824 <SEGGER_SYSVIEW_RecordU32x2>
 800705a:	e006      	b.n	800706a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800705c:	4b06      	ldr	r3, [pc, #24]	@ (8007078 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4619      	mov	r1, r3
 8007062:	200c      	movs	r0, #12
 8007064:	f7ff fba2 	bl	80067ac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bd90      	pop	{r4, r7, pc}
 8007072:	bf00      	nop
 8007074:	200143a8 	.word	0x200143a8
 8007078:	e0001004 	.word	0xe0001004

0800707c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007082:	f3ef 8311 	mrs	r3, BASEPRI
 8007086:	f04f 0120 	mov.w	r1, #32
 800708a:	f381 8811 	msr	BASEPRI, r1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	4819      	ldr	r0, [pc, #100]	@ (80070f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007092:	f7fe fda6 	bl	8005be2 <_PreparePacket>
 8007096:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800709c:	4b17      	ldr	r3, [pc, #92]	@ (80070fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e00b      	b.n	80070c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	6179      	str	r1, [r7, #20]
 80070ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	09db      	lsrs	r3, r3, #7
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80070cc:	d8f0      	bhi.n	80070b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	617a      	str	r2, [r7, #20]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80070de:	2202      	movs	r2, #2
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f7fe fe6e 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f383 8811 	msr	BASEPRI, r3
}
 80070ee:	bf00      	nop
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200143d8 	.word	0x200143d8
 80070fc:	e000ed04 	.word	0xe000ed04

08007100 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007106:	f3ef 8311 	mrs	r3, BASEPRI
 800710a:	f04f 0120 	mov.w	r1, #32
 800710e:	f381 8811 	msr	BASEPRI, r1
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	4807      	ldr	r0, [pc, #28]	@ (8007134 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007116:	f7fe fd64 	bl	8005be2 <_PreparePacket>
 800711a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800711c:	2203      	movs	r2, #3
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6838      	ldr	r0, [r7, #0]
 8007122:	f7fe fe4f 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f383 8811 	msr	BASEPRI, r3
}
 800712c:	bf00      	nop
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	200143d8 	.word	0x200143d8

08007138 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800713e:	f3ef 8311 	mrs	r3, BASEPRI
 8007142:	f04f 0120 	mov.w	r1, #32
 8007146:	f381 8811 	msr	BASEPRI, r1
 800714a:	607b      	str	r3, [r7, #4]
 800714c:	4807      	ldr	r0, [pc, #28]	@ (800716c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800714e:	f7fe fd48 	bl	8005be2 <_PreparePacket>
 8007152:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007154:	2212      	movs	r2, #18
 8007156:	6839      	ldr	r1, [r7, #0]
 8007158:	6838      	ldr	r0, [r7, #0]
 800715a:	f7fe fe33 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f383 8811 	msr	BASEPRI, r3
}
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	200143d8 	.word	0x200143d8

08007170 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007176:	f3ef 8311 	mrs	r3, BASEPRI
 800717a:	f04f 0120 	mov.w	r1, #32
 800717e:	f381 8811 	msr	BASEPRI, r1
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	4807      	ldr	r0, [pc, #28]	@ (80071a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007186:	f7fe fd2c 	bl	8005be2 <_PreparePacket>
 800718a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800718c:	2211      	movs	r2, #17
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6838      	ldr	r0, [r7, #0]
 8007192:	f7fe fe17 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f383 8811 	msr	BASEPRI, r3
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200143d8 	.word	0x200143d8

080071a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071b0:	f3ef 8311 	mrs	r3, BASEPRI
 80071b4:	f04f 0120 	mov.w	r1, #32
 80071b8:	f381 8811 	msr	BASEPRI, r1
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	4819      	ldr	r0, [pc, #100]	@ (8007224 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80071c0:	f7fe fd0f 	bl	8005be2 <_PreparePacket>
 80071c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ca:	4b17      	ldr	r3, [pc, #92]	@ (8007228 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	61fb      	str	r3, [r7, #28]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e00b      	b.n	80071f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	61f9      	str	r1, [r7, #28]
 80071e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	09db      	lsrs	r3, r3, #7
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80071fa:	d8f0      	bhi.n	80071de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	61fa      	str	r2, [r7, #28]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800720c:	2208      	movs	r2, #8
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	6938      	ldr	r0, [r7, #16]
 8007212:	f7fe fdd7 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	200143d8 	.word	0x200143d8
 8007228:	200143a8 	.word	0x200143a8

0800722c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007234:	f3ef 8311 	mrs	r3, BASEPRI
 8007238:	f04f 0120 	mov.w	r1, #32
 800723c:	f381 8811 	msr	BASEPRI, r1
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	4819      	ldr	r0, [pc, #100]	@ (80072a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007244:	f7fe fccd 	bl	8005be2 <_PreparePacket>
 8007248:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800724e:	4b17      	ldr	r3, [pc, #92]	@ (80072ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	e00b      	b.n	800727a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	1c59      	adds	r1, r3, #1
 800726a:	61f9      	str	r1, [r7, #28]
 800726c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	09db      	lsrs	r3, r3, #7
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b7f      	cmp	r3, #127	@ 0x7f
 800727e:	d8f0      	bhi.n	8007262 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	61fa      	str	r2, [r7, #28]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007290:	2204      	movs	r2, #4
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	6938      	ldr	r0, [r7, #16]
 8007296:	f7fe fd95 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f383 8811 	msr	BASEPRI, r3
}
 80072a0:	bf00      	nop
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	200143d8 	.word	0x200143d8
 80072ac:	200143a8 	.word	0x200143a8

080072b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072b8:	f3ef 8311 	mrs	r3, BASEPRI
 80072bc:	f04f 0120 	mov.w	r1, #32
 80072c0:	f381 8811 	msr	BASEPRI, r1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	4819      	ldr	r0, [pc, #100]	@ (800732c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80072c8:	f7fe fc8b 	bl	8005be2 <_PreparePacket>
 80072cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072d2:	4b17      	ldr	r3, [pc, #92]	@ (8007330 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e00b      	b.n	80072fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	1c59      	adds	r1, r3, #1
 80072ee:	61f9      	str	r1, [r7, #28]
 80072f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	09db      	lsrs	r3, r3, #7
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	2b7f      	cmp	r3, #127	@ 0x7f
 8007302:	d8f0      	bhi.n	80072e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	61fa      	str	r2, [r7, #28]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007314:	2206      	movs	r2, #6
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	6938      	ldr	r0, [r7, #16]
 800731a:	f7fe fd53 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f383 8811 	msr	BASEPRI, r3
}
 8007324:	bf00      	nop
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200143d8 	.word	0x200143d8
 8007330:	200143a8 	.word	0x200143a8

08007334 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800733c:	4b04      	ldr	r3, [pc, #16]	@ (8007350 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	1ad3      	subs	r3, r2, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	200143a8 	.word	0x200143a8

08007354 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	@ 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800735e:	4b3b      	ldr	r3, [pc, #236]	@ (800744c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d06d      	beq.n	8007442 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007366:	4b39      	ldr	r3, [pc, #228]	@ (800744c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800736c:	2300      	movs	r3, #0
 800736e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007370:	e008      	b.n	8007384 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	3301      	adds	r3, #1
 8007382:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007388:	429a      	cmp	r2, r3
 800738a:	d3f2      	bcc.n	8007372 <SEGGER_SYSVIEW_SendModule+0x1e>
 800738c:	e000      	b.n	8007390 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800738e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d055      	beq.n	8007442 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007396:	f3ef 8311 	mrs	r3, BASEPRI
 800739a:	f04f 0120 	mov.w	r1, #32
 800739e:	f381 8811 	msr	BASEPRI, r1
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	482a      	ldr	r0, [pc, #168]	@ (8007450 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80073a6:	f7fe fc1c 	bl	8005be2 <_PreparePacket>
 80073aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	623b      	str	r3, [r7, #32]
 80073b8:	e00b      	b.n	80073d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	1c59      	adds	r1, r3, #1
 80073c2:	6279      	str	r1, [r7, #36]	@ 0x24
 80073c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	09db      	lsrs	r3, r3, #7
 80073d0:	623b      	str	r3, [r7, #32]
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80073d6:	d8f0      	bhi.n	80073ba <SEGGER_SYSVIEW_SendModule+0x66>
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073de:	6a3a      	ldr	r2, [r7, #32]
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	701a      	strb	r2, [r3, #0]
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	e00b      	b.n	800740c <SEGGER_SYSVIEW_SendModule+0xb8>
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	1c59      	adds	r1, r3, #1
 80073fc:	61f9      	str	r1, [r7, #28]
 80073fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	09db      	lsrs	r3, r3, #7
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007410:	d8f0      	bhi.n	80073f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	61fa      	str	r2, [r7, #28]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	b2d2      	uxtb	r2, r2
 800741c:	701a      	strb	r2, [r3, #0]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2280      	movs	r2, #128	@ 0x80
 8007428:	4619      	mov	r1, r3
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f7fe fb8c 	bl	8005b48 <_EncodeStr>
 8007430:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007432:	2216      	movs	r2, #22
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	6938      	ldr	r0, [r7, #16]
 8007438:	f7fe fcc4 	bl	8005dc4 <_SendPacket>
      RECORD_END();
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007442:	bf00      	nop
 8007444:	3730      	adds	r7, #48	@ 0x30
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	200143d0 	.word	0x200143d0
 8007450:	200143d8 	.word	0x200143d8

08007454 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800745a:	4b0c      	ldr	r3, [pc, #48]	@ (800748c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00f      	beq.n	8007482 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007462:	4b0a      	ldr	r3, [pc, #40]	@ (800748c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f2      	bne.n	8007468 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200143d0 	.word	0x200143d0

08007490 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007496:	f3ef 8311 	mrs	r3, BASEPRI
 800749a:	f04f 0120 	mov.w	r1, #32
 800749e:	f381 8811 	msr	BASEPRI, r1
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	4817      	ldr	r0, [pc, #92]	@ (8007504 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80074a6:	f7fe fb9c 	bl	8005be2 <_PreparePacket>
 80074aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	613b      	str	r3, [r7, #16]
 80074ba:	e00b      	b.n	80074d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	6179      	str	r1, [r7, #20]
 80074c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	09db      	lsrs	r3, r3, #7
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80074d8:	d8f0      	bhi.n	80074bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	617a      	str	r2, [r7, #20]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80074ea:	221b      	movs	r2, #27
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	68b8      	ldr	r0, [r7, #8]
 80074f0:	f7fe fc68 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f383 8811 	msr	BASEPRI, r3
}
 80074fa:	bf00      	nop
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200143d8 	.word	0x200143d8
 8007508:	200143d4 	.word	0x200143d4

0800750c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800750c:	b40f      	push	{r0, r1, r2, r3}
 800750e:	b580      	push	{r7, lr}
 8007510:	b082      	sub	sp, #8
 8007512:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007514:	f107 0314 	add.w	r3, r7, #20
 8007518:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	461a      	mov	r2, r3
 800751e:	2100      	movs	r1, #0
 8007520:	6938      	ldr	r0, [r7, #16]
 8007522:	f7fe fed9 	bl	80062d8 <_VPrintTarget>
  va_end(ParamList);
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007530:	b004      	add	sp, #16
 8007532:	4770      	bx	lr

08007534 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b08a      	sub	sp, #40	@ 0x28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800753c:	f3ef 8311 	mrs	r3, BASEPRI
 8007540:	f04f 0120 	mov.w	r1, #32
 8007544:	f381 8811 	msr	BASEPRI, r1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	4827      	ldr	r0, [pc, #156]	@ (80075e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800754c:	f7fe fb49 	bl	8005be2 <_PreparePacket>
 8007550:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007552:	2280      	movs	r2, #128	@ 0x80
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	6938      	ldr	r0, [r7, #16]
 8007558:	f7fe faf6 	bl	8005b48 <_EncodeStr>
 800755c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
 8007562:	2301      	movs	r3, #1
 8007564:	623b      	str	r3, [r7, #32]
 8007566:	e00b      	b.n	8007580 <SEGGER_SYSVIEW_Warn+0x4c>
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	6279      	str	r1, [r7, #36]	@ 0x24
 8007572:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	09db      	lsrs	r3, r3, #7
 800757e:	623b      	str	r3, [r7, #32]
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	2b7f      	cmp	r3, #127	@ 0x7f
 8007584:	d8f0      	bhi.n	8007568 <SEGGER_SYSVIEW_Warn+0x34>
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	627a      	str	r2, [r7, #36]	@ 0x24
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	2300      	movs	r3, #0
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	e00b      	b.n	80075b8 <SEGGER_SYSVIEW_Warn+0x84>
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	1c59      	adds	r1, r3, #1
 80075a8:	61f9      	str	r1, [r7, #28]
 80075aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	09db      	lsrs	r3, r3, #7
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80075bc:	d8f0      	bhi.n	80075a0 <SEGGER_SYSVIEW_Warn+0x6c>
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	61fa      	str	r2, [r7, #28]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80075ce:	221a      	movs	r2, #26
 80075d0:	68f9      	ldr	r1, [r7, #12]
 80075d2:	6938      	ldr	r0, [r7, #16]
 80075d4:	f7fe fbf6 	bl	8005dc4 <_SendPacket>
  RECORD_END();
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f383 8811 	msr	BASEPRI, r3
}
 80075de:	bf00      	nop
 80075e0:	3728      	adds	r7, #40	@ 0x28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	200143d8 	.word	0x200143d8

080075ec <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80075f0:	4b13      	ldr	r3, [pc, #76]	@ (8007640 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075f2:	7e1b      	ldrb	r3, [r3, #24]
 80075f4:	4619      	mov	r1, r3
 80075f6:	4a13      	ldr	r2, [pc, #76]	@ (8007644 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075f8:	460b      	mov	r3, r1
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	440b      	add	r3, r1
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	4413      	add	r3, r2
 8007602:	336c      	adds	r3, #108	@ 0x6c
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4b0e      	ldr	r3, [pc, #56]	@ (8007640 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007608:	7e1b      	ldrb	r3, [r3, #24]
 800760a:	4618      	mov	r0, r3
 800760c:	490d      	ldr	r1, [pc, #52]	@ (8007644 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800760e:	4603      	mov	r3, r0
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	4403      	add	r3, r0
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	440b      	add	r3, r1
 8007618:	3370      	adds	r3, #112	@ 0x70
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d00b      	beq.n	8007638 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007620:	4b07      	ldr	r3, [pc, #28]	@ (8007640 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007622:	789b      	ldrb	r3, [r3, #2]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d107      	bne.n	8007638 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007628:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800762a:	2201      	movs	r2, #1
 800762c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800762e:	f7fe fae5 	bl	8005bfc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007632:	4b03      	ldr	r3, [pc, #12]	@ (8007640 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007634:	2200      	movs	r2, #0
 8007636:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007638:	4b01      	ldr	r3, [pc, #4]	@ (8007640 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800763a:	781b      	ldrb	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	200143a8 	.word	0x200143a8
 8007644:	20012ee8 	.word	0x20012ee8

08007648 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800764c:	4803      	ldr	r0, [pc, #12]	@ (800765c <_cbSendSystemDesc+0x14>)
 800764e:	f7ff fcbf 	bl	8006fd0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007652:	4803      	ldr	r0, [pc, #12]	@ (8007660 <_cbSendSystemDesc+0x18>)
 8007654:	f7ff fcbc 	bl	8006fd0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	080078e4 	.word	0x080078e4
 8007660:	08007918 	.word	0x08007918

08007664 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007668:	4b06      	ldr	r3, [pc, #24]	@ (8007684 <SEGGER_SYSVIEW_Conf+0x20>)
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	4b05      	ldr	r3, [pc, #20]	@ (8007684 <SEGGER_SYSVIEW_Conf+0x20>)
 800766e:	6819      	ldr	r1, [r3, #0]
 8007670:	4b05      	ldr	r3, [pc, #20]	@ (8007688 <SEGGER_SYSVIEW_Conf+0x24>)
 8007672:	4a06      	ldr	r2, [pc, #24]	@ (800768c <SEGGER_SYSVIEW_Conf+0x28>)
 8007674:	f7ff f828 	bl	80066c8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007678:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800767c:	f7ff f868 	bl	8006750 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007680:	bf00      	nop
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000000 	.word	0x20000000
 8007688:	08007649 	.word	0x08007649
 800768c:	08007940 	.word	0x08007940

08007690 <memcmp>:
 8007690:	b510      	push	{r4, lr}
 8007692:	3901      	subs	r1, #1
 8007694:	4402      	add	r2, r0
 8007696:	4290      	cmp	r0, r2
 8007698:	d101      	bne.n	800769e <memcmp+0xe>
 800769a:	2000      	movs	r0, #0
 800769c:	e005      	b.n	80076aa <memcmp+0x1a>
 800769e:	7803      	ldrb	r3, [r0, #0]
 80076a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	d001      	beq.n	80076ac <memcmp+0x1c>
 80076a8:	1b18      	subs	r0, r3, r4
 80076aa:	bd10      	pop	{r4, pc}
 80076ac:	3001      	adds	r0, #1
 80076ae:	e7f2      	b.n	8007696 <memcmp+0x6>

080076b0 <memset>:
 80076b0:	4402      	add	r2, r0
 80076b2:	4603      	mov	r3, r0
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d100      	bne.n	80076ba <memset+0xa>
 80076b8:	4770      	bx	lr
 80076ba:	f803 1b01 	strb.w	r1, [r3], #1
 80076be:	e7f9      	b.n	80076b4 <memset+0x4>

080076c0 <__libc_init_array>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	4d0d      	ldr	r5, [pc, #52]	@ (80076f8 <__libc_init_array+0x38>)
 80076c4:	4c0d      	ldr	r4, [pc, #52]	@ (80076fc <__libc_init_array+0x3c>)
 80076c6:	1b64      	subs	r4, r4, r5
 80076c8:	10a4      	asrs	r4, r4, #2
 80076ca:	2600      	movs	r6, #0
 80076cc:	42a6      	cmp	r6, r4
 80076ce:	d109      	bne.n	80076e4 <__libc_init_array+0x24>
 80076d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007700 <__libc_init_array+0x40>)
 80076d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007704 <__libc_init_array+0x44>)
 80076d4:	f000 f826 	bl	8007724 <_init>
 80076d8:	1b64      	subs	r4, r4, r5
 80076da:	10a4      	asrs	r4, r4, #2
 80076dc:	2600      	movs	r6, #0
 80076de:	42a6      	cmp	r6, r4
 80076e0:	d105      	bne.n	80076ee <__libc_init_array+0x2e>
 80076e2:	bd70      	pop	{r4, r5, r6, pc}
 80076e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e8:	4798      	blx	r3
 80076ea:	3601      	adds	r6, #1
 80076ec:	e7ee      	b.n	80076cc <__libc_init_array+0xc>
 80076ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f2:	4798      	blx	r3
 80076f4:	3601      	adds	r6, #1
 80076f6:	e7f2      	b.n	80076de <__libc_init_array+0x1e>
 80076f8:	08007970 	.word	0x08007970
 80076fc:	08007970 	.word	0x08007970
 8007700:	08007970 	.word	0x08007970
 8007704:	08007974 	.word	0x08007974

08007708 <memcpy>:
 8007708:	440a      	add	r2, r1
 800770a:	4291      	cmp	r1, r2
 800770c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007710:	d100      	bne.n	8007714 <memcpy+0xc>
 8007712:	4770      	bx	lr
 8007714:	b510      	push	{r4, lr}
 8007716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800771e:	4291      	cmp	r1, r2
 8007720:	d1f9      	bne.n	8007716 <memcpy+0xe>
 8007722:	bd10      	pop	{r4, pc}

08007724 <_init>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr

08007730 <_fini>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr
