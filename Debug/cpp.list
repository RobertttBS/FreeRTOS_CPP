
cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08007b6c  08007b6c  00008b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f44  08007f44  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f44  08007f44  00008f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f4c  08007f4c  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f4c  08007f4c  00008f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f50  08007f50  00008f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007f54  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  2000001c  08007f70  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08007f70  000094bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001403a  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003253  00000000  00000000  0001d086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  000202e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  00021660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019193  00000000  00000000  0002255b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ca1  00000000  00000000  0003b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb10  00000000  00000000  0005138f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ece9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  000ecee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000f2048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b54 	.word	0x08007b54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08007b54 	.word	0x08007b54

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ee8 	.word	0x20012ee8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800056a:	f000 fb5b 	bl	8000c24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056e:	f000 f871 	bl	8000654 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000572:	f000 f8d7 	bl	8000724 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	// Enable CYCCNT counter.
	DWT_CTRL |= (1 << 0);
 8000576:	4b2b      	ldr	r3, [pc, #172]	@ (8000624 <main+0xc0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2a      	ldr	r2, [pc, #168]	@ (8000624 <main+0xc0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]

	// Start SEGGER Uart (segger_uart.c)
	SEGGER_UART_init(921600);
 8000582:	f44f 2061 	mov.w	r0, #921600	@ 0xe1000
 8000586:	f005 f87b 	bl	8005680 <SEGGER_UART_init>

	// Start SEGGER
	SEGGER_SYSVIEW_Conf();
 800058a:	f007 fa83 	bl	8007a94 <SEGGER_SYSVIEW_Conf>

	xSemaphore1 = xSemaphoreCreateMutex(4);
 800058e:	2104      	movs	r1, #4
 8000590:	2001      	movs	r0, #1
 8000592:	f001 fef3 	bl	800237c <xQueueCreateMutex>
 8000596:	4603      	mov	r3, r0
 8000598:	4a23      	ldr	r2, [pc, #140]	@ (8000628 <main+0xc4>)
 800059a:	6013      	str	r3, [r2, #0]
	xSemaphore2 = xSemaphoreCreateMutex(4);
 800059c:	2104      	movs	r1, #4
 800059e:	2001      	movs	r0, #1
 80005a0:	f001 feec 	bl	800237c <xQueueCreateMutex>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a21      	ldr	r2, [pc, #132]	@ (800062c <main+0xc8>)
 80005a8:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task1_handler, "task-1", 200, "task1: Turn on the led",
 80005aa:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <main+0xcc>)
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2303      	movs	r3, #3
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <main+0xd0>)
 80005b4:	22c8      	movs	r2, #200	@ 0xc8
 80005b6:	4920      	ldr	r1, [pc, #128]	@ (8000638 <main+0xd4>)
 80005b8:	4820      	ldr	r0, [pc, #128]	@ (800063c <main+0xd8>)
 80005ba:	f002 fc41 	bl	8002e40 <xTaskCreate>
 80005be:	60f8      	str	r0, [r7, #12]
			3, &task1_handle);
	configASSERT(status == pdPASS);
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d00b      	beq.n	80005de <main+0x7a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ca:	f383 8811 	msr	BASEPRI, r3
 80005ce:	f3bf 8f6f 	isb	sy
 80005d2:	f3bf 8f4f 	dsb	sy
 80005d6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	e7fd      	b.n	80005da <main+0x76>

	nxt_del_handle = task1_handle;
 80005de:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <main+0xcc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <main+0xdc>)
 80005e4:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(task2_handler, "task-2", 200,
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <main+0xe0>)
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4b16      	ldr	r3, [pc, #88]	@ (8000648 <main+0xe4>)
 80005f0:	22c8      	movs	r2, #200	@ 0xc8
 80005f2:	4916      	ldr	r1, [pc, #88]	@ (800064c <main+0xe8>)
 80005f4:	4816      	ldr	r0, [pc, #88]	@ (8000650 <main+0xec>)
 80005f6:	f002 fc23 	bl	8002e40 <xTaskCreate>
 80005fa:	60f8      	str	r0, [r7, #12]
			"task2: Turn off the led", 2, &task2_handle);
	configASSERT(status == pdPASS);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00b      	beq.n	800061a <main+0xb6>
        __asm volatile
 8000602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	607b      	str	r3, [r7, #4]
    }
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0xb2>
//  configASSERT(status == pdPASS);

//  status = xTaskCreate(btn_handler, "btn", 200, "Button Task: ", 4, &btn_handle);
//  configASSERT(status == pdPASS);

	vTaskStartScheduler();
 800061a:	f002 feb1 	bl	8003380 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800061e:	bf00      	nop
 8000620:	e7fd      	b.n	800061e <main+0xba>
 8000622:	bf00      	nop
 8000624:	e0001000 	.word	0xe0001000
 8000628:	20000038 	.word	0x20000038
 800062c:	2000003c 	.word	0x2000003c
 8000630:	20000040 	.word	0x20000040
 8000634:	08007b6c 	.word	0x08007b6c
 8000638:	08007b84 	.word	0x08007b84
 800063c:	080007e9 	.word	0x080007e9
 8000640:	20000048 	.word	0x20000048
 8000644:	20000044 	.word	0x20000044
 8000648:	08007b8c 	.word	0x08007b8c
 800064c:	08007ba4 	.word	0x08007ba4
 8000650:	080008f1 	.word	0x080008f1

08000654 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	@ 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f007 fa3c 	bl	8007ae0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a26      	ldr	r2, [pc, #152]	@ (800071c <SystemClock_Config+0xc8>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b24      	ldr	r3, [pc, #144]	@ (800071c <SystemClock_Config+0xc8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a20      	ldr	r2, [pc, #128]	@ (8000720 <SystemClock_Config+0xcc>)
 800069e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <SystemClock_Config+0xcc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80006c4:	2310      	movs	r3, #16
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80006c8:	23a8      	movs	r3, #168	@ 0xa8
 80006ca:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fd89 	bl	80011f0 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x94>
		Error_Handler();
 80006e4:	f000 f992 	bl	8000a0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	2102      	movs	r1, #2
 8000704:	4618      	mov	r0, r3
 8000706:	f000 ffeb 	bl	80016e0 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xc0>
		Error_Handler();
 8000710:	f000 f97c 	bl	8000a0c <Error_Handler>
	}
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	@ 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <MX_GPIO_Init+0xb8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a26      	ldr	r2, [pc, #152]	@ (80007dc <MX_GPIO_Init+0xb8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <MX_GPIO_Init+0xb8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <MX_GPIO_Init+0xb8>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <MX_GPIO_Init+0xbc>)
 8000778:	f000 fd20 	bl	80011bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800077c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000780:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <MX_GPIO_Init+0xc0>)
 8000792:	f000 fb8f 	bl	8000eb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000796:	230c      	movs	r3, #12
 8000798:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a6:	2307      	movs	r3, #7
 80007a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	480b      	ldr	r0, [pc, #44]	@ (80007e0 <MX_GPIO_Init+0xbc>)
 80007b2:	f000 fb7f 	bl	8000eb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80007b6:	2320      	movs	r3, #32
 80007b8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_GPIO_Init+0xbc>)
 80007ce:	f000 fb71 	bl	8000eb4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020800 	.word	0x40020800

080007e8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *param) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

	while (1) {
		vTaskDelay(pdMS_TO_TICKS(5000));
 80007f0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80007f4:	f002 fcae 	bl	8003154 <vTaskDelay>
		// Delay 1000 ms
		SEGGER_SYSVIEW_PrintfTarget("Task1 delay 5000 ms\n");
 80007f8:	4830      	ldr	r0, [pc, #192]	@ (80008bc <task1_handler+0xd4>)
 80007fa:	f007 f89f 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(5000));
 80007fe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000802:	f002 fca7 	bl	8003154 <vTaskDelay>

		SEGGER_SYSVIEW_PrintfTarget("Task1 compute 2000 ms\n");
 8000806:	482e      	ldr	r0, [pc, #184]	@ (80008c0 <task1_handler+0xd8>)
 8000808:	f007 f898 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(2000);
 800080c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000810:	f000 fa4a 	bl	8000ca8 <HAL_Delay>

		SEGGER_SYSVIEW_PrintfTarget("Task1 take semaphore 2\n");
 8000814:	482b      	ldr	r0, [pc, #172]	@ (80008c4 <task1_handler+0xdc>)
 8000816:	f007 f891 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		if ( xSemaphoreTake(xSemaphore2,
 800081a:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <task1_handler+0xe0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000822:	4618      	mov	r0, r3
 8000824:	f002 f814 	bl	8002850 <xQueueSemaphoreTake>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d13a      	bne.n	80008a4 <task1_handler+0xbc>
				( TickType_t ) pdMS_TO_TICKS(10000)) == pdTRUE) {
			SEGGER_SYSVIEW_PrintfTarget("Task1 compute 3000 ms: R2\n");
 800082e:	4827      	ldr	r0, [pc, #156]	@ (80008cc <task1_handler+0xe4>)
 8000830:	f007 f884 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_Delay(3000);
 8000834:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000838:	f000 fa36 	bl	8000ca8 <HAL_Delay>

			//Take xSemaphore1
			SEGGER_SYSVIEW_PrintfTarget("Task1 take semaphore 1\n");
 800083c:	4824      	ldr	r0, [pc, #144]	@ (80008d0 <task1_handler+0xe8>)
 800083e:	f007 f87d 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			if ( xSemaphoreTake(xSemaphore1,
 8000842:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <task1_handler+0xec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f242 7110 	movw	r1, #10000	@ 0x2710
 800084a:	4618      	mov	r0, r3
 800084c:	f002 f800 	bl	8002850 <xQueueSemaphoreTake>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d111      	bne.n	800087a <task1_handler+0x92>
					(TickType_t) pdMS_TO_TICKS(10000)) == pdTRUE) {
				SEGGER_SYSVIEW_PrintfTarget("Task1 compute 3000 ms: R1, R2\n");
 8000856:	4820      	ldr	r0, [pc, #128]	@ (80008d8 <task1_handler+0xf0>)
 8000858:	f007 f870 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
				HAL_Delay(3000);
 800085c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000860:	f000 fa22 	bl	8000ca8 <HAL_Delay>

				SEGGER_SYSVIEW_PrintfTarget("Task1 give semaphore1\n");
 8000864:	481d      	ldr	r0, [pc, #116]	@ (80008dc <task1_handler+0xf4>)
 8000866:	f007 f869 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
				xSemaphoreGive(xSemaphore1);
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <task1_handler+0xec>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	f001 fd9c 	bl	80023b0 <xQueueGenericSend>
 8000878:	e002      	b.n	8000880 <task1_handler+0x98>
			} else {
				SEGGER_SYSVIEW_PrintfTarget("Task1 fail taking semaphore 1\n");
 800087a:	4819      	ldr	r0, [pc, #100]	@ (80008e0 <task1_handler+0xf8>)
 800087c:	f007 f85e 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			}

			SEGGER_SYSVIEW_PrintfTarget("Task1 compute 3000 ms: R2\n");
 8000880:	4812      	ldr	r0, [pc, #72]	@ (80008cc <task1_handler+0xe4>)
 8000882:	f007 f85b 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_Delay(3000);
 8000886:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800088a:	f000 fa0d 	bl	8000ca8 <HAL_Delay>

			xSemaphoreGive(xSemaphore2);
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <task1_handler+0xe0>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	2300      	movs	r3, #0
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	f001 fd8a 	bl	80023b0 <xQueueGenericSend>
			SEGGER_SYSVIEW_PrintfTarget("Task1 give semaphore 2\n");
 800089c:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <task1_handler+0xfc>)
 800089e:	f007 f84d 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
 80008a2:	e002      	b.n	80008aa <task1_handler+0xc2>
		} else {
			SEGGER_SYSVIEW_PrintfTarget("Task1 fail taking semaphore 2\n");
 80008a4:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <task1_handler+0x100>)
 80008a6:	f007 f849 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		}

		SEGGER_SYSVIEW_PrintfTarget("Task1 delay 10000 ms\n");
 80008aa:	4810      	ldr	r0, [pc, #64]	@ (80008ec <task1_handler+0x104>)
 80008ac:	f007 f846 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(10000));
 80008b0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008b4:	f002 fc4e 	bl	8003154 <vTaskDelay>
		vTaskDelay(pdMS_TO_TICKS(5000));
 80008b8:	e79a      	b.n	80007f0 <task1_handler+0x8>
 80008ba:	bf00      	nop
 80008bc:	08007bac 	.word	0x08007bac
 80008c0:	08007bc4 	.word	0x08007bc4
 80008c4:	08007bdc 	.word	0x08007bdc
 80008c8:	2000003c 	.word	0x2000003c
 80008cc:	08007bf4 	.word	0x08007bf4
 80008d0:	08007c10 	.word	0x08007c10
 80008d4:	20000038 	.word	0x20000038
 80008d8:	08007c28 	.word	0x08007c28
 80008dc:	08007c48 	.word	0x08007c48
 80008e0:	08007c60 	.word	0x08007c60
 80008e4:	08007c80 	.word	0x08007c80
 80008e8:	08007c98 	.word	0x08007c98
 80008ec:	08007cb8 	.word	0x08007cb8

080008f0 <task2_handler>:
	}
}

static void task2_handler(void *param) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

	while (1) {
		vTaskDelay(pdMS_TO_TICKS(5000));
 80008f8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008fc:	f002 fc2a 	bl	8003154 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Task2 compute 2000 ms\n");
 8000900:	482c      	ldr	r0, [pc, #176]	@ (80009b4 <task2_handler+0xc4>)
 8000902:	f007 f81b 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_Delay(2000);
 8000906:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800090a:	f000 f9cd 	bl	8000ca8 <HAL_Delay>

		SEGGER_SYSVIEW_PrintfTarget("Task2 take semaphore 1\n");
 800090e:	482a      	ldr	r0, [pc, #168]	@ (80009b8 <task2_handler+0xc8>)
 8000910:	f007 f814 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		if ( xSemaphoreTake(xSemaphore1,
 8000914:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <task2_handler+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f242 7110 	movw	r1, #10000	@ 0x2710
 800091c:	4618      	mov	r0, r3
 800091e:	f001 ff97 	bl	8002850 <xQueueSemaphoreTake>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d13a      	bne.n	800099e <task2_handler+0xae>
				( TickType_t ) pdMS_TO_TICKS(10000)) == pdTRUE) {
			SEGGER_SYSVIEW_PrintfTarget("Task2 compute 6000 ms: R1\n");
 8000928:	4825      	ldr	r0, [pc, #148]	@ (80009c0 <task2_handler+0xd0>)
 800092a:	f007 f807 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_Delay(6000);
 800092e:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000932:	f000 f9b9 	bl	8000ca8 <HAL_Delay>

			// task2 take semaphore2
			SEGGER_SYSVIEW_PrintfTarget("Task2 take semaphore2\n");
 8000936:	4823      	ldr	r0, [pc, #140]	@ (80009c4 <task2_handler+0xd4>)
 8000938:	f007 f800 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			if ( xSemaphoreTake(xSemaphore2,
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <task2_handler+0xd8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000944:	4618      	mov	r0, r3
 8000946:	f001 ff83 	bl	8002850 <xQueueSemaphoreTake>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d111      	bne.n	8000974 <task2_handler+0x84>
					( TickType_t ) pdMS_TO_TICKS(10000)) == pdTRUE) {
				SEGGER_SYSVIEW_PrintfTarget("Task2 compute 2000 ms: R1, R2\n");
 8000950:	481e      	ldr	r0, [pc, #120]	@ (80009cc <task2_handler+0xdc>)
 8000952:	f006 fff3 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
				HAL_Delay(2000);
 8000956:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800095a:	f000 f9a5 	bl	8000ca8 <HAL_Delay>

				SEGGER_SYSVIEW_PrintfTarget("Task2 give semaphore 2\n");
 800095e:	481c      	ldr	r0, [pc, #112]	@ (80009d0 <task2_handler+0xe0>)
 8000960:	f006 ffec 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
				xSemaphoreGive(xSemaphore2);
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <task2_handler+0xd8>)
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	2300      	movs	r3, #0
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	f001 fd1f 	bl	80023b0 <xQueueGenericSend>
 8000972:	e002      	b.n	800097a <task2_handler+0x8a>
			} else {
				SEGGER_SYSVIEW_PrintfTarget("Task2 fail taking semaphore 2\n");
 8000974:	4817      	ldr	r0, [pc, #92]	@ (80009d4 <task2_handler+0xe4>)
 8000976:	f006 ffe1 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			}
			SEGGER_SYSVIEW_PrintfTarget("Task2 compute 2000 ms: R1\n");
 800097a:	4817      	ldr	r0, [pc, #92]	@ (80009d8 <task2_handler+0xe8>)
 800097c:	f006 ffde 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_Delay(2000);
 8000980:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000984:	f000 f990 	bl	8000ca8 <HAL_Delay>

			SEGGER_SYSVIEW_PrintfTarget("Task2 give semaphore 1\n");
 8000988:	4814      	ldr	r0, [pc, #80]	@ (80009dc <task2_handler+0xec>)
 800098a:	f006 ffd7 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
			xSemaphoreGive(xSemaphore1);
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <task2_handler+0xcc>)
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	2300      	movs	r3, #0
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	f001 fd0a 	bl	80023b0 <xQueueGenericSend>
 800099c:	e002      	b.n	80009a4 <task2_handler+0xb4>
		} else {
			SEGGER_SYSVIEW_PrintfTarget("Task2 fail taking semaphore 1\n");
 800099e:	4810      	ldr	r0, [pc, #64]	@ (80009e0 <task2_handler+0xf0>)
 80009a0:	f006 ffcc 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		}

		SEGGER_SYSVIEW_PrintfTarget("Task2 delay 1000 ms\n");
 80009a4:	480f      	ldr	r0, [pc, #60]	@ (80009e4 <task2_handler+0xf4>)
 80009a6:	f006 ffc9 	bl	800793c <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80009aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ae:	f002 fbd1 	bl	8003154 <vTaskDelay>
		vTaskDelay(pdMS_TO_TICKS(5000));
 80009b2:	e7a1      	b.n	80008f8 <task2_handler+0x8>
 80009b4:	08007cd0 	.word	0x08007cd0
 80009b8:	08007ce8 	.word	0x08007ce8
 80009bc:	20000038 	.word	0x20000038
 80009c0:	08007d00 	.word	0x08007d00
 80009c4:	08007d1c 	.word	0x08007d1c
 80009c8:	2000003c 	.word	0x2000003c
 80009cc:	08007d34 	.word	0x08007d34
 80009d0:	08007d54 	.word	0x08007d54
 80009d4:	08007d6c 	.word	0x08007d6c
 80009d8:	08007d8c 	.word	0x08007d8c
 80009dc:	08007da8 	.word	0x08007da8
 80009e0:	08007dc0 	.word	0x08007dc0
 80009e4:	08007de0 	.word	0x08007de0

080009e8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80009fa:	f000 f935 	bl	8000c68 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40000800 	.word	0x40000800

08000a0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a56:	f004 f861 	bl	8004b1c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	@ 0x38
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a32      	ldr	r2, [pc, #200]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b30      	ldr	r3, [pc, #192]	@ (8000b4c <HAL_InitTick+0xe4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a94:	f107 0210 	add.w	r2, r7, #16
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 ffea 	bl	8001a78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d103      	bne.n	8000ab6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aae:	f000 ffcf 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8000ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ab4:	e004      	b.n	8000ac0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab6:	f000 ffcb 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8000aba:	4603      	mov	r3, r0
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ac2:	4a23      	ldr	r2, [pc, #140]	@ (8000b50 <HAL_InitTick+0xe8>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	0c9b      	lsrs	r3, r3, #18
 8000aca:	3b01      	subs	r3, #1
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ad0:	4a21      	ldr	r2, [pc, #132]	@ (8000b58 <HAL_InitTick+0xf0>)
 8000ad2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ad6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ada:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae0:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_InitTick+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <HAL_InitTick+0xec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_InitTick+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <HAL_InitTick+0xec>)
 8000af6:	f000 fff1 	bl	8001adc <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d11b      	bne.n	8000b40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <HAL_InitTick+0xec>)
 8000b0a:	f001 f841 	bl	8001b90 <HAL_TIM_Base_Start_IT>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d111      	bne.n	8000b40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b1c:	201e      	movs	r0, #30
 8000b1e:	f000 f9bb 	bl	8000e98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b0f      	cmp	r3, #15
 8000b26:	d808      	bhi.n	8000b3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	201e      	movs	r0, #30
 8000b2e:	f000 f997 	bl	8000e60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_InitTick+0xf4>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	e002      	b.n	8000b40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3738      	adds	r7, #56	@ 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	2000004c 	.word	0x2000004c
 8000b58:	40000800 	.word	0x40000800
 8000b5c:	20000004 	.word	0x20000004

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <TIM4_IRQHandler+0x10>)
 8000b9e:	f001 f859 	bl	8001c54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000004c 	.word	0x2000004c

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bd4:	f7ff ffea 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f006 ff77 	bl	8007af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fcaf 	bl	8000564 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c14:	08007f54 	.word	0x08007f54
  ldr r2, =_sbss
 8000c18:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c1c:	200144bc 	.word	0x200144bc

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8fc 	bl	8000e4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff ff08 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fede 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000094 	.word	0x20000094

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000094 	.word	0x20000094

08000ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb0:	f7ff ffee 	bl	8000c90 <HAL_GetTick>
 8000cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000cc0:	d005      	beq.n	8000cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <HAL_Delay+0x44>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cce:	bf00      	nop
 8000cd0:	f7ff ffde 	bl	8000c90 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f7      	bhi.n	8000cd0 <HAL_Delay+0x28>
  {
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	@ (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff4c 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e72:	f7ff ff61 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000e76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f7ff ffb1 	bl	8000de4 <NVIC_EncodePriority>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff80 	bl	8000d90 <__NVIC_SetPriority>
}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff54 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e159      	b.n	8001184 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f040 8148 	bne.w	800117e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d005      	beq.n	8000f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d130      	bne.n	8000f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	f003 0201 	and.w	r2, r3, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d017      	beq.n	8000fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d123      	bne.n	8000ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	08da      	lsrs	r2, r3, #3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	69b9      	ldr	r1, [r7, #24]
 8000ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0203 	and.w	r2, r3, #3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 80a2 	beq.w	800117e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b57      	ldr	r3, [pc, #348]	@ (800119c <HAL_GPIO_Init+0x2e8>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a56      	ldr	r2, [pc, #344]	@ (800119c <HAL_GPIO_Init+0x2e8>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b54      	ldr	r3, [pc, #336]	@ (800119c <HAL_GPIO_Init+0x2e8>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001056:	4a52      	ldr	r2, [pc, #328]	@ (80011a0 <HAL_GPIO_Init+0x2ec>)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a49      	ldr	r2, [pc, #292]	@ (80011a4 <HAL_GPIO_Init+0x2f0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x202>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a48      	ldr	r2, [pc, #288]	@ (80011a8 <HAL_GPIO_Init+0x2f4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x1fe>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a47      	ldr	r2, [pc, #284]	@ (80011ac <HAL_GPIO_Init+0x2f8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x1fa>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a46      	ldr	r2, [pc, #280]	@ (80011b0 <HAL_GPIO_Init+0x2fc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x1f6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a45      	ldr	r2, [pc, #276]	@ (80011b4 <HAL_GPIO_Init+0x300>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x1f2>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e008      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010a6:	2307      	movs	r3, #7
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x204>
 80010b6:	2300      	movs	r3, #0
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	f002 0203 	and.w	r2, r2, #3
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	4093      	lsls	r3, r2
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c8:	4935      	ldr	r1, [pc, #212]	@ (80011a0 <HAL_GPIO_Init+0x2ec>)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b2d      	ldr	r3, [pc, #180]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800112a:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800114e:	4a1a      	ldr	r2, [pc, #104]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001178:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <HAL_GPIO_Init+0x304>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b0f      	cmp	r3, #15
 8001188:	f67f aea2 	bls.w	8000ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40013800 	.word	0x40013800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e267      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800120e:	4b88      	ldr	r3, [pc, #544]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b85      	ldr	r3, [pc, #532]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b82      	ldr	r3, [pc, #520]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b7e      	ldr	r3, [pc, #504]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e242      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4b76      	ldr	r3, [pc, #472]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a75      	ldr	r2, [pc, #468]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b70      	ldr	r3, [pc, #448]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6f      	ldr	r2, [pc, #444]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6d      	ldr	r3, [pc, #436]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6c      	ldr	r2, [pc, #432]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4b69      	ldr	r3, [pc, #420]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a68      	ldr	r2, [pc, #416]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b66      	ldr	r3, [pc, #408]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcf2 	bl	8000c90 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fcee 	bl	8000c90 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	@ 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e207      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcde 	bl	8000c90 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcda 	bl	8000c90 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	@ 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1f3      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001306:	4b4a      	ldr	r3, [pc, #296]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b47      	ldr	r3, [pc, #284]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b41      	ldr	r3, [pc, #260]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c7      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3b      	ldr	r3, [pc, #236]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4937      	ldr	r1, [pc, #220]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <HAL_RCC_OscConfig+0x244>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fc93 	bl	8000c90 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc8f 	bl	8000c90 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a8      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4925      	ldr	r1, [pc, #148]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b24      	ldr	r3, [pc, #144]	@ (8001434 <HAL_RCC_OscConfig+0x244>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc72 	bl	8000c90 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc6e 	bl	8000c90 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e187      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d036      	beq.n	8001448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_RCC_OscConfig+0x248>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff fc52 	bl	8000c90 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc4e 	bl	8000c90 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e167      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_RCC_OscConfig+0x240>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
 800140e:	e01b      	b.n	8001448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_RCC_OscConfig+0x248>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc3b 	bl	8000c90 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00e      	b.n	800143c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fc37 	bl	8000c90 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d907      	bls.n	800143c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e150      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ea      	bne.n	800141e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8097 	beq.w	8001584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b81      	ldr	r3, [pc, #516]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b7d      	ldr	r3, [pc, #500]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a7c      	ldr	r2, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b7a      	ldr	r3, [pc, #488]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b77      	ldr	r3, [pc, #476]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a73      	ldr	r2, [pc, #460]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbf7 	bl	8000c90 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fbf3 	bl	8000c90 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e10c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <HAL_RCC_OscConfig+0x474>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x2ea>
 80014cc:	4b64      	ldr	r3, [pc, #400]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014d0:	4a63      	ldr	r2, [pc, #396]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x30c>
 80014e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001500:	4a57      	ldr	r2, [pc, #348]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	@ 0x70
 8001508:	4b55      	ldr	r3, [pc, #340]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150c:	4a54      	ldr	r2, [pc, #336]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d015      	beq.n	8001548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fbb8 	bl	8000c90 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001524:	f7ff fbb4 	bl	8000c90 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0cb      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4b49      	ldr	r3, [pc, #292]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ee      	beq.n	8001524 <HAL_RCC_OscConfig+0x334>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fba2 	bl	8000c90 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fb9e 	bl	8000c90 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0b5      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157c:	4a38      	ldr	r2, [pc, #224]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a1 	beq.w	80016d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800158e:	4b34      	ldr	r3, [pc, #208]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b08      	cmp	r3, #8
 8001598:	d05c      	beq.n	8001654 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d141      	bne.n	8001626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb72 	bl	8000c90 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fb6e 	bl	8000c90 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e087      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	491b      	ldr	r1, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb47 	bl	8000c90 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb43 	bl	8000c90 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e05c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x416>
 8001624:	e054      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb30 	bl	8000c90 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb2c 	bl	8000c90 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e045      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
 8001652:	e03d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e038      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000
 8001668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x4ec>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d028      	beq.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d121      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa5e 	bl	8000c90 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa5a 	bl	8000c90 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4602      	mov	r2, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	490a      	ldr	r1, [pc, #40]	@ (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	@ (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f8ee 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	08007f04 	.word	0x08007f04
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b090      	sub	sp, #64	@ 0x40
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b59      	ldr	r3, [pc, #356]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d00d      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f200 80a1 	bhi.w	8001a18 <HAL_RCC_GetSysClockFreq+0x16c>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018de:	e09b      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x184>)
 80018e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018e4:	e09b      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x188>)
 80018e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80018ea:	e098      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f6:	4b4d      	ldr	r3, [pc, #308]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d028      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b4a      	ldr	r3, [pc, #296]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	627a      	str	r2, [r7, #36]	@ 0x24
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001914:	2100      	movs	r1, #0
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001918:	fb03 f201 	mul.w	r2, r3, r1
 800191c:	2300      	movs	r3, #0
 800191e:	fb00 f303 	mul.w	r3, r0, r3
 8001922:	4413      	add	r3, r2
 8001924:	4a43      	ldr	r2, [pc, #268]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001926:	fba0 1202 	umull	r1, r2, r0, r2
 800192a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800192c:	460a      	mov	r2, r1
 800192e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001932:	4413      	add	r3, r2
 8001934:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001938:	2200      	movs	r2, #0
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	61fa      	str	r2, [r7, #28]
 800193e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001946:	f7fe fc95 	bl	8000274 <__aeabi_uldivmod>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4613      	mov	r3, r2
 8001950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001952:	e053      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	2200      	movs	r2, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	617a      	str	r2, [r7, #20]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001966:	f04f 0b00 	mov.w	fp, #0
 800196a:	4652      	mov	r2, sl
 800196c:	465b      	mov	r3, fp
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ebb2 080a 	subs.w	r8, r2, sl
 8001986:	eb63 090b 	sbc.w	r9, r3, fp
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800199a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800199e:	ebb2 0408 	subs.w	r4, r2, r8
 80019a2:	eb63 0509 	sbc.w	r5, r3, r9
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	00eb      	lsls	r3, r5, #3
 80019b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b4:	00e2      	lsls	r2, r4, #3
 80019b6:	4614      	mov	r4, r2
 80019b8:	461d      	mov	r5, r3
 80019ba:	eb14 030a 	adds.w	r3, r4, sl
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	eb45 030b 	adc.w	r3, r5, fp
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d2:	4629      	mov	r1, r5
 80019d4:	028b      	lsls	r3, r1, #10
 80019d6:	4621      	mov	r1, r4
 80019d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019dc:	4621      	mov	r1, r4
 80019de:	028a      	lsls	r2, r1, #10
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e6:	2200      	movs	r2, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f0:	f7fe fc40 	bl	8000274 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3740      	adds	r7, #64	@ 0x40
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	017d7840 	.word	0x017d7840

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	@ (8001a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	@ (8001a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08007f14 	.word	0x08007f14

08001a78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	220f      	movs	r2, #15
 8001a86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	08db      	lsrs	r3, r3, #3
 8001ab2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_RCC_GetClockConfig+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0207 	and.w	r2, r3, #7
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40023c00 	.word	0x40023c00

08001adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f839 	bl	8001b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 f9b2 	bl	8001e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d001      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e044      	b.n	8001c32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d018      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd2:	d013      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a19      	ldr	r2, [pc, #100]	@ (8001c48 <HAL_TIM_Base_Start_IT+0xb8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x6c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d010      	beq.n	8001c30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1e:	e007      	b.n	8001c30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40000400 	.word	0x40000400
 8001c48:	40000800 	.word	0x40000800
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	40014000 	.word	0x40014000

08001c54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d020      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01b      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0202 	mvn.w	r2, #2
 8001c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8d2 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8c4 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8d5 	bl	8001e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d020      	beq.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d01b      	beq.n	8001d04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0204 	mvn.w	r2, #4
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8ac 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f89e 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f8af 	bl	8001e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0208 	mvn.w	r2, #8
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2204      	movs	r2, #4
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f886 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f878 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f889 	bl	8001e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f860 	bl	8001e48 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f852 	bl	8001e34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f863 	bl	8001e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0201 	mvn.w	r2, #1
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fe14 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8e6 	bl	8001fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f834 	bl	8001e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00c      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0220 	mvn.w	r2, #32
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8b8 	bl	8001f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3a      	ldr	r2, [pc, #232]	@ (8001f80 <TIM_Base_SetConfig+0xfc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00f      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea2:	d00b      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a37      	ldr	r2, [pc, #220]	@ (8001f84 <TIM_Base_SetConfig+0x100>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a36      	ldr	r2, [pc, #216]	@ (8001f88 <TIM_Base_SetConfig+0x104>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d003      	beq.n	8001ebc <TIM_Base_SetConfig+0x38>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a35      	ldr	r2, [pc, #212]	@ (8001f8c <TIM_Base_SetConfig+0x108>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d108      	bne.n	8001ece <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f80 <TIM_Base_SetConfig+0xfc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01b      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001edc:	d017      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a28      	ldr	r2, [pc, #160]	@ (8001f84 <TIM_Base_SetConfig+0x100>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <TIM_Base_SetConfig+0x104>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00f      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <TIM_Base_SetConfig+0x108>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a25      	ldr	r2, [pc, #148]	@ (8001f90 <TIM_Base_SetConfig+0x10c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a24      	ldr	r2, [pc, #144]	@ (8001f94 <TIM_Base_SetConfig+0x110>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d003      	beq.n	8001f0e <TIM_Base_SetConfig+0x8a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <TIM_Base_SetConfig+0x114>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d108      	bne.n	8001f20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	@ (8001f80 <TIM_Base_SetConfig+0xfc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d103      	bne.n	8001f54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f023 0201 	bic.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
  }
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800

08001f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f103 0208 	add.w	r2, r3, #8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fdc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f103 0208 	add.w	r2, r3, #8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0208 	add.w	r2, r3, #8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800207c:	d103      	bne.n	8002086 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e00c      	b.n	80020a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3308      	adds	r3, #8
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e002      	b.n	8002094 <vListInsert+0x2e>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d2f6      	bcs.n	800208e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	601a      	str	r2, [r3, #0]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6892      	ldr	r2, [r2, #8]
 80020ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6852      	ldr	r2, [r2, #4]
 80020f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	429a      	cmp	r2, r3
 8002102:	d103      	bne.n	800210c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1e5a      	subs	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <xQueueGenericReset>:
            ( pxQueue )->cRxLock = ( int8_t ) ( ( cRxLock ) + ( int8_t ) 1 ); \
        }                                                                     \
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn = pdPASS;
 8002136:	2301      	movs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
	Queue_t *const pxQueue = xQueue;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	613b      	str	r3, [r7, #16]

	configASSERT(pxQueue);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <xQueueGenericReset+0x30>
        __asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	60fb      	str	r3, [r7, #12]
    }
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <xQueueGenericReset+0x2c>

	if ((pxQueue != NULL) && (pxQueue->uxLength >= 1U) &&
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d05d      	beq.n	800221e <xQueueGenericReset+0xf2>
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d059      	beq.n	800221e <xQueueGenericReset+0xf2>
	/* Check for multiplication overflow. */
	(( SIZE_MAX / pxQueue->uxLength) >= pxQueue->uxItemSize)) {
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002172:	2100      	movs	r1, #0
 8002174:	fba3 2302 	umull	r2, r3, r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d000      	beq.n	800217e <xQueueGenericReset+0x52>
 800217c:	2101      	movs	r1, #1
 800217e:	460b      	mov	r3, r1
	if ((pxQueue != NULL) && (pxQueue->uxLength >= 1U) &&
 8002180:	2b00      	cmp	r3, #0
 8002182:	d14c      	bne.n	800221e <xQueueGenericReset+0xf2>
		taskENTER_CRITICAL();
 8002184:	f002 fd4a 	bl	8004c1c <vPortEnterCritical>
		{
			pxQueue->u.xQueue.pcTail = pxQueue->pcHead
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	681a      	ldr	r2, [r3, #0]
					+ (pxQueue->uxLength * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	441a      	add	r2, r3
			pxQueue->u.xQueue.pcTail = pxQueue->pcHead
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
			pxQueue->uxMessagesWaiting = (UBaseType_t) 0U;
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2200      	movs	r2, #0
 80021a2:	639a      	str	r2, [r3, #56]	@ 0x38
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	605a      	str	r2, [r3, #4]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	681a      	ldr	r2, [r3, #0]
					+ ((pxQueue->uxLength - 1U) * pxQueue->uxItemSize); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	3b01      	subs	r3, #1
 80021b6:	6939      	ldr	r1, [r7, #16]
 80021b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021ba:	fb01 f303 	mul.w	r3, r1, r3
 80021be:	441a      	add	r2, r3
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	60da      	str	r2, [r3, #12]
			pxQueue->cRxLock = queueUNLOCKED;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	22ff      	movs	r2, #255	@ 0xff
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			pxQueue->cTxLock = queueUNLOCKED;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	22ff      	movs	r2, #255	@ 0xff
 80021d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

			if (xNewQueue == pdFALSE) {
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d114      	bne.n	8002204 <xQueueGenericReset+0xd8>
				/* If there are tasks blocked waiting to read from the queue, then
				 * the tasks will remain blocked as after this function exits the queue
				 * will still be empty.  If there are tasks blocked waiting to write to
				 * the queue, then one should be unblocked as after this function exits
				 * it will be possible to write to it. */
				if ( listLIST_IS_EMPTY(
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01a      	beq.n	8002218 <xQueueGenericReset+0xec>
						&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	3310      	adds	r3, #16
					if (xTaskRemoveFromEventList(
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fc52 	bl	8003a90 <xTaskRemoveFromEventList>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <xQueueGenericReset+0xec>
						queueYIELD_IF_USING_PREEMPTION();
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <xQueueGenericReset+0x120>)
 80021f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	e009      	b.n	8002218 <xQueueGenericReset+0xec>
				} else {
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* Ensure the event queues start in the correct state. */
				vListInitialise(&(pxQueue->xTasksWaitingToSend));
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3310      	adds	r3, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fedb 	bl	8001fc4 <vListInitialise>
				vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	3324      	adds	r3, #36	@ 0x24
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fed6 	bl	8001fc4 <vListInitialise>
			}
		}
		taskEXIT_CRITICAL();
 8002218:	f002 fd32 	bl	8004c80 <vPortExitCritical>
 800221c:	e001      	b.n	8002222 <xQueueGenericReset+0xf6>
	} else {
		xReturn = pdFAIL;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
	}

	configASSERT(xReturn != pdFAIL);
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <xQueueGenericReset+0x114>
        __asm volatile
 8002228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800222c:	f383 8811 	msr	BASEPRI, r3
 8002230:	f3bf 8f6f 	isb	sy
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	60bb      	str	r3, [r7, #8]
    }
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <xQueueGenericReset+0x110>

	/* A value is returned for calling semantic consistency with previous
	 * versions. */
	return xReturn;
 8002240:	697b      	ldr	r3, [r7, #20]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000ed04 	.word	0xe000ed04

08002250 <xQueueGenericCreate>:

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreate(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, const uint8_t ucQueueType,
		const UBaseType_t uxQueuePriority) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	@ 0x28
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue = NULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

	if ((uxQueueLength > (UBaseType_t) 0) &&
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d02e      	beq.n	80022c8 <xQueueGenericCreate+0x78>
	/* Check for multiplication overflow. */
	(( SIZE_MAX / uxQueueLength) >= uxItemSize) &&
 800226a:	2100      	movs	r1, #0
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	fba3 2302 	umull	r2, r3, r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d000      	beq.n	800227a <xQueueGenericCreate+0x2a>
 8002278:	2101      	movs	r1, #1
 800227a:	460b      	mov	r3, r1
	if ((uxQueueLength > (UBaseType_t) 0) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d123      	bne.n	80022c8 <xQueueGenericCreate+0x78>
	/* Check for addition overflow. */
	(( SIZE_MAX - sizeof(Queue_t)) >= (uxQueueLength * uxItemSize))) {
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	fb02 f303 	mul.w	r3, r2, r3
	(( SIZE_MAX / uxQueueLength) >= uxItemSize) &&
 8002288:	f113 0f59 	cmn.w	r3, #89	@ 0x59
 800228c:	d81c      	bhi.n	80022c8 <xQueueGenericCreate+0x78>
		/* Allocate enough space to hold the maximum number of items that
		 * can be in the queue at any time.  It is valid for uxItemSize to be
		 * zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = (size_t) (uxQueueLength * uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	61bb      	str	r3, [r7, #24]
		 * alignment requirements of the Queue_t structure - which in this case
		 * is an int8_t *.  Therefore, whenever the stack alignment requirements
		 * are greater than or equal to the pointer to char requirements the cast
		 * is safe.  In other cases alignment requirements are not strict (one or
		 * two bytes). */
		pxNewQueue = (Queue_t*) pvPortMalloc(
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	3358      	adds	r3, #88	@ 0x58
 800229c:	4618      	mov	r0, r3
 800229e:	f002 fdef 	bl	8004e80 <pvPortMalloc>
 80022a2:	61f8      	str	r0, [r7, #28]
				sizeof(Queue_t) + xQueueSizeInBytes); /*lint !e9087 !e9079 see comment above. */

		if (pxNewQueue != NULL) {
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01d      	beq.n	80022e6 <xQueueGenericCreate+0x96>
			/* Jump past the queue structure to find the location of the queue
			 * storage area. */
			pucQueueStorage = (uint8_t*) pxNewQueue;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof(Queue_t); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3358      	adds	r3, #88	@ 0x58
 80022b2:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage,
 80022b4:	79fa      	ldrb	r2, [r7, #7]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f818 	bl	80022f6 <prvInitialiseNewQueue>
		if (pxNewQueue != NULL) {
 80022c6:	e00e      	b.n	80022e6 <xQueueGenericCreate+0x96>
					ucQueueType, pxNewQueue);
		} else {
			traceQUEUE_CREATE_FAILED( ucQueueType );mtCOVERAGE_TEST_MARKER();
		}
	} else {
		configASSERT(pxNewQueue);mtCOVERAGE_TEST_MARKER();
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <xQueueGenericCreate+0x96>
        __asm volatile
 80022ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	613b      	str	r3, [r7, #16]
    }
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	e7fd      	b.n	80022e2 <xQueueGenericCreate+0x92>
	}

	pxNewQueue->uxQueuePriority = uxQueuePriority;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	651a      	str	r2, [r3, #80]	@ 0x50

	return pxNewQueue;
 80022ec:	69fb      	ldr	r3, [r7, #28]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <prvInitialiseNewQueue>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, uint8_t *pucQueueStorage,
		const uint8_t ucQueueType, Queue_t *pxNewQueue) {
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	 * configUSE_TRACE_FACILITY not be set to 1. */
	(void) ucQueueType;

	if (uxItemSize == (UBaseType_t) 0) {
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <prvInitialiseNewQueue+0x1c>
		/* No RAM was allocated for the queue storage area, but PC head cannot
		 * be set to NULL because NULL is used as a key to say the queue is used as
		 * a mutex.  Therefore just set pcHead to point to the queue as a benign
		 * value that is known to be within the memory map. */
		pxNewQueue->pcHead = (int8_t*) pxNewQueue;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	e002      	b.n	8002318 <prvInitialiseNewQueue+0x22>
	} else {
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = (int8_t*) pucQueueStorage;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	 * defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40
	(void) xQueueGenericReset(pxNewQueue, pdTRUE);
 8002324:	2101      	movs	r1, #1
 8002326:	69b8      	ldr	r0, [r7, #24]
 8002328:	f7ff ff00 	bl	800212c <xQueueGenericReset>

#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE(pxNewQueue);
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	2073      	movs	r0, #115	@ 0x73
 800233c:	f004 fce4 	bl	8006d08 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

static void prvInitialiseMutex(Queue_t *pxNewQueue) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	if (pxNewQueue != NULL) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00e      	beq.n	8002374 <prvInitialiseMutex+0x2c>
		/* The queue create function will set all the queue structure members
		 * correctly for a generic queue, but this function is creating a
		 * mutex.  Overwrite those members that need to be set differently -
		 * in particular the information required for priority inheritance. */
		pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
		pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

		/* In case this is a recursive mutex. */
		pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]

		traceCREATE_MUTEX( pxNewQueue );

		/* Start with the semaphore in the expected state. */
		(void) xQueueGenericSend(pxNewQueue, NULL, (TickType_t) 0U,
 8002368:	2300      	movs	r3, #0
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f81e 	bl	80023b0 <xQueueGenericSend>
		queueSEND_TO_BACK);
	} else {
		traceCREATE_MUTEX_FAILED();
	}
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

QueueHandle_t xQueueCreateMutex(const uint8_t ucQueueType,
		const UBaseType_t uxQueuePriority) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = (UBaseType_t) 1, uxMutexSize =
 8002388:	2301      	movs	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
			(UBaseType_t) 0;

	xNewQueue = xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType,
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6939      	ldr	r1, [r7, #16]
 8002396:	6978      	ldr	r0, [r7, #20]
 8002398:	f7ff ff5a 	bl	8002250 <xQueueGenericCreate>
 800239c:	60f8      	str	r0, [r7, #12]
			uxQueuePriority);
	prvInitialiseMutex((Queue_t*) xNewQueue);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ffd2 	bl	8002348 <prvInitialiseMutex>

	return xNewQueue;
 80023a4:	68fb      	ldr	r3, [r7, #12]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <xQueueGenericSend>:
#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue,
		const void *const pvItemToQueue, TickType_t xTicksToWait,
		const BaseType_t xCopyPosition) {
 80023b0:	b590      	push	{r4, r7, lr}
 80023b2:	b091      	sub	sp, #68	@ 0x44
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
	BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023be:	2300      	movs	r3, #0
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = xQueue;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT(pxQueue);
 80023c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <xQueueGenericSend+0x34>
        __asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <xQueueGenericSend+0x30>
	configASSERT(
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <xQueueGenericSend+0x42>
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <xQueueGenericSend+0x46>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <xQueueGenericSend+0x48>
 80023f6:	2300      	movs	r3, #0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10b      	bne.n	8002414 <xQueueGenericSend+0x64>
        __asm volatile
 80023fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <xQueueGenericSend+0x60>
			!( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ));
	configASSERT(
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d103      	bne.n	8002422 <xQueueGenericSend+0x72>
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <xQueueGenericSend+0x76>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <xQueueGenericSend+0x78>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <xQueueGenericSend+0x94>
        __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	623b      	str	r3, [r7, #32]
    }
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <xQueueGenericSend+0x90>
			!( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ));
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 8002444:	f001 fd3a 	bl	8003ebc <xTaskGetSchedulerState>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <xQueueGenericSend+0xa4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <xQueueGenericSend+0xa8>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <xQueueGenericSend+0xaa>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10b      	bne.n	8002476 <xQueueGenericSend+0xc6>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	61fb      	str	r3, [r7, #28]
    }
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	e7fd      	b.n	8002472 <xQueueGenericSend+0xc2>

	/*lint -save -e904 This function relaxes the coding standard somewhat to
	 * allow return statements within the function itself.  This is done in the
	 * interest of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
 8002476:	f002 fbd1 	bl	8004c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			 * highest priority task wanting to access the queue.  If the head item
			 * in the queue is to be overwritten then it does not matter if the
			 * queue is full. */
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002482:	429a      	cmp	r2, r3
 8002484:	d302      	bcc.n	800248c <xQueueGenericSend+0xdc>
					|| (xCopyPosition == queueOVERWRITE)) {
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d149      	bne.n	8002520 <xQueueGenericSend+0x170>
				traceQUEUE_SEND(pxQueue);
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	4618      	mov	r0, r3
 8002490:	f005 f968 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	460b      	mov	r3, r1
 800249e:	4601      	mov	r1, r0
 80024a0:	205a      	movs	r0, #90	@ 0x5a
 80024a2:	f004 fca7 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue,
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024ac:	f000 fb2c 	bl	8002b08 <prvCopyDataToQueue>
 80024b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
							xCopyPosition);

					/* If there was a task waiting for data to arrive on the
					 * queue then unblock it now. */
					if ( listLIST_IS_EMPTY(
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d010      	beq.n	80024dc <xQueueGenericSend+0x12c>
							&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
						if (xTaskRemoveFromEventList(
								&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 80024ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024bc:	3324      	adds	r3, #36	@ 0x24
						if (xTaskRemoveFromEventList(
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fae6 	bl	8003a90 <xTaskRemoveFromEventList>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d013      	beq.n	80024f2 <xQueueGenericSend+0x142>
							/* The unblocked task has a priority higher than
							 * our own so yield immediately.  Yes it is ok to do
							 * this from within the critical section - the kernel
							 * takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024ca:	4b56      	ldr	r3, [pc, #344]	@ (8002624 <xQueueGenericSend+0x274>)
 80024cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	e00a      	b.n	80024f2 <xQueueGenericSend+0x142>
						} else {
							mtCOVERAGE_TEST_MARKER();
						}
					} else if (xYieldRequired != pdFALSE) {
 80024dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <xQueueGenericSend+0x142>
						/* This path is a special case that will only get
						 * executed if the task was holding multiple mutexes and
						 * the mutexes were given back in an order that is
						 * different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024e2:	4b50      	ldr	r3, [pc, #320]	@ (8002624 <xQueueGenericSend+0x274>)
 80024e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024f2:	f002 fbc5 	bl	8004c80 <vPortExitCritical>
#ifdef CPP
				if ((xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) && xQueue->uxQueuePrevPriority < uxTaskPriorityGet( NULL ))
 80024f6:	f001 fce1 	bl	8003ebc <xTaskGetSchedulerState>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d10d      	bne.n	800251c <xQueueGenericSend+0x16c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8002504:	2000      	movs	r0, #0
 8002506:	f000 fe5f 	bl	80031c8 <uxTaskPriorityGet>
 800250a:	4603      	mov	r3, r0
 800250c:	429c      	cmp	r4, r3
 800250e:	d205      	bcs.n	800251c <xQueueGenericSend+0x16c>
				{
					vTaskPrioritySet( NULL, xQueue->uxQueuePrevPriority);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	4619      	mov	r1, r3
 8002516:	2000      	movs	r0, #0
 8002518:	f000 fe70 	bl	80031fc <vTaskPrioritySet>
				}
#endif

				return pdPASS;
 800251c:	2301      	movs	r3, #1
 800251e:	e07d      	b.n	800261c <xQueueGenericSend+0x26c>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d110      	bne.n	8002548 <xQueueGenericSend+0x198>
					/* The queue was full and no block time is specified (or
					 * the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002526:	f002 fbab 	bl	8004c80 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					 * the function. */
					traceQUEUE_SEND_FAILED(pxQueue);
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	4618      	mov	r0, r3
 800252e:	f005 f919 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	460b      	mov	r3, r1
 800253c:	4601      	mov	r1, r0
 800253e:	205a      	movs	r0, #90	@ 0x5a
 8002540:	f004 fc58 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002544:	2300      	movs	r3, #0
 8002546:	e069      	b.n	800261c <xQueueGenericSend+0x26c>
				} else if (xEntryTimeSet == pdFALSE) {
 8002548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <xQueueGenericSend+0x1ac>
					/* The queue was full and a block time was specified so
					 * configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 800254e:	f107 0314 	add.w	r3, r7, #20
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fb76 	bl	8003c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002558:	2301      	movs	r3, #1
 800255a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800255c:	f002 fb90 	bl	8004c80 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		 * now the critical section has been exited. */

		vTaskSuspendAll();
 8002560:	f000 ff70 	bl	8003444 <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 8002564:	f002 fb5a 	bl	8004c1c <vPortEnterCritical>
 8002568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800256e:	b25b      	sxtb	r3, r3
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002574:	d103      	bne.n	800257e <xQueueGenericSend+0x1ce>
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002584:	b25b      	sxtb	r3, r3
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800258a:	d103      	bne.n	8002594 <xQueueGenericSend+0x1e4>
 800258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002594:	f002 fb74 	bl	8004c80 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 8002598:	1d3a      	adds	r2, r7, #4
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f001 fb65 	bl	8003c70 <xTaskCheckForTimeOut>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d124      	bne.n	80025f6 <xQueueGenericSend+0x246>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
 80025ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ae:	f000 fba3 	bl	8002cf8 <prvIsQueueFull>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d018      	beq.n	80025ea <xQueueGenericSend+0x23a>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend),
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	3310      	adds	r3, #16
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f9f5 	bl	80039b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				 * event list. It is possible that interrupts occurring now
				 * remove this task from the event list again - but as the
				 * scheduler is suspended the task will go onto the pending
				 * ready list instead of the actual ready list. */
				prvUnlockQueue(pxQueue);
 80025c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025c8:	f000 fb2e 	bl	8002c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				 * ready list into the ready list - so it is feasible that this
				 * task is already in the ready list before it yields - in which
				 * case the yield will not cause a context switch unless there
				 * is also a higher priority task in the pending ready list. */
				if (xTaskResumeAll() == pdFALSE) {
 80025cc:	f000 ff48 	bl	8003460 <xTaskResumeAll>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f47f af4f 	bne.w	8002476 <xQueueGenericSend+0xc6>
					portYIELD_WITHIN_API()
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <xQueueGenericSend+0x274>)
 80025da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	e745      	b.n	8002476 <xQueueGenericSend+0xc6>
					;
				}
			} else {
				/* Try again. */
				prvUnlockQueue(pxQueue);
 80025ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025ec:	f000 fb1c 	bl	8002c28 <prvUnlockQueue>
				(void) xTaskResumeAll();
 80025f0:	f000 ff36 	bl	8003460 <xTaskResumeAll>
 80025f4:	e73f      	b.n	8002476 <xQueueGenericSend+0xc6>
			}
		} else {
			/* The timeout has expired. */
			prvUnlockQueue(pxQueue);
 80025f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025f8:	f000 fb16 	bl	8002c28 <prvUnlockQueue>
			(void) xTaskResumeAll();
 80025fc:	f000 ff30 	bl	8003460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED(pxQueue);
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	4618      	mov	r0, r3
 8002604:	f005 f8ae 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	4601      	mov	r1, r0
 8002614:	205a      	movs	r0, #90	@ 0x5a
 8002616:	f004 fbed 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800261a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800261c:	4618      	mov	r0, r3
 800261e:	373c      	adds	r7, #60	@ 0x3c
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void *const pvBuffer,
		TickType_t xTicksToWait) {
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b08f      	sub	sp, #60	@ 0x3c
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
	BaseType_t xEntryTimeSet = pdFALSE;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = xQueue;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT((pxQueue));
 800263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10b      	bne.n	800265a <xQueueReceive+0x32>
        __asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	623b      	str	r3, [r7, #32]
    }
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	e7fd      	b.n	8002656 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	 * is zero (so no data is copied into the buffer). */
	configASSERT(
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <xQueueReceive+0x40>
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <xQueueReceive+0x44>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <xQueueReceive+0x46>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <xQueueReceive+0x62>
        __asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	61fb      	str	r3, [r7, #28]
    }
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	e7fd      	b.n	8002686 <xQueueReceive+0x5e>
			!( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ));

	/* Cannot block if the scheduler is suspended. */
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 800268a:	f001 fc17 	bl	8003ebc <xTaskGetSchedulerState>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <xQueueReceive+0x72>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <xQueueReceive+0x76>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <xQueueReceive+0x78>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <xQueueReceive+0x94>
        __asm volatile
 80026a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	61bb      	str	r3, [r7, #24]
    }
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <xQueueReceive+0x90>

	/*lint -save -e904  This function relaxes the coding standard somewhat to
	 * allow return statements within the function itself.  This is done in the
	 * interest of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
 80026bc:	f002 faae 	bl	8004c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			 * must be the highest priority task wanting to access the queue. */
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02f      	beq.n	800272c <xQueueReceive+0x104>
				/* Data available, remove one item. */
				prvCopyDataFromQueue(pxQueue, pvBuffer);
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026d0:	f000 fa84 	bl	8002bdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE(pxQueue);
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 f844 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 80026dc:	4604      	mov	r4, r0
 80026de:	2000      	movs	r0, #0
 80026e0:	f005 f840 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2101      	movs	r1, #1
 80026ea:	9100      	str	r1, [sp, #0]
 80026ec:	4621      	mov	r1, r4
 80026ee:	205c      	movs	r0, #92	@ 0x5c
 80026f0:	f004 fb80 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
						- (UBaseType_t) 1;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	1e5a      	subs	r2, r3, #1
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				 * post to the queue?  If so, unblock the highest priority waiting
				 * task. */
				if ( listLIST_IS_EMPTY(
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00f      	beq.n	8002724 <xQueueReceive+0xfc>
						&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	3310      	adds	r3, #16
					if (xTaskRemoveFromEventList(
 8002708:	4618      	mov	r0, r3
 800270a:	f001 f9c1 	bl	8003a90 <xTaskRemoveFromEventList>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <xQueueReceive+0xfc>
						queueYIELD_IF_USING_PREEMPTION();
 8002714:	4b4d      	ldr	r3, [pc, #308]	@ (800284c <xQueueReceive+0x224>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002724:	f002 faac 	bl	8004c80 <vPortExitCritical>
				return pdPASS;
 8002728:	2301      	movs	r3, #1
 800272a:	e08a      	b.n	8002842 <xQueueReceive+0x21a>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d113      	bne.n	800275a <xQueueReceive+0x132>
					/* The queue was empty and no block time is specified (or
					 * the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002732:	f002 faa5 	bl	8004c80 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED(pxQueue);
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	4618      	mov	r0, r3
 800273a:	f005 f813 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 800273e:	4604      	mov	r4, r0
 8002740:	2000      	movs	r0, #0
 8002742:	f005 f80f 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2101      	movs	r1, #1
 800274c:	9100      	str	r1, [sp, #0]
 800274e:	4621      	mov	r1, r4
 8002750:	205c      	movs	r0, #92	@ 0x5c
 8002752:	f004 fb4f 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002756:	2300      	movs	r3, #0
 8002758:	e073      	b.n	8002842 <xQueueReceive+0x21a>
				} else if (xEntryTimeSet == pdFALSE) {
 800275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d106      	bne.n	800276e <xQueueReceive+0x146>
					/* The queue was empty and a block time was specified so
					 * configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fa6d 	bl	8003c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800276a:	2301      	movs	r3, #1
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800276e:	f002 fa87 	bl	8004c80 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		 * now the critical section has been exited. */

		vTaskSuspendAll();
 8002772:	f000 fe67 	bl	8003444 <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 8002776:	f002 fa51 	bl	8004c1c <vPortEnterCritical>
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002780:	b25b      	sxtb	r3, r3
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002786:	d103      	bne.n	8002790 <xQueueReceive+0x168>
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002796:	b25b      	sxtb	r3, r3
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800279c:	d103      	bne.n	80027a6 <xQueueReceive+0x17e>
 800279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027a6:	f002 fa6b 	bl	8004c80 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 80027aa:	1d3a      	adds	r2, r7, #4
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fa5c 	bl	8003c70 <xTaskCheckForTimeOut>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d124      	bne.n	8002808 <xQueueReceive+0x1e0>
			/* The timeout has not expired.  If the queue is still empty place
			 * the task on the list of tasks waiting to receive from the queue. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 80027be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027c0:	f000 fa84 	bl	8002ccc <prvIsQueueEmpty>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d018      	beq.n	80027fc <xQueueReceive+0x1d4>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive),
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	3324      	adds	r3, #36	@ 0x24
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 f8ec 	bl	80039b0 <vTaskPlaceOnEventList>
						xTicksToWait);
				prvUnlockQueue(pxQueue);
 80027d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027da:	f000 fa25 	bl	8002c28 <prvUnlockQueue>

				if (xTaskResumeAll() == pdFALSE) {
 80027de:	f000 fe3f 	bl	8003460 <xTaskResumeAll>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f47f af69 	bne.w	80026bc <xQueueReceive+0x94>
					portYIELD_WITHIN_API()
 80027ea:	4b18      	ldr	r3, [pc, #96]	@ (800284c <xQueueReceive+0x224>)
 80027ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	e75f      	b.n	80026bc <xQueueReceive+0x94>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* The queue contains data again.  Loop back to try and read the
				 * data. */
				prvUnlockQueue(pxQueue);
 80027fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027fe:	f000 fa13 	bl	8002c28 <prvUnlockQueue>
				(void) xTaskResumeAll();
 8002802:	f000 fe2d 	bl	8003460 <xTaskResumeAll>
 8002806:	e759      	b.n	80026bc <xQueueReceive+0x94>
			}
		} else {
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			 * back and attempt to read the data. */
			prvUnlockQueue(pxQueue);
 8002808:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800280a:	f000 fa0d 	bl	8002c28 <prvUnlockQueue>
			(void) xTaskResumeAll();
 800280e:	f000 fe27 	bl	8003460 <xTaskResumeAll>

			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 8002812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002814:	f000 fa5a 	bl	8002ccc <prvIsQueueEmpty>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	f43f af4e 	beq.w	80026bc <xQueueReceive+0x94>
				traceQUEUE_RECEIVE_FAILED(pxQueue);
 8002820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002822:	4618      	mov	r0, r3
 8002824:	f004 ff9e 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002828:	4604      	mov	r4, r0
 800282a:	2000      	movs	r0, #0
 800282c:	f004 ff9a 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2101      	movs	r1, #1
 8002836:	9100      	str	r1, [sp, #0]
 8002838:	4621      	mov	r1, r4
 800283a:	205c      	movs	r0, #92	@ 0x5c
 800283c:	f004 fada 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002840:	2300      	movs	r3, #0
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002842:	4618      	mov	r0, r3
 8002844:	3734      	adds	r7, #52	@ 0x34
 8002846:	46bd      	mov	sp, r7
 8002848:	bd90      	pop	{r4, r7, pc}
 800284a:	bf00      	nop
 800284c:	e000ed04 	.word	0xe000ed04

08002850 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake(QueueHandle_t xQueue, TickType_t xTicksToWait) {
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b08f      	sub	sp, #60	@ 0x3c
 8002854:	af02      	add	r7, sp, #8
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
	BaseType_t xEntryTimeSet = pdFALSE;
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = xQueue;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24

#if ( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT((pxQueue));
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <xQueueSemaphoreTake+0x34>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	61bb      	str	r3, [r7, #24]
    }
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	 * 0. */
	configASSERT(pxQueue->uxItemSize == 0);
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <xQueueSemaphoreTake+0x54>
        __asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	617b      	str	r3, [r7, #20]
    }
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 80028a4:	f001 fb0a 	bl	8003ebc <xTaskGetSchedulerState>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <xQueueSemaphoreTake+0x64>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <xQueueSemaphoreTake+0x68>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <xQueueSemaphoreTake+0x6a>
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <xQueueSemaphoreTake+0x86>
        __asm volatile
 80028be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c2:	f383 8811 	msr	BASEPRI, r3
 80028c6:	f3bf 8f6f 	isb	sy
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	613b      	str	r3, [r7, #16]
    }
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	e7fd      	b.n	80028d2 <xQueueSemaphoreTake+0x82>

	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	 * statements within the function itself.  This is done in the interest
	 * of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
 80028d6:	f002 f9a1 	bl	8004c1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			 * number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028de:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			 * must be the highest priority task wanting to access the queue. */
			if (uxSemaphoreCount > (UBaseType_t) 0) {
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d048      	beq.n	8002978 <xQueueSemaphoreTake+0x128>
				traceQUEUE_RECEIVE(pxQueue);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 ff3b 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 80028ee:	4604      	mov	r4, r0
 80028f0:	2000      	movs	r0, #0
 80028f2:	f004 ff37 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 80028f6:	4602      	mov	r2, r0
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	9100      	str	r1, [sp, #0]
 80028fe:	4621      	mov	r1, r4
 8002900:	205c      	movs	r0, #92	@ 0x5c
 8002902:	f004 fa77 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				 * messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t) 1;
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	639a      	str	r2, [r3, #56]	@ 0x38

#if ( configUSE_MUTEXES == 1 )
				{
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <xQueueSemaphoreTake+0xd0>
						/* Record the information required to implement
						 * priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder =
								pvTaskIncrementMutexHeldCount();
 8002916:	f001 fcaf 	bl	8004278 <pvTaskIncrementMutexHeldCount>
 800291a:	4602      	mov	r2, r0
						pxQueue->u.xSemaphore.xMutexHolder =
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	609a      	str	r2, [r3, #8]
				}
#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				 * semaphore, and if so, unblock the highest priority such task. */
				if ( listLIST_IS_EMPTY(
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00f      	beq.n	8002948 <xQueueSemaphoreTake+0xf8>
						&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	3310      	adds	r3, #16
					if (xTaskRemoveFromEventList(
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f8af 	bl	8003a90 <xTaskRemoveFromEventList>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <xQueueSemaphoreTake+0xf8>
						queueYIELD_IF_USING_PREEMPTION();
 8002938:	4b66      	ldr	r3, [pc, #408]	@ (8002ad4 <xQueueSemaphoreTake+0x284>)
 800293a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	f3bf 8f6f 	isb	sy
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002948:	f002 f99a 	bl	8004c80 <vPortExitCritical>
#ifdef CPP
				if (uxTaskPriorityGet( NULL ) <= xQueue->uxQueuePriority)
 800294c:	2000      	movs	r0, #0
 800294e:	f000 fc3b 	bl	80031c8 <uxTaskPriorityGet>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002958:	429a      	cmp	r2, r3
 800295a:	d80b      	bhi.n	8002974 <xQueueSemaphoreTake+0x124>
				{
					xQueue->uxQueuePrevPriority = uxTaskPriorityGet( NULL );
 800295c:	2000      	movs	r0, #0
 800295e:	f000 fc33 	bl	80031c8 <uxTaskPriorityGet>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
					vTaskPrioritySet( NULL, xQueue->uxQueuePriority);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296c:	4619      	mov	r1, r3
 800296e:	2000      	movs	r0, #0
 8002970:	f000 fc44 	bl	80031fc <vTaskPrioritySet>
				}
#endif
				return pdPASS;
 8002974:	2301      	movs	r3, #1
 8002976:	e0a9      	b.n	8002acc <xQueueSemaphoreTake+0x27c>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d113      	bne.n	80029a6 <xQueueSemaphoreTake+0x156>
					/* The semaphore count was 0 and no block time is specified
					 * (or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800297e:	f002 f97f 	bl	8004c80 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED(pxQueue);
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	4618      	mov	r0, r3
 8002986:	f004 feed 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 800298a:	4604      	mov	r4, r0
 800298c:	2000      	movs	r0, #0
 800298e:	f004 fee9 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2101      	movs	r1, #1
 8002998:	9100      	str	r1, [sp, #0]
 800299a:	4621      	mov	r1, r4
 800299c:	205c      	movs	r0, #92	@ 0x5c
 800299e:	f004 fa29 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e092      	b.n	8002acc <xQueueSemaphoreTake+0x27c>
				} else if (xEntryTimeSet == pdFALSE) {
 80029a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <xQueueSemaphoreTake+0x16a>
					/* The semaphore count was 0 and a block time was specified
					 * so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 f947 	bl	8003c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029ba:	f002 f961 	bl	8004c80 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		 * now the critical section has been exited. */

		vTaskSuspendAll();
 80029be:	f000 fd41 	bl	8003444 <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 80029c2:	f002 f92b 	bl	8004c1c <vPortEnterCritical>
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029d2:	d103      	bne.n	80029dc <xQueueSemaphoreTake+0x18c>
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029e8:	d103      	bne.n	80029f2 <xQueueSemaphoreTake+0x1a2>
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f2:	f002 f945 	bl	8004c80 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 80029f6:	463a      	mov	r2, r7
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f936 	bl	8003c70 <xTaskCheckForTimeOut>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d132      	bne.n	8002a70 <xQueueSemaphoreTake+0x220>
			/* A block time is specified and not expired.  If the semaphore
			 * count is 0 then enter the Blocked state to wait for a semaphore to
			 * become available.  As semaphores are implemented with queues the
			 * queue being empty is equivalent to the semaphore count being 0. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 8002a0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a0c:	f000 f95e 	bl	8002ccc <prvIsQueueEmpty>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d026      	beq.n	8002a64 <xQueueSemaphoreTake+0x214>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

#if ( configUSE_MUTEXES == 1 )
				{
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <xQueueSemaphoreTake+0x1e2>
						taskENTER_CRITICAL();
 8002a1e:	f002 f8fd 	bl	8004c1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit(
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fa66 	bl	8003ef8 <xTaskPriorityInherit>
 8002a2c:	62b8      	str	r0, [r7, #40]	@ 0x28
									pxQueue->u.xSemaphore.xMutexHolder);
						}
						taskEXIT_CRITICAL();
 8002a2e:	f002 f927 	bl	8004c80 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
#endif /* if ( configUSE_MUTEXES == 1 ) */

				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive),
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	3324      	adds	r3, #36	@ 0x24
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 ffb8 	bl	80039b0 <vTaskPlaceOnEventList>
						xTicksToWait);
				prvUnlockQueue(pxQueue);
 8002a40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a42:	f000 f8f1 	bl	8002c28 <prvUnlockQueue>

				if (xTaskResumeAll() == pdFALSE) {
 8002a46:	f000 fd0b 	bl	8003460 <xTaskResumeAll>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af42 	bne.w	80028d6 <xQueueSemaphoreTake+0x86>
					portYIELD_WITHIN_API()
 8002a52:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <xQueueSemaphoreTake+0x284>)
 8002a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	e738      	b.n	80028d6 <xQueueSemaphoreTake+0x86>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* There was no timeout and the semaphore count was not 0, so
				 * attempt to take the semaphore again. */
				prvUnlockQueue(pxQueue);
 8002a64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a66:	f000 f8df 	bl	8002c28 <prvUnlockQueue>
				(void) xTaskResumeAll();
 8002a6a:	f000 fcf9 	bl	8003460 <xTaskResumeAll>
 8002a6e:	e732      	b.n	80028d6 <xQueueSemaphoreTake+0x86>
			}
		} else {
			/* Timed out. */
			prvUnlockQueue(pxQueue);
 8002a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a72:	f000 f8d9 	bl	8002c28 <prvUnlockQueue>
			(void) xTaskResumeAll();
 8002a76:	f000 fcf3 	bl	8003460 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			 * expired.  Otherwise return to attempt to take the semaphore that is
			 * known to be available.  As semaphores are implemented by queues the
			 * queue being empty is equivalent to the semaphore count being 0. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 8002a7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a7c:	f000 f926 	bl	8002ccc <prvIsQueueEmpty>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f43f af27 	beq.w	80028d6 <xQueueSemaphoreTake+0x86>
#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					 * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					 * test the mutex type again to check it is actually a mutex. */
					if (xInheritanceOccurred != pdFALSE) {
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <xQueueSemaphoreTake+0x25a>
						taskENTER_CRITICAL();
 8002a8e:	f002 f8c5 	bl	8004c1c <vPortEnterCritical>
							 * task to inherit this task's priority.  Now this task
							 * has timed out the priority should be disinherited
							 * again, but only as low as the next highest priority
							 * task that is waiting for the same mutex. */
							uxHighestWaitingPriority =
									prvGetDisinheritPriorityAfterTimeout(
 8002a92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a94:	f000 f820 	bl	8002ad8 <prvGetDisinheritPriorityAfterTimeout>
 8002a98:	61f8      	str	r0, [r7, #28]
											pxQueue);
							vTaskPriorityDisinheritAfterTimeout(
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	69f9      	ldr	r1, [r7, #28]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 fb25 	bl	80040f0 <vTaskPriorityDisinheritAfterTimeout>
									pxQueue->u.xSemaphore.xMutexHolder,
									uxHighestWaitingPriority);
						}
						taskEXIT_CRITICAL();
 8002aa6:	f002 f8eb 	bl	8004c80 <vPortExitCritical>
					}
				}
#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED(pxQueue);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 fe59 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f004 fe55 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002aba:	4602      	mov	r2, r0
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	9100      	str	r1, [sp, #0]
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	205c      	movs	r0, #92	@ 0x5c
 8002ac6:	f004 f995 	bl	8006df4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002aca:	2300      	movs	r3, #0
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3734      	adds	r7, #52	@ 0x34
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

static UBaseType_t prvGetDisinheritPriorityAfterTimeout(
		const Queue_t *const pxQueue) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	 * priority, but the waiting task times out, then the holder should
	 * disinherit the priority - but only down to the highest priority of any
	 * other tasks that are waiting for the same mutex.  For this purpose,
	 * return the priority of the highest priority task that is waiting for the
	 * mutex. */
	if ( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U) {
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		uxHighestPriorityOfWaitingTasks = (UBaseType_t) configMAX_PRIORITIES
				- (UBaseType_t) listGET_ITEM_VALUE_OF_HEAD_ENTRY(
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	681b      	ldr	r3, [r3, #0]
		uxHighestPriorityOfWaitingTasks = (UBaseType_t) configMAX_PRIORITIES
 8002aee:	f1c3 0305 	rsb	r3, r3, #5
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e001      	b.n	8002afa <prvGetDisinheritPriorityAfterTimeout+0x22>
						&(pxQueue->xTasksWaitingToReceive));
	} else {
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
	}

	return uxHighestPriorityOfWaitingTasks;
 8002afa:	68fb      	ldr	r3, [r7, #12]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t *const pxQueue,
		const void *pvItemToQueue, const BaseType_t xPosition) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
	UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	613b      	str	r3, [r7, #16]

	if (pxQueue->uxItemSize == (UBaseType_t) 0) {
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <prvCopyDataToQueue+0x3a>
#if ( configUSE_MUTEXES == 1 )
		{
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d14d      	bne.n	8002bca <prvCopyDataToQueue+0xc2>
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit(
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 fa5a 	bl	8003fec <xTaskPriorityDisinherit>
 8002b38:	6178      	str	r0, [r7, #20]
						pxQueue->u.xSemaphore.xMutexHolder);
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e043      	b.n	8002bca <prvCopyDataToQueue+0xc2>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_MUTEXES */
	} else if (xPosition == queueSEND_TO_BACK) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d119      	bne.n	8002b7c <prvCopyDataToQueue+0x74>
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6858      	ldr	r0, [r3, #4]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 8002b50:	461a      	mov	r2, r3
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	f004 fff0 	bl	8007b38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]

		if (pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d32b      	bcc.n	8002bca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	e026      	b.n	8002bca <prvCopyDataToQueue+0xc2>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		(void) memcpy((void*) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	68d8      	ldr	r0, [r3, #12]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		(void) memcpy((void*) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue,
 8002b84:	461a      	mov	r2, r3
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	f004 ffd6 	bl	8007b38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	425b      	negs	r3, r3
 8002b96:	441a      	add	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	60da      	str	r2, [r3, #12]

		if (pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d207      	bcs.n	8002bb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689a      	ldr	r2, [r3, #8]
					- pxQueue->uxItemSize);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	425b      	negs	r3, r3
 8002bb2:	441a      	add	r2, r3
			pxQueue->u.xQueue.pcReadFrom = (pxQueue->u.xQueue.pcTail
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		if (xPosition == queueOVERWRITE) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d105      	bne.n	8002bca <prvCopyDataToQueue+0xc2>
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <prvCopyDataToQueue+0xc2>
				/* An item is not being added but overwritten, so subtract
				 * one from the recorded number of items in the queue so when
				 * one is added again below the number of recorded items remains
				 * correct. */
				--uxMessagesWaiting;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t) 1;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002bd2:	697b      	ldr	r3, [r7, #20]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
	if (pxQueue->uxItemSize != (UBaseType_t) 0) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <prvCopyDataFromQueue+0x44>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	441a      	add	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]

		if (pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d303      	bcc.n	8002c10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.xQueue.pcReadFrom,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68d9      	ldr	r1, [r3, #12]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.xQueue.pcReadFrom,
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6838      	ldr	r0, [r7, #0]
 8002c1c:	f004 ff8c 	bl	8007b38 <memcpy>
	}
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t *const pxQueue) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	 * removed from the queue while the queue was locked.  When a queue is
	 * locked items can be added or removed, but the event lists cannot be
	 * updated. */
	taskENTER_CRITICAL();
 8002c30:	f001 fff4 	bl	8004c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8002c3c:	e011      	b.n	8002c62 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				 * the pending ready list as the scheduler is still suspended. */
				if ( listLIST_IS_EMPTY(
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d012      	beq.n	8002c6c <prvUnlockQueue+0x44>
						&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3324      	adds	r3, #36	@ 0x24
					if (xTaskRemoveFromEventList(
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 ff20 	bl	8003a90 <xTaskRemoveFromEventList>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <prvUnlockQueue+0x32>
						/* The task waiting has a higher priority so record that
						 * a context switch is required. */
						vTaskMissedYield();
 8002c56:	f001 f873 	bl	8003d40 <vTaskMissedYield>
					break;
				}
			}
#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73fb      	strb	r3, [r7, #15]
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dce9      	bgt.n	8002c3e <prvUnlockQueue+0x16>
 8002c6a:	e000      	b.n	8002c6e <prvUnlockQueue+0x46>
					break;
 8002c6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	22ff      	movs	r2, #255	@ 0xff
 8002c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002c76:	f002 f803 	bl	8004c80 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c7a:	f001 ffcf 	bl	8004c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c84:	73bb      	strb	r3, [r7, #14]

		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8002c86:	e011      	b.n	8002cac <prvUnlockQueue+0x84>
			if ( listLIST_IS_EMPTY(
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <prvUnlockQueue+0x8e>
					&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
				if (xTaskRemoveFromEventList(
						&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3310      	adds	r3, #16
				if (xTaskRemoveFromEventList(
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fefb 	bl	8003a90 <xTaskRemoveFromEventList>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <prvUnlockQueue+0x7c>
					vTaskMissedYield();
 8002ca0:	f001 f84e 	bl	8003d40 <vTaskMissedYield>
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	73bb      	strb	r3, [r7, #14]
		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8002cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dce9      	bgt.n	8002c88 <prvUnlockQueue+0x60>
 8002cb4:	e000      	b.n	8002cb8 <prvUnlockQueue+0x90>
			} else {
				break;
 8002cb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	22ff      	movs	r2, #255	@ 0xff
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002cc0:	f001 ffde 	bl	8004c80 <vPortExitCritical>
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cd4:	f001 ffa2 	bl	8004c1c <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <prvIsQueueEmpty+0x1a>
			xReturn = pdTRUE;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	e001      	b.n	8002cea <prvIsQueueEmpty+0x1e>
		} else {
			xReturn = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cea:	f001 ffc9 	bl	8004c80 <vPortExitCritical>

	return xReturn;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvIsQueueFull>:

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d00:	f001 ff8c 	bl	8004c1c <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d102      	bne.n	8002d16 <prvIsQueueFull+0x1e>
			xReturn = pdTRUE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e001      	b.n	8002d1a <prvIsQueueFull+0x22>
		} else {
			xReturn = pdFALSE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d1a:	f001 ffb1 	bl	8004c80 <vPortExitCritical>

	return xReturn;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

void vQueueAddToRegistry(QueueHandle_t xQueue, const char *pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;
	QueueRegistryItem_t *pxEntryToWrite = NULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]

	configASSERT(xQueue);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10b      	bne.n	8002d54 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	60fb      	str	r3, [r7, #12]
    }
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <vQueueAddToRegistry+0x28>

	if (pcQueueName != NULL) {
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <vQueueAddToRegistry+0x7c>
		/* See if there is an empty space in the registry.  A NULL name denotes
		 * a free slot. */
		for (ux = (UBaseType_t) 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e01e      	b.n	8002d9e <vQueueAddToRegistry+0x76>
				ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE; ux++) {
			/* Replace an existing entry if the queue is already in the registry. */
			if (xQueue == xQueueRegistry[ux].xHandle) {
 8002d60:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <vQueueAddToRegistry+0xac>)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d105      	bne.n	8002d7c <vQueueAddToRegistry+0x54>
				pxEntryToWrite = &(xQueueRegistry[ux]);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <vQueueAddToRegistry+0xac>)
 8002d76:	4413      	add	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
				break;
 8002d7a:	e013      	b.n	8002da4 <vQueueAddToRegistry+0x7c>
			}
			/* Otherwise, store in the next empty location */
			else if ((pxEntryToWrite == NULL)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <vQueueAddToRegistry+0x70>
					&& (xQueueRegistry[ux].pcQueueName == NULL)) {
 8002d82:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <vQueueAddToRegistry+0xac>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <vQueueAddToRegistry+0x70>
				pxEntryToWrite = &(xQueueRegistry[ux]);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4a10      	ldr	r2, [pc, #64]	@ (8002dd4 <vQueueAddToRegistry+0xac>)
 8002d94:	4413      	add	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
				ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE; ux++) {
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b07      	cmp	r3, #7
 8002da2:	d9dd      	bls.n	8002d60 <vQueueAddToRegistry+0x38>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}

	if (pxEntryToWrite != NULL) {
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00f      	beq.n	8002dca <vQueueAddToRegistry+0xa2>
		/* Store the information on this queue. */
		pxEntryToWrite->pcQueueName = pcQueueName;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	601a      	str	r2, [r3, #0]
		pxEntryToWrite->xHandle = xQueue;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]

		traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f004 fcd3 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	2071      	movs	r0, #113	@ 0x71
 8002dc6:	f003 ff45 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32x2>
	}
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000098 	.word	0x20000098

08002dd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue,
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	Queue_t *const pxQueue = xQueue;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	617b      	str	r3, [r7, #20]
	 *  will not actually cause the task to block, just place it on a blocked
	 *  list.  It will not block until the scheduler is unlocked - at which
	 *  time a yield will be performed.  If an item is added to the queue while
	 *  the queue is locked, and the calling task blocks on the queue, then the
	 *  calling task will be immediately unblocked when the queue is unlocked. */
	prvLockQueue(pxQueue);
 8002de8:	f001 ff18 	bl	8004c1c <vPortEnterCritical>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002df8:	d103      	bne.n	8002e02 <vQueueWaitForMessageRestricted+0x2a>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e08:	b25b      	sxtb	r3, r3
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e0e:	d103      	bne.n	8002e18 <vQueueWaitForMessageRestricted+0x40>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e18:	f001 ff32 	bl	8004c80 <vPortExitCritical>

	if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0U) {
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <vQueueWaitForMessageRestricted+0x5a>
		/* There is nothing in the queue, block for the specified period. */
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive),
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3324      	adds	r3, #36	@ 0x24
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fde5 	bl	80039fc <vTaskPlaceOnEventListRestricted>
				xTicksToWait, xWaitIndefinitely);
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	prvUnlockQueue(pxQueue);
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff fef8 	bl	8002c28 <prvUnlockQueue>
}
 8002e38:	bf00      	nop
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 f813 	bl	8004e80 <pvPortMalloc>
 8002e5a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d013      	beq.n	8002e8a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e62:	2058      	movs	r0, #88	@ 0x58
 8002e64:	f002 f80c 	bl	8004e80 <pvPortMalloc>
 8002e68:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002e70:	2258      	movs	r2, #88	@ 0x58
 8002e72:	2100      	movs	r1, #0
 8002e74:	69f8      	ldr	r0, [r7, #28]
 8002e76:	f004 fe33 	bl	8007ae0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e80:	e005      	b.n	8002e8e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f002 f8b8 	bl	8004ff8 <vPortFree>
 8002e88:	e001      	b.n	8002e8e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9303      	str	r3, [sp, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f80e 	bl	8002ecc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002eb0:	69f8      	ldr	r0, [r7, #28]
 8002eb2:	f000 f89b 	bl	8002fec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e002      	b.n	8002ec2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ec0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
    }
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	21a5      	movs	r1, #165	@ 0xa5
 8002ee6:	f004 fdfb 	bl	8007ae0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	617b      	str	r3, [r7, #20]
    }
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	e7fd      	b.n	8002f22 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01e      	beq.n	8002f6a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	e012      	b.n	8002f58 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	7819      	ldrb	r1, [r3, #0]
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3334      	adds	r3, #52	@ 0x34
 8002f42:	460a      	mov	r2, r1
 8002f44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	d9e9      	bls.n	8002f32 <prvInitialiseNewTask+0x66>
 8002f5e:	e000      	b.n	8002f62 <prvInitialiseNewTask+0x96>
            {
                break;
 8002f60:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d90b      	bls.n	8002f88 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	613b      	str	r3, [r7, #16]
    }
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d901      	bls.n	8002f92 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f9c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f82e 	bl	8002004 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	3318      	adds	r3, #24
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f829 	bl	8002004 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	f1c3 0205 	rsb	r2, r3, #5
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	69b8      	ldr	r0, [r7, #24]
 8002fce:	f001 fc75 	bl	80048bc <pxPortInitialiseStack>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fe4:	bf00      	nop
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002fec:	b5b0      	push	{r4, r5, r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ff4:	f001 fe12 	bl	8004c1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8003138 <prvAddNewTaskToReadyList+0x14c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a4e      	ldr	r2, [pc, #312]	@ (8003138 <prvAddNewTaskToReadyList+0x14c>)
 8003000:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003002:	4b4e      	ldr	r3, [pc, #312]	@ (800313c <prvAddNewTaskToReadyList+0x150>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800300a:	4a4c      	ldr	r2, [pc, #304]	@ (800313c <prvAddNewTaskToReadyList+0x150>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003010:	4b49      	ldr	r3, [pc, #292]	@ (8003138 <prvAddNewTaskToReadyList+0x14c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d110      	bne.n	800303a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003018:	f000 feb6 	bl	8003d88 <prvInitialiseTaskLists>
 800301c:	e00d      	b.n	800303a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800301e:	4b48      	ldr	r3, [pc, #288]	@ (8003140 <prvAddNewTaskToReadyList+0x154>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003026:	4b45      	ldr	r3, [pc, #276]	@ (800313c <prvAddNewTaskToReadyList+0x150>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	429a      	cmp	r2, r3
 8003032:	d802      	bhi.n	800303a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003034:	4a41      	ldr	r2, [pc, #260]	@ (800313c <prvAddNewTaskToReadyList+0x150>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800303a:	4b42      	ldr	r3, [pc, #264]	@ (8003144 <prvAddNewTaskToReadyList+0x158>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	4a40      	ldr	r2, [pc, #256]	@ (8003144 <prvAddNewTaskToReadyList+0x158>)
 8003042:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003044:	4b3f      	ldr	r3, [pc, #252]	@ (8003144 <prvAddNewTaskToReadyList+0x158>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <prvAddNewTaskToReadyList+0x94>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fabf 	bl	80075d8 <SEGGER_SYSVIEW_OnTaskCreate>
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	461d      	mov	r5, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461c      	mov	r4, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	1ae3      	subs	r3, r4, r3
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	462b      	mov	r3, r5
 800307c:	f002 f95c 	bl	8005338 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4618      	mov	r0, r3
 8003084:	f004 fb2c 	bl	80076e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	4b2d      	ldr	r3, [pc, #180]	@ (8003148 <prvAddNewTaskToReadyList+0x15c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	4a2c      	ldr	r2, [pc, #176]	@ (8003148 <prvAddNewTaskToReadyList+0x15c>)
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309e:	492b      	ldr	r1, [pc, #172]	@ (800314c <prvAddNewTaskToReadyList+0x160>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3304      	adds	r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	3204      	adds	r2, #4
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4a1b      	ldr	r2, [pc, #108]	@ (800314c <prvAddNewTaskToReadyList+0x160>)
 80030de:	441a      	add	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	615a      	str	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e8:	4918      	ldr	r1, [pc, #96]	@ (800314c <prvAddNewTaskToReadyList+0x160>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1c59      	adds	r1, r3, #1
 80030f8:	4814      	ldr	r0, [pc, #80]	@ (800314c <prvAddNewTaskToReadyList+0x160>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4403      	add	r3, r0
 8003104:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003106:	f001 fdbb 	bl	8004c80 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800310a:	4b0d      	ldr	r3, [pc, #52]	@ (8003140 <prvAddNewTaskToReadyList+0x154>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003112:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <prvAddNewTaskToReadyList+0x150>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	429a      	cmp	r2, r3
 800311e:	d207      	bcs.n	8003130 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <prvAddNewTaskToReadyList+0x164>)
 8003122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bdb0      	pop	{r4, r5, r7, pc}
 8003138:	200001b0 	.word	0x200001b0
 800313c:	200000d8 	.word	0x200000d8
 8003140:	200001bc 	.word	0x200001bc
 8003144:	200001cc 	.word	0x200001cc
 8003148:	200001b8 	.word	0x200001b8
 800314c:	200000dc 	.word	0x200000dc
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01c      	beq.n	80031a0 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <vTaskDelay+0x6c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <vTaskDelay+0x32>
        __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	60bb      	str	r3, [r7, #8]
    }
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003186:	f000 f95d 	bl	8003444 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	2023      	movs	r0, #35	@ 0x23
 800318e:	f003 fd25 	bl	8006bdc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003192:	2100      	movs	r1, #0
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f001 f883 	bl	80042a0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800319a:	f000 f961 	bl	8003460 <xTaskResumeAll>
 800319e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d107      	bne.n	80031b6 <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <vTaskDelay+0x70>)
 80031a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200001d8 	.word	0x200001d8
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 80031d0:	f001 fd24 	bl	8004c1c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <uxTaskPriorityGet+0x18>
 80031da:	4b07      	ldr	r3, [pc, #28]	@ (80031f8 <uxTaskPriorityGet+0x30>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	e000      	b.n	80031e2 <uxTaskPriorityGet+0x1a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 80031ea:	f001 fd49 	bl	8004c80 <vPortExitCritical>

        return uxReturn;
 80031ee:	68bb      	ldr	r3, [r7, #8]
    }
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200000d8 	.word	0x200000d8

080031fc <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b04      	cmp	r3, #4
 800320e:	d90b      	bls.n	8003228 <vTaskPrioritySet+0x2c>
        __asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	60fb      	str	r3, [r7, #12]
    }
 8003222:	bf00      	nop
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	2b04      	cmp	r3, #4
 800322c:	d901      	bls.n	8003232 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800322e:	2304      	movs	r3, #4
 8003230:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003232:	f001 fcf3 	bl	8004c1c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <vTaskPrioritySet+0x46>
 800323c:	4b4c      	ldr	r3, [pc, #304]	@ (8003370 <vTaskPrioritySet+0x174>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	e000      	b.n	8003244 <vTaskPrioritySet+0x48>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4618      	mov	r0, r3
 800324a:	f004 fa8b 	bl	8007764 <SEGGER_SYSVIEW_ShrinkId>
 800324e:	4603      	mov	r3, r0
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	2028      	movs	r0, #40	@ 0x28
 8003256:	f003 fcfd 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32x2>
 800325a:	69b8      	ldr	r0, [r7, #24]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	461a      	mov	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	f002 f8ca 	bl	8005408 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003278:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d06f      	beq.n	8003362 <vTaskPrioritySet+0x166>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	429a      	cmp	r2, r3
 8003288:	d90d      	bls.n	80032a6 <vTaskPrioritySet+0xaa>
                {
                    if( pxTCB != pxCurrentTCB )
 800328a:	4b39      	ldr	r3, [pc, #228]	@ (8003370 <vTaskPrioritySet+0x174>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	d00f      	beq.n	80032b4 <vTaskPrioritySet+0xb8>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003294:	4b36      	ldr	r3, [pc, #216]	@ (8003370 <vTaskPrioritySet+0x174>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d309      	bcc.n	80032b4 <vTaskPrioritySet+0xb8>
                        {
                            xYieldRequired = pdTRUE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e006      	b.n	80032b4 <vTaskPrioritySet+0xb8>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 80032a6:	4b32      	ldr	r3, [pc, #200]	@ (8003370 <vTaskPrioritySet+0x174>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d101      	bne.n	80032b4 <vTaskPrioritySet+0xb8>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d102      	bne.n	80032cc <vTaskPrioritySet+0xd0>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db04      	blt.n	80032e4 <vTaskPrioritySet+0xe8>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1c3 0205 	rsb	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6959      	ldr	r1, [r3, #20]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4a20      	ldr	r2, [pc, #128]	@ (8003374 <vTaskPrioritySet+0x178>)
 80032f4:	4413      	add	r3, r2
 80032f6:	4299      	cmp	r1, r3
 80032f8:	d128      	bne.n	800334c <vTaskPrioritySet+0x150>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe feea 	bl	80020d8 <uxListRemove>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <vTaskPrioritySet+0x122>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800330a:	2201      	movs	r2, #1
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	4b18      	ldr	r3, [pc, #96]	@ (8003378 <vTaskPrioritySet+0x17c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4013      	ands	r3, r2
 800331a:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <vTaskPrioritySet+0x17c>)
 800331c:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	2201      	movs	r2, #1
 8003324:	409a      	lsls	r2, r3
 8003326:	4b14      	ldr	r3, [pc, #80]	@ (8003378 <vTaskPrioritySet+0x17c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	4a12      	ldr	r2, [pc, #72]	@ (8003378 <vTaskPrioritySet+0x17c>)
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <vTaskPrioritySet+0x178>)
 800333e:	441a      	add	r2, r3
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f7fe fe69 	bl	800201e <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <vTaskPrioritySet+0x166>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8003352:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <vTaskPrioritySet+0x180>)
 8003354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003362:	f001 fc8d 	bl	8004c80 <vPortExitCritical>
    }
 8003366:	bf00      	nop
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200000d8 	.word	0x200000d8
 8003374:	200000dc 	.word	0x200000dc
 8003378:	200001b8 	.word	0x200001b8
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <vTaskStartScheduler+0xa4>)
 8003388:	9301      	str	r3, [sp, #4]
 800338a:	2300      	movs	r3, #0
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2300      	movs	r3, #0
 8003390:	2282      	movs	r2, #130	@ 0x82
 8003392:	4925      	ldr	r1, [pc, #148]	@ (8003428 <vTaskStartScheduler+0xa8>)
 8003394:	4825      	ldr	r0, [pc, #148]	@ (800342c <vTaskStartScheduler+0xac>)
 8003396:	f7ff fd53 	bl	8002e40 <xTaskCreate>
 800339a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d102      	bne.n	80033a8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80033a2:	f000 fffd 	bl	80043a0 <xTimerCreateTimerTask>
 80033a6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d124      	bne.n	80033f8 <vTaskStartScheduler+0x78>
        __asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	60bb      	str	r3, [r7, #8]
    }
 80033c0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80033c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <vTaskStartScheduler+0xb0>)
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033c8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <vTaskStartScheduler+0xb4>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033d0:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <vTaskStartScheduler+0xb8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80033d6:	4b19      	ldr	r3, [pc, #100]	@ (800343c <vTaskStartScheduler+0xbc>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b12      	ldr	r3, [pc, #72]	@ (8003424 <vTaskStartScheduler+0xa4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d102      	bne.n	80033e8 <vTaskStartScheduler+0x68>
 80033e2:	f004 f8dd 	bl	80075a0 <SEGGER_SYSVIEW_OnIdle>
 80033e6:	e004      	b.n	80033f2 <vTaskStartScheduler+0x72>
 80033e8:	4b14      	ldr	r3, [pc, #80]	@ (800343c <vTaskStartScheduler+0xbc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 f935 	bl	800765c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80033f2:	f001 faef 	bl	80049d4 <xPortStartScheduler>
 80033f6:	e00f      	b.n	8003418 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033fe:	d10b      	bne.n	8003418 <vTaskStartScheduler+0x98>
        __asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	607b      	str	r3, [r7, #4]
    }
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003418:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <vTaskStartScheduler+0xc0>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200001d4 	.word	0x200001d4
 8003428:	08007e30 	.word	0x08007e30
 800342c:	08003d59 	.word	0x08003d59
 8003430:	200001d0 	.word	0x200001d0
 8003434:	200001bc 	.word	0x200001bc
 8003438:	200001b4 	.word	0x200001b4
 800343c:	200000d8 	.word	0x200000d8
 8003440:	2000000c 	.word	0x2000000c

08003444 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <vTaskSuspendAll+0x18>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a03      	ldr	r2, [pc, #12]	@ (800345c <vTaskSuspendAll+0x18>)
 8003450:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	200001d8 	.word	0x200001d8

08003460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800346e:	4b73      	ldr	r3, [pc, #460]	@ (800363c <xTaskResumeAll+0x1dc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <xTaskResumeAll+0x2e>
        __asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	607b      	str	r3, [r7, #4]
    }
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	e7fd      	b.n	800348a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800348e:	f001 fbc5 	bl	8004c1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003492:	4b6a      	ldr	r3, [pc, #424]	@ (800363c <xTaskResumeAll+0x1dc>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3b01      	subs	r3, #1
 8003498:	4a68      	ldr	r2, [pc, #416]	@ (800363c <xTaskResumeAll+0x1dc>)
 800349a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800349c:	4b67      	ldr	r3, [pc, #412]	@ (800363c <xTaskResumeAll+0x1dc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 80c4 	bne.w	800362e <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034a6:	4b66      	ldr	r3, [pc, #408]	@ (8003640 <xTaskResumeAll+0x1e0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80bf 	beq.w	800362e <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034b0:	e08e      	b.n	80035d0 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b2:	4b64      	ldr	r3, [pc, #400]	@ (8003644 <xTaskResumeAll+0x1e4>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	6a12      	ldr	r2, [r2, #32]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	69d2      	ldr	r2, [r2, #28]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3318      	adds	r3, #24
 80034dc:	429a      	cmp	r2, r3
 80034de:	d103      	bne.n	80034e8 <xTaskResumeAll+0x88>
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2200      	movs	r2, #0
 80034ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	68d2      	ldr	r2, [r2, #12]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	6892      	ldr	r2, [r2, #8]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3304      	adds	r3, #4
 800351a:	429a      	cmp	r2, r3
 800351c:	d103      	bne.n	8003526 <xTaskResumeAll+0xc6>
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	1e5a      	subs	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4618      	mov	r0, r3
 800353a:	f004 f8d1 	bl	80076e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003542:	2201      	movs	r2, #1
 8003544:	409a      	lsls	r2, r3
 8003546:	4b40      	ldr	r3, [pc, #256]	@ (8003648 <xTaskResumeAll+0x1e8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	4a3e      	ldr	r2, [pc, #248]	@ (8003648 <xTaskResumeAll+0x1e8>)
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003554:	493d      	ldr	r1, [pc, #244]	@ (800364c <xTaskResumeAll+0x1ec>)
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3304      	adds	r3, #4
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	3204      	adds	r2, #4
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	1d1a      	adds	r2, r3, #4
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4a2e      	ldr	r2, [pc, #184]	@ (800364c <xTaskResumeAll+0x1ec>)
 8003594:	441a      	add	r2, r3
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359e:	492b      	ldr	r1, [pc, #172]	@ (800364c <xTaskResumeAll+0x1ec>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	4827      	ldr	r0, [pc, #156]	@ (800364c <xTaskResumeAll+0x1ec>)
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4403      	add	r3, r0
 80035ba:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <xTaskResumeAll+0x1f0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 80035ca:	4b22      	ldr	r3, [pc, #136]	@ (8003654 <xTaskResumeAll+0x1f4>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003644 <xTaskResumeAll+0x1e4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f47f af6c 	bne.w	80034b2 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035e0:	f000 fc50 	bl	8003e84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003658 <xTaskResumeAll+0x1f8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035f0:	f000 f858 	bl	80036a4 <xTaskIncrementTick>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 80035fa:	4b16      	ldr	r3, [pc, #88]	@ (8003654 <xTaskResumeAll+0x1f4>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3b01      	subs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f1      	bne.n	80035f0 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800360c:	4b12      	ldr	r3, [pc, #72]	@ (8003658 <xTaskResumeAll+0x1f8>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <xTaskResumeAll+0x1f4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800361a:	2301      	movs	r3, #1
 800361c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800361e:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <xTaskResumeAll+0x1fc>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800362e:	f001 fb27 	bl	8004c80 <vPortExitCritical>

    return xAlreadyYielded;
 8003632:	69bb      	ldr	r3, [r7, #24]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200001d8 	.word	0x200001d8
 8003640:	200001b0 	.word	0x200001b0
 8003644:	20000170 	.word	0x20000170
 8003648:	200001b8 	.word	0x200001b8
 800364c:	200000dc 	.word	0x200000dc
 8003650:	200000d8 	.word	0x200000d8
 8003654:	200001c4 	.word	0x200001c4
 8003658:	200001c0 	.word	0x200001c0
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003666:	4b05      	ldr	r3, [pc, #20]	@ (800367c <xTaskGetTickCount+0x1c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	200001b4 	.word	0x200001b4

08003680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003686:	f001 fbb9 	bl	8004dfc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <xTaskGetTickCountFromISR+0x20>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003694:	683b      	ldr	r3, [r7, #0]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200001b4 	.word	0x200001b4

080036a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08a      	sub	sp, #40	@ 0x28
 80036a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ae:	4b80      	ldr	r3, [pc, #512]	@ (80038b0 <xTaskIncrementTick+0x20c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 80f1 	bne.w	800389a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036b8:	4b7e      	ldr	r3, [pc, #504]	@ (80038b4 <xTaskIncrementTick+0x210>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80036c0:	4a7c      	ldr	r2, [pc, #496]	@ (80038b4 <xTaskIncrementTick+0x210>)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d121      	bne.n	8003710 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80036cc:	4b7a      	ldr	r3, [pc, #488]	@ (80038b8 <xTaskIncrementTick+0x214>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <xTaskIncrementTick+0x4a>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	607b      	str	r3, [r7, #4]
    }
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	e7fd      	b.n	80036ea <xTaskIncrementTick+0x46>
 80036ee:	4b72      	ldr	r3, [pc, #456]	@ (80038b8 <xTaskIncrementTick+0x214>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	4b71      	ldr	r3, [pc, #452]	@ (80038bc <xTaskIncrementTick+0x218>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6f      	ldr	r2, [pc, #444]	@ (80038b8 <xTaskIncrementTick+0x214>)
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4a6f      	ldr	r2, [pc, #444]	@ (80038bc <xTaskIncrementTick+0x218>)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b6f      	ldr	r3, [pc, #444]	@ (80038c0 <xTaskIncrementTick+0x21c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a6d      	ldr	r2, [pc, #436]	@ (80038c0 <xTaskIncrementTick+0x21c>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	f000 fbba 	bl	8003e84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003710:	4b6c      	ldr	r3, [pc, #432]	@ (80038c4 <xTaskIncrementTick+0x220>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	429a      	cmp	r2, r3
 8003718:	f0c0 80aa 	bcc.w	8003870 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371c:	4b66      	ldr	r3, [pc, #408]	@ (80038b8 <xTaskIncrementTick+0x214>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d104      	bne.n	8003730 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003726:	4b67      	ldr	r3, [pc, #412]	@ (80038c4 <xTaskIncrementTick+0x220>)
 8003728:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800372c:	601a      	str	r2, [r3, #0]
                    break;
 800372e:	e09f      	b.n	8003870 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003730:	4b61      	ldr	r3, [pc, #388]	@ (80038b8 <xTaskIncrementTick+0x214>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003740:	6a3a      	ldr	r2, [r7, #32]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	d203      	bcs.n	8003750 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003748:	4a5e      	ldr	r2, [pc, #376]	@ (80038c4 <xTaskIncrementTick+0x220>)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800374e:	e08f      	b.n	8003870 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	3304      	adds	r3, #4
 8003772:	429a      	cmp	r2, r3
 8003774:	d103      	bne.n	800377e <xTaskIncrementTick+0xda>
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2200      	movs	r2, #0
 8003782:	615a      	str	r2, [r3, #20]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	1e5a      	subs	r2, r3, #1
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	6a12      	ldr	r2, [r2, #32]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	69d2      	ldr	r2, [r2, #28]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	3318      	adds	r3, #24
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d103      	bne.n	80037c4 <xTaskIncrementTick+0x120>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2200      	movs	r2, #0
 80037c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 ff82 	bl	80076e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	2201      	movs	r2, #1
 80037e2:	409a      	lsls	r2, r3
 80037e4:	4b38      	ldr	r3, [pc, #224]	@ (80038c8 <xTaskIncrementTick+0x224>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	4a37      	ldr	r2, [pc, #220]	@ (80038c8 <xTaskIncrementTick+0x224>)
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f2:	4936      	ldr	r1, [pc, #216]	@ (80038cc <xTaskIncrementTick+0x228>)
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3304      	adds	r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	3204      	adds	r2, #4
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4a26      	ldr	r2, [pc, #152]	@ (80038cc <xTaskIncrementTick+0x228>)
 8003832:	441a      	add	r2, r3
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383c:	4923      	ldr	r1, [pc, #140]	@ (80038cc <xTaskIncrementTick+0x228>)
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1c59      	adds	r1, r3, #1
 800384c:	481f      	ldr	r0, [pc, #124]	@ (80038cc <xTaskIncrementTick+0x228>)
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4403      	add	r3, r0
 8003858:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	4b1c      	ldr	r3, [pc, #112]	@ (80038d0 <xTaskIncrementTick+0x22c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	f67f af59 	bls.w	800371c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800386a:	2301      	movs	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800386e:	e755      	b.n	800371c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003870:	4b17      	ldr	r3, [pc, #92]	@ (80038d0 <xTaskIncrementTick+0x22c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003876:	4915      	ldr	r1, [pc, #84]	@ (80038cc <xTaskIncrementTick+0x228>)
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d901      	bls.n	800388c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800388c:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <xTaskIncrementTick+0x230>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d007      	beq.n	80038a4 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
 8003898:	e004      	b.n	80038a4 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800389a:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <xTaskIncrementTick+0x234>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <xTaskIncrementTick+0x234>)
 80038a2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3728      	adds	r7, #40	@ 0x28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200001d8 	.word	0x200001d8
 80038b4:	200001b4 	.word	0x200001b4
 80038b8:	20000168 	.word	0x20000168
 80038bc:	2000016c 	.word	0x2000016c
 80038c0:	200001c8 	.word	0x200001c8
 80038c4:	200001d0 	.word	0x200001d0
 80038c8:	200001b8 	.word	0x200001b8
 80038cc:	200000dc 	.word	0x200000dc
 80038d0:	200000d8 	.word	0x200000d8
 80038d4:	200001c4 	.word	0x200001c4
 80038d8:	200001c0 	.word	0x200001c0

080038dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <vTaskSwitchContext+0xbc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80038ea:	4b2c      	ldr	r3, [pc, #176]	@ (800399c <vTaskSwitchContext+0xc0>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80038f0:	e04e      	b.n	8003990 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80038f2:	4b2a      	ldr	r3, [pc, #168]	@ (800399c <vTaskSwitchContext+0xc0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038f8:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <vTaskSwitchContext+0xc4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	fab3 f383 	clz	r3, r3
 8003904:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	f1c3 031f 	rsb	r3, r3, #31
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	4925      	ldr	r1, [pc, #148]	@ (80039a4 <vTaskSwitchContext+0xc8>)
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <vTaskSwitchContext+0x5e>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	607b      	str	r3, [r7, #4]
    }
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	e7fd      	b.n	8003936 <vTaskSwitchContext+0x5a>
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a17      	ldr	r2, [pc, #92]	@ (80039a4 <vTaskSwitchContext+0xc8>)
 8003946:	4413      	add	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3308      	adds	r3, #8
 800395c:	429a      	cmp	r2, r3
 800395e:	d104      	bne.n	800396a <vTaskSwitchContext+0x8e>
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a0d      	ldr	r2, [pc, #52]	@ (80039a8 <vTaskSwitchContext+0xcc>)
 8003972:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <vTaskSwitchContext+0xcc>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <vTaskSwitchContext+0xd0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d102      	bne.n	8003986 <vTaskSwitchContext+0xaa>
 8003980:	f003 fe0e 	bl	80075a0 <SEGGER_SYSVIEW_OnIdle>
}
 8003984:	e004      	b.n	8003990 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003986:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <vTaskSwitchContext+0xcc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f003 fe66 	bl	800765c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200001d8 	.word	0x200001d8
 800399c:	200001c4 	.word	0x200001c4
 80039a0:	200001b8 	.word	0x200001b8
 80039a4:	200000dc 	.word	0x200000dc
 80039a8:	200000d8 	.word	0x200000d8
 80039ac:	200001d4 	.word	0x200001d4

080039b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60fb      	str	r3, [r7, #12]
    }
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d8:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <vTaskPlaceOnEventList+0x48>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3318      	adds	r3, #24
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fe fb40 	bl	8002066 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e6:	2101      	movs	r1, #1
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f000 fc59 	bl	80042a0 <prvAddCurrentTaskToDelayedList>
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200000d8 	.word	0x200000d8

080039fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a12:	f383 8811 	msr	BASEPRI, r3
 8003a16:	f3bf 8f6f 	isb	sy
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	613b      	str	r3, [r7, #16]
    }
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	e7fd      	b.n	8003a22 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <vTaskPlaceOnEventListRestricted+0x90>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	61da      	str	r2, [r3, #28]
 8003a34:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <vTaskPlaceOnEventListRestricted+0x90>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	621a      	str	r2, [r3, #32]
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <vTaskPlaceOnEventListRestricted+0x90>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	3218      	adds	r2, #24
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <vTaskPlaceOnEventListRestricted+0x90>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f103 0218 	add.w	r2, r3, #24
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <vTaskPlaceOnEventListRestricted+0x90>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a72:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a74:	2024      	movs	r0, #36	@ 0x24
 8003a76:	f003 f893 	bl	8006ba0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	68b8      	ldr	r0, [r7, #8]
 8003a7e:	f000 fc0f 	bl	80042a0 <prvAddCurrentTaskToDelayedList>
    }
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200000d8 	.word	0x200000d8

08003a90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	@ 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60fb      	str	r3, [r7, #12]
    }
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	6a12      	ldr	r2, [r2, #32]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	69d2      	ldr	r2, [r2, #28]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	3318      	adds	r3, #24
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d103      	bne.n	8003aec <xTaskRemoveFromEventList+0x5c>
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003afc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <xTaskRemoveFromEventList+0x19c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d162      	bne.n	8003bca <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	6a3a      	ldr	r2, [r7, #32]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	3304      	adds	r3, #4
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d103      	bne.n	8003b32 <xTaskRemoveFromEventList+0xa2>
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	1e5a      	subs	r2, r3, #1
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fdcb 	bl	80076e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <xTaskRemoveFromEventList+0x1a0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	4a35      	ldr	r2, [pc, #212]	@ (8003c30 <xTaskRemoveFromEventList+0x1a0>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b60:	4934      	ldr	r1, [pc, #208]	@ (8003c34 <xTaskRemoveFromEventList+0x1a4>)
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	3204      	adds	r2, #4
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	1d1a      	adds	r2, r3, #4
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4a25      	ldr	r2, [pc, #148]	@ (8003c34 <xTaskRemoveFromEventList+0x1a4>)
 8003ba0:	441a      	add	r2, r3
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	615a      	str	r2, [r3, #20]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003baa:	4922      	ldr	r1, [pc, #136]	@ (8003c34 <xTaskRemoveFromEventList+0x1a4>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	481e      	ldr	r0, [pc, #120]	@ (8003c34 <xTaskRemoveFromEventList+0x1a4>)
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4403      	add	r3, r0
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	e01b      	b.n	8003c02 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bca:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <xTaskRemoveFromEventList+0x1a8>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	61da      	str	r2, [r3, #28]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	621a      	str	r2, [r3, #32]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	3218      	adds	r2, #24
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	f103 0218 	add.w	r2, r3, #24
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	609a      	str	r2, [r3, #8]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	4a10      	ldr	r2, [pc, #64]	@ (8003c38 <xTaskRemoveFromEventList+0x1a8>)
 8003bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c38 <xTaskRemoveFromEventList+0x1a8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8003c38 <xTaskRemoveFromEventList+0x1a8>)
 8003c00:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	4b0d      	ldr	r3, [pc, #52]	@ (8003c3c <xTaskRemoveFromEventList+0x1ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d905      	bls.n	8003c1c <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <xTaskRemoveFromEventList+0x1b0>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e001      	b.n	8003c20 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	@ 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200001d8 	.word	0x200001d8
 8003c30:	200001b8 	.word	0x200001b8
 8003c34:	200000dc 	.word	0x200000dc
 8003c38:	20000170 	.word	0x20000170
 8003c3c:	200000d8 	.word	0x200000d8
 8003c40:	200001c4 	.word	0x200001c4

08003c44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <vTaskInternalSetTimeOutState+0x24>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003c54:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <vTaskInternalSetTimeOutState+0x28>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	605a      	str	r2, [r3, #4]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	200001c8 	.word	0x200001c8
 8003c6c:	200001b4 	.word	0x200001b4

08003c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	613b      	str	r3, [r7, #16]
    }
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	60fb      	str	r3, [r7, #12]
    }
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003cb6:	f000 ffb1 	bl	8004c1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003cba:	4b1f      	ldr	r3, [pc, #124]	@ (8003d38 <xTaskCheckForTimeOut+0xc8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd2:	d102      	bne.n	8003cda <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	e026      	b.n	8003d28 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b17      	ldr	r3, [pc, #92]	@ (8003d3c <xTaskCheckForTimeOut+0xcc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d00a      	beq.n	8003cfc <xTaskCheckForTimeOut+0x8c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d305      	bcc.n	8003cfc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e015      	b.n	8003d28 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d20b      	bcs.n	8003d1e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad2      	subs	r2, r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ff96 	bl	8003c44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e004      	b.n	8003d28 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003d24:	2301      	movs	r3, #1
 8003d26:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003d28:	f000 ffaa 	bl	8004c80 <vPortExitCritical>

    return xReturn;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200001b4 	.word	0x200001b4
 8003d3c:	200001c8 	.word	0x200001c8

08003d40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <vTaskMissedYield+0x14>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	200001c4 	.word	0x200001c4

08003d58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003d60:	f000 f852 	bl	8003e08 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <prvIdleTask+0x28>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d9f9      	bls.n	8003d60 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003d6c:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <prvIdleTask+0x2c>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d7c:	e7f0      	b.n	8003d60 <prvIdleTask+0x8>
 8003d7e:	bf00      	nop
 8003d80:	200000dc 	.word	0x200000dc
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d8e:	2300      	movs	r3, #0
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	e00c      	b.n	8003dae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <prvInitialiseTaskLists+0x60>)
 8003da0:	4413      	add	r3, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe f90e 	bl	8001fc4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3301      	adds	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d9ef      	bls.n	8003d94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003db4:	480d      	ldr	r0, [pc, #52]	@ (8003dec <prvInitialiseTaskLists+0x64>)
 8003db6:	f7fe f905 	bl	8001fc4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003dba:	480d      	ldr	r0, [pc, #52]	@ (8003df0 <prvInitialiseTaskLists+0x68>)
 8003dbc:	f7fe f902 	bl	8001fc4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003dc0:	480c      	ldr	r0, [pc, #48]	@ (8003df4 <prvInitialiseTaskLists+0x6c>)
 8003dc2:	f7fe f8ff 	bl	8001fc4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003dc6:	480c      	ldr	r0, [pc, #48]	@ (8003df8 <prvInitialiseTaskLists+0x70>)
 8003dc8:	f7fe f8fc 	bl	8001fc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003dcc:	480b      	ldr	r0, [pc, #44]	@ (8003dfc <prvInitialiseTaskLists+0x74>)
 8003dce:	f7fe f8f9 	bl	8001fc4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <prvInitialiseTaskLists+0x78>)
 8003dd4:	4a05      	ldr	r2, [pc, #20]	@ (8003dec <prvInitialiseTaskLists+0x64>)
 8003dd6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <prvInitialiseTaskLists+0x7c>)
 8003dda:	4a05      	ldr	r2, [pc, #20]	@ (8003df0 <prvInitialiseTaskLists+0x68>)
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200000dc 	.word	0x200000dc
 8003dec:	20000140 	.word	0x20000140
 8003df0:	20000154 	.word	0x20000154
 8003df4:	20000170 	.word	0x20000170
 8003df8:	20000184 	.word	0x20000184
 8003dfc:	2000019c 	.word	0x2000019c
 8003e00:	20000168 	.word	0x20000168
 8003e04:	2000016c 	.word	0x2000016c

08003e08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e0e:	e019      	b.n	8003e44 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003e10:	f000 ff04 	bl	8004c1c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e14:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <prvCheckTasksWaitingTermination+0x50>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe f959 	bl	80020d8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <prvCheckTasksWaitingTermination+0x54>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e5c <prvCheckTasksWaitingTermination+0x54>)
 8003e2e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <prvCheckTasksWaitingTermination+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	4a0a      	ldr	r2, [pc, #40]	@ (8003e60 <prvCheckTasksWaitingTermination+0x58>)
 8003e38:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003e3a:	f000 ff21 	bl	8004c80 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f810 	bl	8003e64 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <prvCheckTasksWaitingTermination+0x58>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e1      	bne.n	8003e10 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000184 	.word	0x20000184
 8003e5c:	200001b0 	.word	0x200001b0
 8003e60:	20000198 	.word	0x20000198

08003e64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e70:	4618      	mov	r0, r3
 8003e72:	f001 f8c1 	bl	8004ff8 <vPortFree>
            vPortFree( pxTCB );
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f001 f8be 	bl	8004ff8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <prvResetNextTaskUnblockTime+0x30>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e92:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <prvResetNextTaskUnblockTime+0x34>)
 8003e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e9a:	e005      	b.n	8003ea8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e9c:	4b05      	ldr	r3, [pc, #20]	@ (8003eb4 <prvResetNextTaskUnblockTime+0x30>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	@ (8003eb8 <prvResetNextTaskUnblockTime+0x34>)
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000168 	.word	0x20000168
 8003eb8:	200001d0 	.word	0x200001d0

08003ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <xTaskGetSchedulerState+0x34>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	e008      	b.n	8003ee2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed0:	4b08      	ldr	r3, [pc, #32]	@ (8003ef4 <xTaskGetSchedulerState+0x38>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	e001      	b.n	8003ee2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003ee2:	687b      	ldr	r3, [r7, #4]
    }
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	200001bc 	.word	0x200001bc
 8003ef4:	200001d8 	.word	0x200001d8

08003ef8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d063      	beq.n	8003fd6 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f12:	4b33      	ldr	r3, [pc, #204]	@ (8003fe0 <xTaskPriorityInherit+0xe8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d253      	bcs.n	8003fc4 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	db06      	blt.n	8003f32 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f24:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <xTaskPriorityInherit+0xe8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	f1c3 0205 	rsb	r2, r3, #5
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6959      	ldr	r1, [r3, #20]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a28      	ldr	r2, [pc, #160]	@ (8003fe4 <xTaskPriorityInherit+0xec>)
 8003f44:	4413      	add	r3, r2
 8003f46:	4299      	cmp	r1, r3
 8003f48:	d12f      	bne.n	8003faa <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f8c2 	bl	80020d8 <uxListRemove>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	2201      	movs	r2, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43da      	mvns	r2, r3
 8003f66:	4b20      	ldr	r3, [pc, #128]	@ (8003fe8 <xTaskPriorityInherit+0xf0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <xTaskPriorityInherit+0xf0>)
 8003f6e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <xTaskPriorityInherit+0xe8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <xTaskPriorityInherit+0xf0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <xTaskPriorityInherit+0xf0>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a12      	ldr	r2, [pc, #72]	@ (8003fe4 <xTaskPriorityInherit+0xec>)
 8003f9a:	441a      	add	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7fe f83b 	bl	800201e <vListInsertEnd>
 8003fa8:	e004      	b.n	8003fb4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <xTaskPriorityInherit+0xe8>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	2049      	movs	r0, #73	@ 0x49
 8003fba:	f002 fe0f 	bl	8006bdc <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e008      	b.n	8003fd6 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <xTaskPriorityInherit+0xe8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d201      	bcs.n	8003fd6 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
    }
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	200000d8 	.word	0x200000d8
 8003fe4:	200000dc 	.word	0x200000dc
 8003fe8:	200001b8 	.word	0x200001b8

08003fec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06a      	beq.n	80040d8 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004002:	4b38      	ldr	r3, [pc, #224]	@ (80040e4 <xTaskPriorityDisinherit+0xf8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d00b      	beq.n	8004024 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	60fb      	str	r3, [r7, #12]
    }
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	60bb      	str	r3, [r7, #8]
    }
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004056:	429a      	cmp	r2, r3
 8004058:	d03e      	beq.n	80040d8 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d13a      	bne.n	80040d8 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe f836 	bl	80020d8 <uxListRemove>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	2201      	movs	r2, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43da      	mvns	r2, r3
 800407e:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <xTaskPriorityDisinherit+0xfc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4013      	ands	r3, r2
 8004084:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <xTaskPriorityDisinherit+0xfc>)
 8004086:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4619      	mov	r1, r3
 800408c:	204a      	movs	r0, #74	@ 0x4a
 800408e:	f002 fda5 	bl	8006bdc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	f1c3 0205 	rsb	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	2201      	movs	r2, #1
 80040ac:	409a      	lsls	r2, r3
 80040ae:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <xTaskPriorityDisinherit+0xfc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	4a0c      	ldr	r2, [pc, #48]	@ (80040e8 <xTaskPriorityDisinherit+0xfc>)
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4a09      	ldr	r2, [pc, #36]	@ (80040ec <xTaskPriorityDisinherit+0x100>)
 80040c6:	441a      	add	r2, r3
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f7fd ffa5 	bl	800201e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040d8:	697b      	ldr	r3, [r7, #20]
    }
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200000d8 	.word	0x200000d8
 80040e8:	200001b8 	.word	0x200001b8
 80040ec:	200000dc 	.word	0x200000dc

080040f0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80040fe:	2301      	movs	r3, #1
 8004100:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80ad 	beq.w	8004264 <vTaskPriorityDisinheritAfterTimeout+0x174>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	613b      	str	r3, [r7, #16]
    }
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d902      	bls.n	800413a <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
 8004138:	e002      	b.n	8004140 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004146:	429a      	cmp	r2, r3
 8004148:	f000 808c 	beq.w	8004264 <vTaskPriorityDisinheritAfterTimeout+0x174>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	429a      	cmp	r2, r3
 8004154:	f040 8086 	bne.w	8004264 <vTaskPriorityDisinheritAfterTimeout+0x174>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004158:	4b44      	ldr	r3, [pc, #272]	@ (800426c <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	429a      	cmp	r2, r3
 8004160:	d10b      	bne.n	800417a <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	60fb      	str	r3, [r7, #12]
    }
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	e7fd      	b.n	8004176 <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4619      	mov	r1, r3
 800417e:	204a      	movs	r0, #74	@ 0x4a
 8004180:	f002 fd2c 	bl	8006bdc <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	db04      	blt.n	80041a2 <vTaskPriorityDisinheritAfterTimeout+0xb2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	f1c3 0205 	rsb	r2, r3, #5
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	6959      	ldr	r1, [r3, #20]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004270 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80041b2:	4413      	add	r3, r2
 80041b4:	4299      	cmp	r1, r3
 80041b6:	d155      	bne.n	8004264 <vTaskPriorityDisinheritAfterTimeout+0x174>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd ff8b 	bl	80020d8 <uxListRemove>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <vTaskPriorityDisinheritAfterTimeout+0xee>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	2201      	movs	r2, #1
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43da      	mvns	r2, r3
 80041d4:	4b27      	ldr	r3, [pc, #156]	@ (8004274 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4013      	ands	r3, r2
 80041da:	4a26      	ldr	r2, [pc, #152]	@ (8004274 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80041dc:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 fa7d 	bl	80076e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	2201      	movs	r2, #1
 80041ec:	409a      	lsls	r2, r3
 80041ee:	4b21      	ldr	r3, [pc, #132]	@ (8004274 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004274 <vTaskPriorityDisinheritAfterTimeout+0x184>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	491c      	ldr	r1, [pc, #112]	@ (8004270 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	60da      	str	r2, [r3, #12]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	3204      	adds	r2, #4
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	1d1a      	adds	r2, r3, #4
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4a0d      	ldr	r2, [pc, #52]	@ (8004270 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 800423c:	441a      	add	r2, r3
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	615a      	str	r2, [r3, #20]
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004246:	490a      	ldr	r1, [pc, #40]	@ (8004270 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1c59      	adds	r1, r3, #1
 8004256:	4806      	ldr	r0, [pc, #24]	@ (8004270 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4403      	add	r3, r0
 8004262:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004264:	bf00      	nop
 8004266:	3728      	adds	r7, #40	@ 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	200000d8 	.word	0x200000d8
 8004270:	200000dc 	.word	0x200000dc
 8004274:	200001b8 	.word	0x200001b8

08004278 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <pvTaskIncrementMutexHeldCount+0x24>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <pvTaskIncrementMutexHeldCount+0x24>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800428a:	3201      	adds	r2, #1
 800428c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800428e:	4b03      	ldr	r3, [pc, #12]	@ (800429c <pvTaskIncrementMutexHeldCount+0x24>)
 8004290:	681b      	ldr	r3, [r3, #0]
    }
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	200000d8 	.word	0x200000d8

080042a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80042aa:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <prvAddCurrentTaskToDelayedList+0xe4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042b0:	4b35      	ldr	r3, [pc, #212]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd ff0e 	bl	80020d8 <uxListRemove>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042c2:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	2201      	movs	r2, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	4b2e      	ldr	r3, [pc, #184]	@ (800438c <prvAddCurrentTaskToDelayedList+0xec>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4013      	ands	r3, r2
 80042d6:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <prvAddCurrentTaskToDelayedList+0xec>)
 80042d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e0:	d124      	bne.n	800432c <prvAddCurrentTaskToDelayedList+0x8c>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d021      	beq.n	800432c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e8:	4b29      	ldr	r3, [pc, #164]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xf0>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	4b24      	ldr	r3, [pc, #144]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	6892      	ldr	r2, [r2, #8]
 80042fe:	60da      	str	r2, [r3, #12]
 8004300:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	3204      	adds	r2, #4
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	4b1e      	ldr	r3, [pc, #120]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1d1a      	adds	r2, r3, #4
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	4b1c      	ldr	r3, [pc, #112]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xf0>)
 800431c:	615a      	str	r2, [r3, #20]
 800431e:	4b1c      	ldr	r3, [pc, #112]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a1a      	ldr	r2, [pc, #104]	@ (8004390 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800432a:	e026      	b.n	800437a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004334:	4b14      	ldr	r3, [pc, #80]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	d209      	bcs.n	8004358 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004344:	4b13      	ldr	r3, [pc, #76]	@ (8004394 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f7fd fe88 	bl	8002066 <vListInsert>
}
 8004356:	e010      	b.n	800437a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004358:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <prvAddCurrentTaskToDelayedList+0xf8>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <prvAddCurrentTaskToDelayedList+0xe8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3304      	adds	r3, #4
 8004362:	4619      	mov	r1, r3
 8004364:	4610      	mov	r0, r2
 8004366:	f7fd fe7e 	bl	8002066 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800436a:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <prvAddCurrentTaskToDelayedList+0xfc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d202      	bcs.n	800437a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004374:	4a09      	ldr	r2, [pc, #36]	@ (800439c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6013      	str	r3, [r2, #0]
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200001b4 	.word	0x200001b4
 8004388:	200000d8 	.word	0x200000d8
 800438c:	200001b8 	.word	0x200001b8
 8004390:	2000019c 	.word	0x2000019c
 8004394:	2000016c 	.word	0x2000016c
 8004398:	20000168 	.word	0x20000168
 800439c:	200001d0 	.word	0x200001d0

080043a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80043aa:	f000 fa4f 	bl	800484c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80043ae:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <xTimerCreateTimerTask+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80043b6:	4b11      	ldr	r3, [pc, #68]	@ (80043fc <xTimerCreateTimerTask+0x5c>)
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	2302      	movs	r3, #2
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2300      	movs	r3, #0
 80043c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80043c4:	490e      	ldr	r1, [pc, #56]	@ (8004400 <xTimerCreateTimerTask+0x60>)
 80043c6:	480f      	ldr	r0, [pc, #60]	@ (8004404 <xTimerCreateTimerTask+0x64>)
 80043c8:	f7fe fd3a 	bl	8002e40 <xTaskCreate>
 80043cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	603b      	str	r3, [r7, #0]
    }
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80043ec:	687b      	ldr	r3, [r7, #4]
    }
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000020c 	.word	0x2000020c
 80043fc:	20000210 	.word	0x20000210
 8004400:	08007e38 	.word	0x08007e38
 8004404:	080044ad 	.word	0x080044ad

08004408 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004414:	e008      	b.n	8004428 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	4413      	add	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	18d1      	adds	r1, r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f8df 	bl	80045f8 <prvInsertTimerInActiveList>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ea      	bne.n	8004416 <prvReloadTimer+0xe>
        }
    }
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <prvProcessExpiredTimer+0x5c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fd fe37 	bl	80020d8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff ffc3 	bl	8004408 <prvReloadTimer>
 8004482:	e008      	b.n	8004496 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	4798      	blx	r3
    }
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000204 	.word	0x20000204

080044ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044b4:	f107 0308 	add.w	r3, r7, #8
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f859 	bl	8004570 <prvGetNextExpireTime>
 80044be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4619      	mov	r1, r3
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f805 	bl	80044d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80044ca:	f000 f8d7 	bl	800467c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ce:	bf00      	nop
 80044d0:	e7f0      	b.n	80044b4 <prvTimerTask+0x8>
	...

080044d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044de:	f7fe ffb1 	bl	8003444 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044e2:	f107 0308 	add.w	r3, r7, #8
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f866 	bl	80045b8 <prvSampleTimeNow>
 80044ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d130      	bne.n	8004556 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <prvProcessTimerOrBlockTask+0x3c>
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d806      	bhi.n	8004510 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004502:	f7fe ffad 	bl	8003460 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004506:	68f9      	ldr	r1, [r7, #12]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff9f 	bl	800444c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800450e:	e024      	b.n	800455a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004516:	4b13      	ldr	r3, [pc, #76]	@ (8004564 <prvProcessTimerOrBlockTask+0x90>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <prvProcessTimerOrBlockTask+0x50>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <prvProcessTimerOrBlockTask+0x52>
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004528:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <prvProcessTimerOrBlockTask+0x94>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	f7fe fc4f 	bl	8002dd8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800453a:	f7fe ff91 	bl	8003460 <xTaskResumeAll>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <prvProcessTimerOrBlockTask+0x98>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
    }
 8004554:	e001      	b.n	800455a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004556:	f7fe ff83 	bl	8003460 <xTaskResumeAll>
    }
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000208 	.word	0x20000208
 8004568:	2000020c 	.word	0x2000020c
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004578:	4b0e      	ldr	r3, [pc, #56]	@ (80045b4 <prvGetNextExpireTime+0x44>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <prvGetNextExpireTime+0x16>
 8004582:	2201      	movs	r2, #1
 8004584:	e000      	b.n	8004588 <prvGetNextExpireTime+0x18>
 8004586:	2200      	movs	r2, #0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004594:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <prvGetNextExpireTime+0x44>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e001      	b.n	80045a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80045a4:	68fb      	ldr	r3, [r7, #12]
    }
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000204 	.word	0x20000204

080045b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80045c0:	f7ff f84e 	bl	8003660 <xTaskGetTickCount>
 80045c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <prvSampleTimeNow+0x3c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d205      	bcs.n	80045dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80045d0:	f000 f916 	bl	8004800 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e002      	b.n	80045e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045e2:	4a04      	ldr	r2, [pc, #16]	@ (80045f4 <prvSampleTimeNow+0x3c>)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045e8:	68fb      	ldr	r3, [r7, #12]
    }
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000214 	.word	0x20000214

080045f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d812      	bhi.n	8004644 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e01b      	b.n	800466a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <prvInsertTimerInActiveList+0x7c>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3304      	adds	r3, #4
 800463a:	4619      	mov	r1, r3
 800463c:	4610      	mov	r0, r2
 800463e:	f7fd fd12 	bl	8002066 <vListInsert>
 8004642:	e012      	b.n	800466a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d206      	bcs.n	800465a <prvInsertTimerInActiveList+0x62>
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d302      	bcc.n	800465a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004654:	2301      	movs	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e007      	b.n	800466a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800465a:	4b07      	ldr	r3, [pc, #28]	@ (8004678 <prvInsertTimerInActiveList+0x80>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fd fcfe 	bl	8002066 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800466a:	697b      	ldr	r3, [r7, #20]
    }
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000208 	.word	0x20000208
 8004678:	20000204 	.word	0x20000204

0800467c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004682:	e0a9      	b.n	80047d8 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f2c0 80a6 	blt.w	80047d8 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd fd1b 	bl	80020d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046a2:	1d3b      	adds	r3, r7, #4
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff87 	bl	80045b8 <prvSampleTimeNow>
 80046aa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	f200 808e 	bhi.w	80047d2 <prvProcessReceivedCommands+0x156>
 80046b6:	a201      	add	r2, pc, #4	@ (adr r2, 80046bc <prvProcessReceivedCommands+0x40>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	080046e1 	.word	0x080046e1
 80046c4:	08004749 	.word	0x08004749
 80046c8:	0800475d 	.word	0x0800475d
 80046cc:	080047a9 	.word	0x080047a9
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046e1 	.word	0x080046e1
 80046d8:	08004749 	.word	0x08004749
 80046dc:	0800475d 	.word	0x0800475d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	18d1      	adds	r1, r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	69f8      	ldr	r0, [r7, #28]
 8004700:	f7ff ff7a 	bl	80045f8 <prvInsertTimerInActiveList>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d065      	beq.n	80047d6 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	4413      	add	r3, r2
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4619      	mov	r1, r3
 8004724:	69f8      	ldr	r0, [r7, #28]
 8004726:	f7ff fe6f 	bl	8004408 <prvReloadTimer>
 800472a:	e008      	b.n	800473e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	69f8      	ldr	r0, [r7, #28]
 8004744:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004746:	e046      	b.n	80047d6 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	b2da      	uxtb	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800475a:	e03d      	b.n	80047d8 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	617b      	str	r3, [r7, #20]
    }
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	18d1      	adds	r1, r2, r3
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	69f8      	ldr	r0, [r7, #28]
 80047a2:	f7ff ff29 	bl	80045f8 <prvInsertTimerInActiveList>
                        break;
 80047a6:	e017      	b.n	80047d8 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80047b6:	69f8      	ldr	r0, [r7, #28]
 80047b8:	f000 fc1e 	bl	8004ff8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047bc:	e00c      	b.n	80047d8 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80047d0:	e002      	b.n	80047d8 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <prvProcessReceivedCommands+0x15c>
                        break;
 80047d6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <prvProcessReceivedCommands+0x180>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f107 0108 	add.w	r1, r7, #8
 80047e0:	2200      	movs	r2, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd ff20 	bl	8002628 <xQueueReceive>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f47f af4a 	bne.w	8004684 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	2000020c 	.word	0x2000020c

08004800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004806:	e009      	b.n	800481c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004808:	4b0e      	ldr	r3, [pc, #56]	@ (8004844 <prvSwitchTimerLists+0x44>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004812:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004816:	6838      	ldr	r0, [r7, #0]
 8004818:	f7ff fe18 	bl	800444c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800481c:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <prvSwitchTimerLists+0x44>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004826:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <prvSwitchTimerLists+0x44>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800482c:	4b06      	ldr	r3, [pc, #24]	@ (8004848 <prvSwitchTimerLists+0x48>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a04      	ldr	r2, [pc, #16]	@ (8004844 <prvSwitchTimerLists+0x44>)
 8004832:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004834:	4a04      	ldr	r2, [pc, #16]	@ (8004848 <prvSwitchTimerLists+0x48>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6013      	str	r3, [r2, #0]
    }
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000204 	.word	0x20000204
 8004848:	20000208 	.word	0x20000208

0800484c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004850:	f000 f9e4 	bl	8004c1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004854:	4b13      	ldr	r3, [pc, #76]	@ (80048a4 <prvCheckForValidListAndQueue+0x58>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11e      	bne.n	800489a <prvCheckForValidListAndQueue+0x4e>
            {
                vListInitialise( &xActiveTimerList1 );
 800485c:	4812      	ldr	r0, [pc, #72]	@ (80048a8 <prvCheckForValidListAndQueue+0x5c>)
 800485e:	f7fd fbb1 	bl	8001fc4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004862:	4812      	ldr	r0, [pc, #72]	@ (80048ac <prvCheckForValidListAndQueue+0x60>)
 8004864:	f7fd fbae 	bl	8001fc4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004868:	4b11      	ldr	r3, [pc, #68]	@ (80048b0 <prvCheckForValidListAndQueue+0x64>)
 800486a:	4a0f      	ldr	r2, [pc, #60]	@ (80048a8 <prvCheckForValidListAndQueue+0x5c>)
 800486c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800486e:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <prvCheckForValidListAndQueue+0x68>)
 8004870:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <prvCheckForValidListAndQueue+0x60>)
 8004872:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004874:	2300      	movs	r3, #0
 8004876:	2200      	movs	r2, #0
 8004878:	210c      	movs	r1, #12
 800487a:	200a      	movs	r0, #10
 800487c:	f7fd fce8 	bl	8002250 <xQueueGenericCreate>
 8004880:	4603      	mov	r3, r0
 8004882:	4a08      	ldr	r2, [pc, #32]	@ (80048a4 <prvCheckForValidListAndQueue+0x58>)
 8004884:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004886:	4b07      	ldr	r3, [pc, #28]	@ (80048a4 <prvCheckForValidListAndQueue+0x58>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <prvCheckForValidListAndQueue+0x4e>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <prvCheckForValidListAndQueue+0x58>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4909      	ldr	r1, [pc, #36]	@ (80048b8 <prvCheckForValidListAndQueue+0x6c>)
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fa47 	bl	8002d28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800489a:	f000 f9f1 	bl	8004c80 <vPortExitCritical>
    }
 800489e:	bf00      	nop
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	2000020c 	.word	0x2000020c
 80048a8:	200001dc 	.word	0x200001dc
 80048ac:	200001f0 	.word	0x200001f0
 80048b0:	20000204 	.word	0x20000204
 80048b4:	20000208 	.word	0x20000208
 80048b8:	08007e40 	.word	0x08007e40

080048bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3b04      	subs	r3, #4
 80048cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3b04      	subs	r3, #4
 80048ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80048ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004920 <pxPortInitialiseStack+0x64>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b14      	subs	r3, #20
 80048f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3b04      	subs	r3, #4
 8004902:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f06f 0202 	mvn.w	r2, #2
 800490a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b20      	subs	r3, #32
 8004910:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	08004925 	.word	0x08004925

08004924 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800492e:	4b13      	ldr	r3, [pc, #76]	@ (800497c <prvTaskExitError+0x58>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004936:	d00b      	beq.n	8004950 <prvTaskExitError+0x2c>
        __asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60fb      	str	r3, [r7, #12]
    }
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <prvTaskExitError+0x28>
        __asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60bb      	str	r3, [r7, #8]
    }
 8004962:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004964:	bf00      	nop
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0fc      	beq.n	8004966 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000010 	.word	0x20000010

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	4770      	bx	lr
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst2>:
 80049a0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80049a8:	4808      	ldr	r0, [pc, #32]	@ (80049cc <prvPortStartFirstTask+0x24>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f380 8814 	msr	CONTROL, r0
 80049ba:	b662      	cpsie	i
 80049bc:	b661      	cpsie	f
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	df00      	svc	0
 80049c8:	bf00      	nop
 80049ca:	0000      	.short	0x0000
 80049cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop

080049d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049da:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <xPortStartScheduler+0x124>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a47      	ldr	r2, [pc, #284]	@ (8004afc <xPortStartScheduler+0x128>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10b      	bne.n	80049fc <xPortStartScheduler+0x28>
        __asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	613b      	str	r3, [r7, #16]
    }
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049fc:	4b3e      	ldr	r3, [pc, #248]	@ (8004af8 <xPortStartScheduler+0x124>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3f      	ldr	r2, [pc, #252]	@ (8004b00 <xPortStartScheduler+0x12c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10b      	bne.n	8004a1e <xPortStartScheduler+0x4a>
        __asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	60fb      	str	r3, [r7, #12]
    }
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	e7fd      	b.n	8004a1a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a1e:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <xPortStartScheduler+0x130>)
 8004a20:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	22ff      	movs	r2, #255	@ 0xff
 8004a2e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <xPortStartScheduler+0x134>)
 8004a44:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a46:	4b31      	ldr	r3, [pc, #196]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a48:	2207      	movs	r2, #7
 8004a4a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a4c:	e009      	b.n	8004a62 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4a2d      	ldr	r2, [pc, #180]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a56:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6a:	2b80      	cmp	r3, #128	@ 0x80
 8004a6c:	d0ef      	beq.n	8004a4e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a6e:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00b      	beq.n	8004a92 <xPortStartScheduler+0xbe>
        __asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	60bb      	str	r3, [r7, #8]
    }
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	4a1c      	ldr	r2, [pc, #112]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a9a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <xPortStartScheduler+0x138>)
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ab0:	4b17      	ldr	r3, [pc, #92]	@ (8004b10 <xPortStartScheduler+0x13c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <xPortStartScheduler+0x13c>)
 8004ab6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004aba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <xPortStartScheduler+0x13c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <xPortStartScheduler+0x13c>)
 8004ac2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ac6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004ac8:	f000 f968 	bl	8004d9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004acc:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <xPortStartScheduler+0x140>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004ad2:	f000 f987 	bl	8004de4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ad6:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <xPortStartScheduler+0x144>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0f      	ldr	r2, [pc, #60]	@ (8004b18 <xPortStartScheduler+0x144>)
 8004adc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004ae2:	f7ff ff61 	bl	80049a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ae6:	f7fe fef9 	bl	80038dc <vTaskSwitchContext>
    prvTaskExitError();
 8004aea:	f7ff ff1b 	bl	8004924 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed00 	.word	0xe000ed00
 8004afc:	410fc271 	.word	0x410fc271
 8004b00:	410fc270 	.word	0x410fc270
 8004b04:	e000e400 	.word	0xe000e400
 8004b08:	20000218 	.word	0x20000218
 8004b0c:	2000021c 	.word	0x2000021c
 8004b10:	e000ed20 	.word	0xe000ed20
 8004b14:	20000010 	.word	0x20000010
 8004b18:	e000ef34 	.word	0xe000ef34

08004b1c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b22:	4b38      	ldr	r3, [pc, #224]	@ (8004c04 <vInitPrioGroupValue+0xe8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a38      	ldr	r2, [pc, #224]	@ (8004c08 <vInitPrioGroupValue+0xec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10b      	bne.n	8004b44 <vInitPrioGroupValue+0x28>
        __asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	613b      	str	r3, [r7, #16]
    }
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b44:	4b2f      	ldr	r3, [pc, #188]	@ (8004c04 <vInitPrioGroupValue+0xe8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a30      	ldr	r2, [pc, #192]	@ (8004c0c <vInitPrioGroupValue+0xf0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10b      	bne.n	8004b66 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	60fb      	str	r3, [r7, #12]
    }
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	e7fd      	b.n	8004b62 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b66:	4b2a      	ldr	r3, [pc, #168]	@ (8004c10 <vInitPrioGroupValue+0xf4>)
 8004b68:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	22ff      	movs	r2, #255	@ 0xff
 8004b76:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4b22      	ldr	r3, [pc, #136]	@ (8004c14 <vInitPrioGroupValue+0xf8>)
 8004b8c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b8e:	4b22      	ldr	r3, [pc, #136]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b94:	e009      	b.n	8004baa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004b96:	4b20      	ldr	r3, [pc, #128]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004b9e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004baa:	78fb      	ldrb	r3, [r7, #3]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb2:	2b80      	cmp	r3, #128	@ 0x80
 8004bb4:	d0ef      	beq.n	8004b96 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bb6:	4b18      	ldr	r3, [pc, #96]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1c3 0307 	rsb	r3, r3, #7
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d00b      	beq.n	8004bda <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	60bb      	str	r3, [r7, #8]
    }
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bda:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	4a0d      	ldr	r2, [pc, #52]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004be2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004be4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bec:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <vInitPrioGroupValue+0xfc>)
 8004bee:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00
 8004c08:	410fc271 	.word	0x410fc271
 8004c0c:	410fc270 	.word	0x410fc270
 8004c10:	e000e400 	.word	0xe000e400
 8004c14:	20000218 	.word	0x20000218
 8004c18:	2000021c 	.word	0x2000021c

08004c1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
        __asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	607b      	str	r3, [r7, #4]
    }
 8004c34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004c36:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <vPortEnterCritical+0x5c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c78 <vPortEnterCritical+0x5c>)
 8004c3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004c40:	4b0d      	ldr	r3, [pc, #52]	@ (8004c78 <vPortEnterCritical+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d110      	bne.n	8004c6a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c48:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <vPortEnterCritical+0x60>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <vPortEnterCritical+0x4e>
        __asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	603b      	str	r3, [r7, #0]
    }
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <vPortEnterCritical+0x4a>
    }
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000010 	.word	0x20000010
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004c86:	4b12      	ldr	r3, [pc, #72]	@ (8004cd0 <vPortExitCritical+0x50>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <vPortExitCritical+0x26>
        __asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
    }
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	e7fd      	b.n	8004ca2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <vPortExitCritical+0x50>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	4a08      	ldr	r2, [pc, #32]	@ (8004cd0 <vPortExitCritical+0x50>)
 8004cae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004cb0:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <vPortExitCritical+0x50>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <vPortExitCritical+0x44>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004cc2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20000010 	.word	0x20000010
	...

08004ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004ce0:	f3ef 8009 	mrs	r0, PSP
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <pxCurrentTCBConst>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	f01e 0f10 	tst.w	lr, #16
 8004cf0:	bf08      	it	eq
 8004cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	6010      	str	r0, [r2, #0]
 8004cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d04:	f380 8811 	msr	BASEPRI, r0
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f7fe fde4 	bl	80038dc <vTaskSwitchContext>
 8004d14:	f04f 0000 	mov.w	r0, #0
 8004d18:	f380 8811 	msr	BASEPRI, r0
 8004d1c:	bc09      	pop	{r0, r3}
 8004d1e:	6819      	ldr	r1, [r3, #0]
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d26:	f01e 0f10 	tst.w	lr, #16
 8004d2a:	bf08      	it	eq
 8004d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d30:	f380 8809 	msr	PSP, r0
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst>:
 8004d40:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
        __asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	607b      	str	r3, [r7, #4]
    }
 8004d60:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004d62:	f002 fba3 	bl	80074ac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004d66:	f7fe fc9d 	bl	80036a4 <xTaskIncrementTick>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004d70:	f002 fbfa 	bl	8007568 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d74:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <SysTick_Handler+0x50>)
 8004d76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e001      	b.n	8004d82 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004d7e:	f002 fbd7 	bl	8007530 <SEGGER_SYSVIEW_RecordExitISR>
 8004d82:	2300      	movs	r3, #0
 8004d84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f383 8811 	msr	BASEPRI, r3
    }
 8004d8c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <vPortSetupTimerInterrupt+0x34>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <vPortSetupTimerInterrupt+0x38>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <vPortSetupTimerInterrupt+0x3c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	@ (8004ddc <vPortSetupTimerInterrupt+0x40>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <vPortSetupTimerInterrupt+0x44>)
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dbe:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <vPortSetupTimerInterrupt+0x34>)
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000e010 	.word	0xe000e010
 8004dd4:	e000e018 	.word	0xe000e018
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	10624dd3 	.word	0x10624dd3
 8004de0:	e000e014 	.word	0xe000e014

08004de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004de4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004df4 <vPortEnableVFP+0x10>
 8004de8:	6801      	ldr	r1, [r0, #0]
 8004dea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004dee:	6001      	str	r1, [r0, #0]
 8004df0:	4770      	bx	lr
 8004df2:	0000      	.short	0x0000
 8004df4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop

08004dfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004e02:	f3ef 8305 	mrs	r3, IPSR
 8004e06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d915      	bls.n	8004e3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e0e:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <vPortValidateInterruptPriority+0x74>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <vPortValidateInterruptPriority+0x78>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	7afa      	ldrb	r2, [r7, #11]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d20b      	bcs.n	8004e3a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
    }
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <vPortValidateInterruptPriority+0x7c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e42:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <vPortValidateInterruptPriority+0x80>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d90b      	bls.n	8004e62 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	603b      	str	r3, [r7, #0]
    }
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	e7fd      	b.n	8004e5e <vPortValidateInterruptPriority+0x62>
    }
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	e000e3f0 	.word	0xe000e3f0
 8004e74:	20000218 	.word	0x20000218
 8004e78:	e000ed0c 	.word	0xe000ed0c
 8004e7c:	2000021c 	.word	0x2000021c

08004e80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	@ 0x28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004e8c:	f7fe fada 	bl	8003444 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e90:	4b54      	ldr	r3, [pc, #336]	@ (8004fe4 <pvPortMalloc+0x164>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e98:	f000 f90c 	bl	80050b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	3308      	adds	r3, #8
 8004eae:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d804      	bhi.n	8004ec4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	e001      	b.n	8004ec8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	db71      	blt.n	8004fb2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d06e      	beq.n	8004fb2 <pvPortMalloc+0x132>
 8004ed4:	4b44      	ldr	r3, [pc, #272]	@ (8004fe8 <pvPortMalloc+0x168>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d869      	bhi.n	8004fb2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ede:	4b43      	ldr	r3, [pc, #268]	@ (8004fec <pvPortMalloc+0x16c>)
 8004ee0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ee2:	4b42      	ldr	r3, [pc, #264]	@ (8004fec <pvPortMalloc+0x16c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee8:	e004      	b.n	8004ef4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d903      	bls.n	8004f06 <pvPortMalloc+0x86>
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f1      	bne.n	8004eea <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f06:	4b37      	ldr	r3, [pc, #220]	@ (8004fe4 <pvPortMalloc+0x164>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d050      	beq.n	8004fb2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4413      	add	r3, r2
 8004f18:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1ad2      	subs	r2, r2, r3
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d920      	bls.n	8004f74 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4413      	add	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <pvPortMalloc+0xdc>
        __asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
    }
 8004f56:	bf00      	nop
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f6e:	6978      	ldr	r0, [r7, #20]
 8004f70:	f000 f8fc 	bl	800516c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f74:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe8 <pvPortMalloc+0x168>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe8 <pvPortMalloc+0x168>)
 8004f80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f82:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <pvPortMalloc+0x168>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <pvPortMalloc+0x170>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d203      	bcs.n	8004f96 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f8e:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <pvPortMalloc+0x168>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a17      	ldr	r2, [pc, #92]	@ (8004ff0 <pvPortMalloc+0x170>)
 8004f94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004fa8:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <pvPortMalloc+0x174>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a11      	ldr	r2, [pc, #68]	@ (8004ff4 <pvPortMalloc+0x174>)
 8004fb0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fb2:	f7fe fa55 	bl	8003460 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00b      	beq.n	8004fd8 <pvPortMalloc+0x158>
        __asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
    }
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <pvPortMalloc+0x154>
    return pvReturn;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3728      	adds	r7, #40	@ 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20012e28 	.word	0x20012e28
 8004fe8:	20012e2c 	.word	0x20012e2c
 8004fec:	20012e20 	.word	0x20012e20
 8004ff0:	20012e30 	.word	0x20012e30
 8004ff4:	20012e34 	.word	0x20012e34

08004ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04b      	beq.n	80050a2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800500a:	2308      	movs	r3, #8
 800500c:	425b      	negs	r3, r3
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4413      	add	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	db0b      	blt.n	8005038 <vPortFree+0x40>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
    }
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <vPortFree+0x60>
        __asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60bb      	str	r3, [r7, #8]
    }
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0fdb      	lsrs	r3, r3, #31
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01c      	beq.n	80050a2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d118      	bne.n	80050a2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800507c:	f7fe f9e2 	bl	8003444 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <vPortFree+0xb4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4413      	add	r3, r2
 800508a:	4a08      	ldr	r2, [pc, #32]	@ (80050ac <vPortFree+0xb4>)
 800508c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800508e:	6938      	ldr	r0, [r7, #16]
 8005090:	f000 f86c 	bl	800516c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005094:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <vPortFree+0xb8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	4a05      	ldr	r2, [pc, #20]	@ (80050b0 <vPortFree+0xb8>)
 800509c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800509e:	f7fe f9df 	bl	8003460 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80050a2:	bf00      	nop
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20012e2c 	.word	0x20012e2c
 80050b0:	20012e38 	.word	0x20012e38

080050b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80050be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050c0:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <prvHeapInit+0xa4>)
 80050c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <prvHeapInit+0xa4>)
 80050e4:	4413      	add	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <prvHeapInit+0xa8>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050f2:	4b1a      	ldr	r3, [pc, #104]	@ (800515c <prvHeapInit+0xa8>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005100:	2208      	movs	r2, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a13      	ldr	r2, [pc, #76]	@ (8005160 <prvHeapInit+0xac>)
 8005114:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005116:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <prvHeapInit+0xac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800511e:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <prvHeapInit+0xac>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005134:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <prvHeapInit+0xac>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <prvHeapInit+0xb0>)
 8005142:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a07      	ldr	r2, [pc, #28]	@ (8005168 <prvHeapInit+0xb4>)
 800514a:	6013      	str	r3, [r2, #0]
}
 800514c:	bf00      	nop
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	20000220 	.word	0x20000220
 800515c:	20012e20 	.word	0x20012e20
 8005160:	20012e28 	.word	0x20012e28
 8005164:	20012e30 	.word	0x20012e30
 8005168:	20012e2c 	.word	0x20012e2c

0800516c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005174:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <prvInsertBlockIntoFreeList+0xac>)
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e002      	b.n	8005180 <prvInsertBlockIntoFreeList+0x14>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d8f7      	bhi.n	800517a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	4413      	add	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d108      	bne.n	80051ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	441a      	add	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d118      	bne.n	80051f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b15      	ldr	r3, [pc, #84]	@ (800521c <prvInsertBlockIntoFreeList+0xb0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d00d      	beq.n	80051ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e008      	b.n	80051fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051ea:	4b0c      	ldr	r3, [pc, #48]	@ (800521c <prvInsertBlockIntoFreeList+0xb0>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e003      	b.n	80051fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d002      	beq.n	800520a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20012e20 	.word	0x20012e20
 800521c:	20012e28 	.word	0x20012e28

08005220 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005222:	b085      	sub	sp, #20
 8005224:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	e033      	b.n	8005294 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800522c:	491e      	ldr	r1, [pc, #120]	@ (80052a8 <_cbSendTaskList+0x88>)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	491a      	ldr	r1, [pc, #104]	@ (80052a8 <_cbSendTaskList+0x88>)
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3304      	adds	r3, #4
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	4c16      	ldr	r4, [pc, #88]	@ (80052a8 <_cbSendTaskList+0x88>)
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4423      	add	r3, r4
 800525c:	3308      	adds	r3, #8
 800525e:	681c      	ldr	r4, [r3, #0]
 8005260:	4d11      	ldr	r5, [pc, #68]	@ (80052a8 <_cbSendTaskList+0x88>)
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	442b      	add	r3, r5
 800526e:	330c      	adds	r3, #12
 8005270:	681d      	ldr	r5, [r3, #0]
 8005272:	4e0d      	ldr	r6, [pc, #52]	@ (80052a8 <_cbSendTaskList+0x88>)
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4433      	add	r3, r6
 8005280:	3310      	adds	r3, #16
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	462b      	mov	r3, r5
 8005288:	4622      	mov	r2, r4
 800528a:	f000 f92d 	bl	80054e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3301      	adds	r3, #1
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <_cbSendTaskList+0x8c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d3c6      	bcc.n	800522c <_cbSendTaskList+0xc>
  }
}
 800529e:	bf00      	nop
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a8:	20012e3c 	.word	0x20012e3c
 80052ac:	20012edc 	.word	0x20012edc

080052b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80052b8:	f7fe f9e2 	bl	8003680 <xTaskGetTickCountFromISR>
 80052bc:	4603      	mov	r3, r0
 80052be:	2200      	movs	r2, #0
 80052c0:	469a      	mov	sl, r3
 80052c2:	4693      	mov	fp, r2
 80052c4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80052c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	f04f 0a00 	mov.w	sl, #0
 80052d4:	f04f 0b00 	mov.w	fp, #0
 80052d8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80052dc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80052e0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80052e4:	4652      	mov	r2, sl
 80052e6:	465b      	mov	r3, fp
 80052e8:	1a14      	subs	r4, r2, r0
 80052ea:	eb63 0501 	sbc.w	r5, r3, r1
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	00ab      	lsls	r3, r5, #2
 80052f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80052fc:	00a2      	lsls	r2, r4, #2
 80052fe:	4614      	mov	r4, r2
 8005300:	461d      	mov	r5, r3
 8005302:	eb14 0800 	adds.w	r8, r4, r0
 8005306:	eb45 0901 	adc.w	r9, r5, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800531a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005326:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005338 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005346:	2205      	movs	r2, #5
 8005348:	492b      	ldr	r1, [pc, #172]	@ (80053f8 <SYSVIEW_AddTask+0xc0>)
 800534a:	68b8      	ldr	r0, [r7, #8]
 800534c:	f002 fbb8 	bl	8007ac0 <memcmp>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d04b      	beq.n	80053ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005356:	4b29      	ldr	r3, [pc, #164]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b07      	cmp	r3, #7
 800535c:	d903      	bls.n	8005366 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800535e:	4828      	ldr	r0, [pc, #160]	@ (8005400 <SYSVIEW_AddTask+0xc8>)
 8005360:	f002 fb00 	bl	8007964 <SEGGER_SYSVIEW_Warn>
    return;
 8005364:	e044      	b.n	80053f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005366:	4b25      	ldr	r3, [pc, #148]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4926      	ldr	r1, [pc, #152]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4921      	ldr	r1, [pc, #132]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3304      	adds	r3, #4
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	491b      	ldr	r1, [pc, #108]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 8005396:	4613      	mov	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	3308      	adds	r3, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053a6:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4916      	ldr	r1, [pc, #88]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	330c      	adds	r3, #12
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4910      	ldr	r1, [pc, #64]	@ (8005404 <SYSVIEW_AddTask+0xcc>)
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	3310      	adds	r3, #16
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053d2:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3301      	adds	r3, #1
 80053d8:	4a08      	ldr	r2, [pc, #32]	@ (80053fc <SYSVIEW_AddTask+0xc4>)
 80053da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f87e 	bl	80054e8 <SYSVIEW_SendTaskInfo>
 80053ec:	e000      	b.n	80053f0 <SYSVIEW_AddTask+0xb8>
    return;
 80053ee:	bf00      	nop

}
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	08007e48 	.word	0x08007e48
 80053fc:	20012edc 	.word	0x20012edc
 8005400:	08007e50 	.word	0x08007e50
 8005404:	20012e3c 	.word	0x20012e3c

08005408 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005416:	2205      	movs	r2, #5
 8005418:	4930      	ldr	r1, [pc, #192]	@ (80054dc <SYSVIEW_UpdateTask+0xd4>)
 800541a:	68b8      	ldr	r0, [r7, #8]
 800541c:	f002 fb50 	bl	8007ac0 <memcmp>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d056      	beq.n	80054d4 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e00d      	b.n	8005448 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 800542c:	492c      	ldr	r1, [pc, #176]	@ (80054e0 <SYSVIEW_UpdateTask+0xd8>)
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	429a      	cmp	r2, r3
 8005440:	d008      	beq.n	8005454 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3301      	adds	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	4b26      	ldr	r3, [pc, #152]	@ (80054e4 <SYSVIEW_UpdateTask+0xdc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	429a      	cmp	r2, r3
 8005450:	d3ec      	bcc.n	800542c <SYSVIEW_UpdateTask+0x24>
 8005452:	e000      	b.n	8005456 <SYSVIEW_UpdateTask+0x4e>
      break;
 8005454:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8005456:	4b23      	ldr	r3, [pc, #140]	@ (80054e4 <SYSVIEW_UpdateTask+0xdc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	429a      	cmp	r2, r3
 800545e:	d230      	bcs.n	80054c2 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8005460:	491f      	ldr	r1, [pc, #124]	@ (80054e0 <SYSVIEW_UpdateTask+0xd8>)
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3304      	adds	r3, #4
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8005474:	491a      	ldr	r1, [pc, #104]	@ (80054e0 <SYSVIEW_UpdateTask+0xd8>)
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	3308      	adds	r3, #8
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8005488:	4915      	ldr	r1, [pc, #84]	@ (80054e0 <SYSVIEW_UpdateTask+0xd8>)
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	330c      	adds	r3, #12
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 800549c:	4910      	ldr	r1, [pc, #64]	@ (80054e0 <SYSVIEW_UpdateTask+0xd8>)
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	3310      	adds	r3, #16
 80054ac:	6a3a      	ldr	r2, [r7, #32]
 80054ae:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f814 	bl	80054e8 <SYSVIEW_SendTaskInfo>
 80054c0:	e009      	b.n	80054d6 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f7ff ff33 	bl	8005338 <SYSVIEW_AddTask>
 80054d2:	e000      	b.n	80054d6 <SYSVIEW_UpdateTask+0xce>
    return;
 80054d4:	bf00      	nop
  }
}
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	08007e48 	.word	0x08007e48
 80054e0:	20012e3c 	.word	0x20012e3c
 80054e4:	20012edc 	.word	0x20012edc

080054e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	@ 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80054f6:	f107 0314 	add.w	r3, r7, #20
 80054fa:	2214      	movs	r2, #20
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 faee 	bl	8007ae0 <memset>
  TaskInfo.TaskID     = TaskID;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005518:	f107 0314 	add.w	r3, r7, #20
 800551c:	4618      	mov	r0, r3
 800551e:	f001 fe77 	bl	8007210 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005522:	bf00      	nop
 8005524:	3728      	adds	r7, #40	@ 0x28
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <__NVIC_EnableIRQ>:
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553a:	2b00      	cmp	r3, #0
 800553c:	db0b      	blt.n	8005556 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	f003 021f 	and.w	r2, r3, #31
 8005544:	4907      	ldr	r1, [pc, #28]	@ (8005564 <__NVIC_EnableIRQ+0x38>)
 8005546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2001      	movs	r0, #1
 800554e:	fa00 f202 	lsl.w	r2, r0, r2
 8005552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	e000e100 	.word	0xe000e100

08005568 <__NVIC_SetPriority>:
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	6039      	str	r1, [r7, #0]
 8005572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005578:	2b00      	cmp	r3, #0
 800557a:	db0a      	blt.n	8005592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	b2da      	uxtb	r2, r3
 8005580:	490c      	ldr	r1, [pc, #48]	@ (80055b4 <__NVIC_SetPriority+0x4c>)
 8005582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005586:	0112      	lsls	r2, r2, #4
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	440b      	add	r3, r1
 800558c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005590:	e00a      	b.n	80055a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4908      	ldr	r1, [pc, #32]	@ (80055b8 <__NVIC_SetPriority+0x50>)
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	3b04      	subs	r3, #4
 80055a0:	0112      	lsls	r2, r2, #4
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	440b      	add	r3, r1
 80055a6:	761a      	strb	r2, [r3, #24]
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	e000e100 	.word	0xe000e100
 80055b8:	e000ed00 	.word	0xe000ed00

080055bc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80055c2:	f002 fa2b 	bl	8007a1c <SEGGER_SYSVIEW_IsStarted>
 80055c6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80055ce:	f001 fca3 	bl	8006f18 <SEGGER_SYSVIEW_Start>
  }
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80055e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <_cbOnUARTRx+0x3c>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d806      	bhi.n	80055fc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80055ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <_cbOnUARTRx+0x3c>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	4b08      	ldr	r3, [pc, #32]	@ (8005618 <_cbOnUARTRx+0x3c>)
 80055f8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80055fa:	e009      	b.n	8005610 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80055fc:	f7ff ffde 	bl	80055bc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <_cbOnUARTRx+0x3c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4618      	mov	r0, r3
 8005606:	1dfb      	adds	r3, r7, #7
 8005608:	2201      	movs	r2, #1
 800560a:	4619      	mov	r1, r3
 800560c:	f000 fb9a 	bl	8005d44 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005610:	bf00      	nop
}
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000014 	.word	0x20000014

0800561c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005624:	4b14      	ldr	r3, [pc, #80]	@ (8005678 <_cbOnUARTTx+0x5c>)
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d80f      	bhi.n	800564c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <_cbOnUARTTx+0x5c>)
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	461a      	mov	r2, r3
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <_cbOnUARTTx+0x60>)
 8005634:	5c9a      	ldrb	r2, [r3, r2]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800563a:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <_cbOnUARTTx+0x5c>)
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	3301      	adds	r3, #1
 8005640:	b2da      	uxtb	r2, r3
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <_cbOnUARTTx+0x5c>)
 8005644:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
    goto Done;
 800564a:	e00f      	b.n	800566c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <_cbOnUARTTx+0x5c>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fa19 	bl	8005a8c <SEGGER_RTT_ReadUpBufferNoLock>
 800565a:	4603      	mov	r3, r0
 800565c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	da02      	bge.n	800566a <_cbOnUARTTx+0x4e>
    r = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e000      	b.n	800566c <_cbOnUARTTx+0x50>
  }
Done:
 800566a:	bf00      	nop
  return r;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000014 	.word	0x20000014
 800567c:	08007f24 	.word	0x08007f24

08005680 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005688:	4a04      	ldr	r2, [pc, #16]	@ (800569c <SEGGER_UART_init+0x1c>)
 800568a:	4905      	ldr	r1, [pc, #20]	@ (80056a0 <SEGGER_UART_init+0x20>)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f863 	bl	8005758 <HIF_UART_Init>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	080055dd 	.word	0x080055dd
 80056a0:	0800561d 	.word	0x0800561d

080056a4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80056aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <USART2_IRQHandler+0x80>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d011      	beq.n	80056de <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80056ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <USART2_IRQHandler+0x84>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 030b 	and.w	r3, r3, #11
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <USART2_IRQHandler+0x88>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80056d4:	4b15      	ldr	r3, [pc, #84]	@ (800572c <USART2_IRQHandler+0x88>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	79fa      	ldrb	r2, [r7, #7]
 80056da:	4610      	mov	r0, r2
 80056dc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01a      	beq.n	800571e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <USART2_IRQHandler+0x8c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d015      	beq.n	800571c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80056f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005730 <USART2_IRQHandler+0x8c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	1dfa      	adds	r2, r7, #7
 80056f6:	4610      	mov	r0, r2
 80056f8:	4798      	blx	r3
 80056fa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005702:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <USART2_IRQHandler+0x90>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a0b      	ldr	r2, [pc, #44]	@ (8005734 <USART2_IRQHandler+0x90>)
 8005708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e006      	b.n	800571e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005710:	4b04      	ldr	r3, [pc, #16]	@ (8005724 <USART2_IRQHandler+0x80>)
 8005712:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005714:	79fa      	ldrb	r2, [r7, #7]
 8005716:	4b04      	ldr	r3, [pc, #16]	@ (8005728 <USART2_IRQHandler+0x84>)
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e000      	b.n	800571e <USART2_IRQHandler+0x7a>
      return;
 800571c:	bf00      	nop
    }
  }
}
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40004400 	.word	0x40004400
 8005728:	40004404 	.word	0x40004404
 800572c:	20012ee0 	.word	0x20012ee0
 8005730:	20012ee4 	.word	0x20012ee4
 8005734:	4000440c 	.word	0x4000440c

08005738 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a04      	ldr	r2, [pc, #16]	@ (8005754 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005746:	6013      	str	r3, [r2, #0]
}
 8005748:	bf00      	nop
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	4000440c 	.word	0x4000440c

08005758 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005764:	4b2e      	ldr	r3, [pc, #184]	@ (8005820 <HIF_UART_Init+0xc8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2d      	ldr	r2, [pc, #180]	@ (8005820 <HIF_UART_Init+0xc8>)
 800576a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800576e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005770:	4b2c      	ldr	r3, [pc, #176]	@ (8005824 <HIF_UART_Init+0xcc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2b      	ldr	r2, [pc, #172]	@ (8005824 <HIF_UART_Init+0xcc>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800577c:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <HIF_UART_Init+0xd0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005788:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005790:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005792:	4a25      	ldr	r2, [pc, #148]	@ (8005828 <HIF_UART_Init+0xd0>)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005798:	4b24      	ldr	r3, [pc, #144]	@ (800582c <HIF_UART_Init+0xd4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057a4:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80057ac:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80057ae:	4a1f      	ldr	r2, [pc, #124]	@ (800582c <HIF_UART_Init+0xd4>)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80057b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <HIF_UART_Init+0xd8>)
 80057b6:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80057ba:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80057bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <HIF_UART_Init+0xdc>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80057c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <HIF_UART_Init+0xe0>)
 80057c4:	2280      	movs	r2, #128	@ 0x80
 80057c6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80057ce:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <HIF_UART_Init+0xe4>)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	3301      	adds	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e6:	d302      	bcc.n	80057ee <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80057e8:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80057ec:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	4a11      	ldr	r2, [pc, #68]	@ (8005840 <HIF_UART_Init+0xe8>)
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80057fe:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <HIF_UART_Init+0xec>)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005804:	4a10      	ldr	r2, [pc, #64]	@ (8005848 <HIF_UART_Init+0xf0>)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800580a:	2106      	movs	r1, #6
 800580c:	2026      	movs	r0, #38	@ 0x26
 800580e:	f7ff feab 	bl	8005568 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005812:	2026      	movs	r0, #38	@ 0x26
 8005814:	f7ff fe8a 	bl	800552c <__NVIC_EnableIRQ>
}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023840 	.word	0x40023840
 8005824:	40023830 	.word	0x40023830
 8005828:	40020020 	.word	0x40020020
 800582c:	40020000 	.word	0x40020000
 8005830:	4000440c 	.word	0x4000440c
 8005834:	40004410 	.word	0x40004410
 8005838:	40004414 	.word	0x40004414
 800583c:	0501bd00 	.word	0x0501bd00
 8005840:	40004408 	.word	0x40004408
 8005844:	20012ee0 	.word	0x20012ee0
 8005848:	20012ee4 	.word	0x20012ee4

0800584c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005852:	4b24      	ldr	r3, [pc, #144]	@ (80058e4 <_DoInit+0x98>)
 8005854:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2203      	movs	r2, #3
 800585a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2203      	movs	r2, #3
 8005860:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a20      	ldr	r2, [pc, #128]	@ (80058e8 <_DoInit+0x9c>)
 8005866:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a20      	ldr	r2, [pc, #128]	@ (80058ec <_DoInit+0xa0>)
 800586c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005874:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <_DoInit+0x9c>)
 800588c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a17      	ldr	r2, [pc, #92]	@ (80058f0 <_DoInit+0xa4>)
 8005892:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2210      	movs	r2, #16
 8005898:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3307      	adds	r3, #7
 80058b0:	4a10      	ldr	r2, [pc, #64]	@ (80058f4 <_DoInit+0xa8>)
 80058b2:	6810      	ldr	r0, [r2, #0]
 80058b4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058b6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a0e      	ldr	r2, [pc, #56]	@ (80058f8 <_DoInit+0xac>)
 80058be:	6810      	ldr	r0, [r2, #0]
 80058c0:	6018      	str	r0, [r3, #0]
 80058c2:	8891      	ldrh	r1, [r2, #4]
 80058c4:	7992      	ldrb	r2, [r2, #6]
 80058c6:	8099      	strh	r1, [r3, #4]
 80058c8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058ca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80058d4:	f3bf 8f5f 	dmb	sy
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	20012ee8 	.word	0x20012ee8
 80058e8:	08007ea0 	.word	0x08007ea0
 80058ec:	20012f90 	.word	0x20012f90
 80058f0:	20013390 	.word	0x20013390
 80058f4:	08007eac 	.word	0x08007eac
 80058f8:	08007eb0 	.word	0x08007eb0

080058fc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	@ 0x28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005908:	2300      	movs	r3, #0
 800590a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	429a      	cmp	r2, r3
 800591e:	d905      	bls.n	800592c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
 800592a:	e007      	b.n	800593c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	1acb      	subs	r3, r1, r3
 8005936:	4413      	add	r3, r2
 8005938:	3b01      	subs	r3, #1
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005946:	4293      	cmp	r3, r2
 8005948:	bf28      	it	cs
 800594a:	4613      	movcs	r3, r2
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800594e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4293      	cmp	r3, r2
 8005954:	bf28      	it	cs
 8005956:	4613      	movcs	r3, r2
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f002 f8e5 	bl	8007b38 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800596e:	6a3a      	ldr	r2, [r7, #32]
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	4413      	add	r3, r2
 8005974:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	4413      	add	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	4413      	add	r3, r2
 800598c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	429a      	cmp	r2, r3
 8005996:	d101      	bne.n	800599c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800599c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1b2      	bne.n	8005912 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80059ac:	6a3b      	ldr	r3, [r7, #32]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	@ 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b088      	sub	sp, #32
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d911      	bls.n	80059fe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	6938      	ldr	r0, [r7, #16]
 80059ea:	f002 f8a5 	bl	8007b38 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059ee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	441a      	add	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80059fc:	e01f      	b.n	8005a3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	6938      	ldr	r0, [r7, #16]
 8005a12:	f002 f891 	bl	8007b38 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	4413      	add	r3, r2
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6938      	ldr	r0, [r7, #16]
 8005a30:	f002 f882 	bl	8007b38 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	60da      	str	r2, [r3, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005a46:	b480      	push	{r7}
 8005a48:	b087      	sub	sp, #28
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d808      	bhi.n	8005a74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	e004      	b.n	8005a7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005a7e:	697b      	ldr	r3, [r7, #20]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	371c      	adds	r7, #28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	@ 0x30
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005a98:	4b3e      	ldr	r3, [pc, #248]	@ (8005b94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005aa6:	f7ff fed1 	bl	800584c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	4613      	mov	r3, r2
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	4413      	add	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4a37      	ldr	r2, [pc, #220]	@ (8005b94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d92b      	bls.n	8005b30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bf28      	it	cs
 8005aea:	4613      	movcs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	4413      	add	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	6939      	ldr	r1, [r7, #16]
 8005afc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005afe:	f002 f81b 	bl	8007b38 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4413      	add	r3, r2
 8005b10:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d101      	bne.n	8005b30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	bf28      	it	cs
 8005b40:	4613      	movcs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d019      	beq.n	8005b7e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	4413      	add	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	6939      	ldr	r1, [r7, #16]
 8005b58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b5a:	f001 ffed 	bl	8007b38 <memcpy>
    NumBytesRead += NumBytesRem;
 8005b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	4413      	add	r3, r2
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3730      	adds	r7, #48	@ 0x30
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20012ee8 	.word	0x20012ee8

08005b98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08c      	sub	sp, #48	@ 0x30
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8005bb2:	f7ff fe4b 	bl	800584c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	3360      	adds	r3, #96	@ 0x60
 8005bc2:	4a37      	ldr	r2, [pc, #220]	@ (8005ca0 <SEGGER_RTT_ReadNoLock+0x108>)
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d92b      	bls.n	8005c3c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	bf28      	it	cs
 8005bf6:	4613      	movcs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	4413      	add	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	6939      	ldr	r1, [r7, #16]
 8005c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c0a:	f001 ff95 	bl	8007b38 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d101      	bne.n	8005c3c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	bf28      	it	cs
 8005c4c:	4613      	movcs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d019      	beq.n	8005c8a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	4413      	add	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	6939      	ldr	r1, [r7, #16]
 8005c64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c66:	f001 ff67 	bl	8007b38 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4413      	add	r3, r2
 8005c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c94:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3730      	adds	r7, #48	@ 0x30
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20012ee8 	.word	0x20012ee8

08005ca4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	3360      	adds	r3, #96	@ 0x60
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d40 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005cc2:	4413      	add	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d029      	beq.n	8005d22 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d82e      	bhi.n	8005d30 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d013      	beq.n	8005d02 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005cda:	e029      	b.n	8005d30 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005cdc:	6978      	ldr	r0, [r7, #20]
 8005cde:	f7ff feb2 	bl	8005a46 <_GetAvailWriteSpace>
 8005ce2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d202      	bcs.n	8005cf2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005cf0:	e021      	b.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f7ff fe5b 	bl	80059b6 <_WriteNoCheck>
    break;
 8005d00:	e019      	b.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005d02:	6978      	ldr	r0, [r7, #20]
 8005d04:	f7ff fe9f 	bl	8005a46 <_GetAvailWriteSpace>
 8005d08:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bf28      	it	cs
 8005d12:	4613      	movcs	r3, r2
 8005d14:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	f7ff fe4b 	bl	80059b6 <_WriteNoCheck>
    break;
 8005d20:	e009      	b.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	6978      	ldr	r0, [r7, #20]
 8005d28:	f7ff fde8 	bl	80058fc <_WriteBlocking>
 8005d2c:	61f8      	str	r0, [r7, #28]
    break;
 8005d2e:	e002      	b.n	8005d36 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
    break;
 8005d34:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005d36:	69fb      	ldr	r3, [r7, #28]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20012ee8 	.word	0x20012ee8

08005d44 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005d50:	4b0e      	ldr	r3, [pc, #56]	@ (8005d8c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005d5e:	f7ff fd75 	bl	800584c <_DoInit>
  SEGGER_RTT_LOCK();
 8005d62:	f3ef 8311 	mrs	r3, BASEPRI
 8005d66:	f04f 0120 	mov.w	r1, #32
 8005d6a:	f381 8811 	msr	BASEPRI, r1
 8005d6e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ff95 	bl	8005ca4 <SEGGER_RTT_WriteDownBufferNoLock>
 8005d7a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005d82:	697b      	ldr	r3, [r7, #20]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3720      	adds	r7, #32
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	20012ee8 	.word	0x20012ee8

08005d90 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e94 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005dac:	f7ff fd4e 	bl	800584c <_DoInit>
  SEGGER_RTT_LOCK();
 8005db0:	f3ef 8311 	mrs	r3, BASEPRI
 8005db4:	f04f 0120 	mov.w	r1, #32
 8005db8:	f381 8811 	msr	BASEPRI, r1
 8005dbc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005dbe:	4b35      	ldr	r3, [pc, #212]	@ (8005e94 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005dc0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	4613      	mov	r3, r2
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d008      	beq.n	8005df0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3301      	adds	r3, #1
 8005de2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	dbeb      	blt.n	8005dc6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005dee:	e000      	b.n	8005df2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005df0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	da3f      	bge.n	8005e7c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005dfc:	6939      	ldr	r1, [r7, #16]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	4613      	mov	r3, r2
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	4413      	add	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	440b      	add	r3, r1
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e10:	6939      	ldr	r1, [r7, #16]
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	440b      	add	r3, r1
 8005e20:	3304      	adds	r3, #4
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e26:	6939      	ldr	r1, [r7, #16]
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	440b      	add	r3, r1
 8005e34:	3320      	adds	r3, #32
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e3a:	6939      	ldr	r1, [r7, #16]
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	440b      	add	r3, r1
 8005e48:	3328      	adds	r3, #40	@ 0x28
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e4e:	6939      	ldr	r1, [r7, #16]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3324      	adds	r3, #36	@ 0x24
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e62:	6939      	ldr	r1, [r7, #16]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	4613      	mov	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	332c      	adds	r3, #44	@ 0x2c
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e76:	f3bf 8f5f 	dmb	sy
 8005e7a:	e002      	b.n	8005e82 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e80:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005e88:	69fb      	ldr	r3, [r7, #28]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20012ee8 	.word	0x20012ee8

08005e98 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005ea6:	4b33      	ldr	r3, [pc, #204]	@ (8005f74 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ea8:	61bb      	str	r3, [r7, #24]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005eb4:	f7ff fcca 	bl	800584c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8005f74 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005eba:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d24d      	bcs.n	8005f64 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005ec8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ecc:	f04f 0120 	mov.w	r1, #32
 8005ed0:	f381 8811 	msr	BASEPRI, r1
 8005ed4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d031      	beq.n	8005f40 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005edc:	6979      	ldr	r1, [r7, #20]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	440b      	add	r3, r1
 8005eea:	3360      	adds	r3, #96	@ 0x60
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ef0:	6979      	ldr	r1, [r7, #20]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	440b      	add	r3, r1
 8005efe:	3364      	adds	r3, #100	@ 0x64
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005f04:	6979      	ldr	r1, [r7, #20]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	4413      	add	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	440b      	add	r3, r1
 8005f12:	3368      	adds	r3, #104	@ 0x68
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005f18:	6979      	ldr	r1, [r7, #20]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	3370      	adds	r3, #112	@ 0x70
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	440b      	add	r3, r1
 8005f3a:	336c      	adds	r3, #108	@ 0x6c
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4613      	mov	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	4413      	add	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	440b      	add	r3, r1
 8005f4e:	3374      	adds	r3, #116	@ 0x74
 8005f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f52:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f54:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e002      	b.n	8005f6a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f68:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20012ee8 	.word	0x20012ee8

08005f78 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f88:	e002      	b.n	8005f90 <_EncodeStr+0x18>
    Len++;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f6      	bne.n	8005f8a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d901      	bls.n	8005fa8 <_EncodeStr+0x30>
    Len = Limit;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	2bfe      	cmp	r3, #254	@ 0xfe
 8005fac:	d806      	bhi.n	8005fbc <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	60fa      	str	r2, [r7, #12]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e011      	b.n	8005fe0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	60fa      	str	r2, [r7, #12]
 8005fc2:	22ff      	movs	r2, #255	@ 0xff
 8005fc4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	60fa      	str	r2, [r7, #12]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	0a19      	lsrs	r1, r3, #8
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	60fa      	str	r2, [r7, #12]
 8005fdc:	b2ca      	uxtb	r2, r1
 8005fde:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005fe4:	e00a      	b.n	8005ffc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	1c53      	adds	r3, r2, #1
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1c59      	adds	r1, r3, #1
 8005ff0:	60f9      	str	r1, [r7, #12]
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	701a      	strb	r2, [r3, #0]
    n++;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d3f0      	bcc.n	8005fe6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006004:	68fb      	ldr	r3, [r7, #12]
}
 8006006:	4618      	mov	r0, r3
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006032:	4b35      	ldr	r3, [pc, #212]	@ (8006108 <_HandleIncomingPacket+0xdc>)
 8006034:	7e1b      	ldrb	r3, [r3, #24]
 8006036:	4618      	mov	r0, r3
 8006038:	1cfb      	adds	r3, r7, #3
 800603a:	2201      	movs	r2, #1
 800603c:	4619      	mov	r1, r3
 800603e:	f7ff fdab 	bl	8005b98 <SEGGER_RTT_ReadNoLock>
 8006042:	4603      	mov	r3, r0
 8006044:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dd59      	ble.n	8006100 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	2b80      	cmp	r3, #128	@ 0x80
 8006050:	d032      	beq.n	80060b8 <_HandleIncomingPacket+0x8c>
 8006052:	2b80      	cmp	r3, #128	@ 0x80
 8006054:	dc42      	bgt.n	80060dc <_HandleIncomingPacket+0xb0>
 8006056:	2b07      	cmp	r3, #7
 8006058:	dc16      	bgt.n	8006088 <_HandleIncomingPacket+0x5c>
 800605a:	2b00      	cmp	r3, #0
 800605c:	dd3e      	ble.n	80060dc <_HandleIncomingPacket+0xb0>
 800605e:	3b01      	subs	r3, #1
 8006060:	2b06      	cmp	r3, #6
 8006062:	d83b      	bhi.n	80060dc <_HandleIncomingPacket+0xb0>
 8006064:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <_HandleIncomingPacket+0x40>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800608f 	.word	0x0800608f
 8006070:	08006095 	.word	0x08006095
 8006074:	0800609b 	.word	0x0800609b
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a7 	.word	0x080060a7
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060b3 	.word	0x080060b3
 8006088:	2b7f      	cmp	r3, #127	@ 0x7f
 800608a:	d034      	beq.n	80060f6 <_HandleIncomingPacket+0xca>
 800608c:	e026      	b.n	80060dc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800608e:	f000 ff43 	bl	8006f18 <SEGGER_SYSVIEW_Start>
      break;
 8006092:	e035      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006094:	f000 fffc 	bl	8007090 <SEGGER_SYSVIEW_Stop>
      break;
 8006098:	e032      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800609a:	f001 f9d5 	bl	8007448 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800609e:	e02f      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80060a0:	f001 f99a 	bl	80073d8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80060a4:	e02c      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80060a6:	f001 f819 	bl	80070dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060aa:	e029      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060ac:	f001 fc08 	bl	80078c0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060b0:	e026      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060b2:	f001 fbe7 	bl	8007884 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060b6:	e023      	b.n	8006100 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060b8:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <_HandleIncomingPacket+0xdc>)
 80060ba:	7e1b      	ldrb	r3, [r3, #24]
 80060bc:	4618      	mov	r0, r3
 80060be:	1cfb      	adds	r3, r7, #3
 80060c0:	2201      	movs	r2, #1
 80060c2:	4619      	mov	r1, r3
 80060c4:	f7ff fd68 	bl	8005b98 <SEGGER_RTT_ReadNoLock>
 80060c8:	4603      	mov	r3, r0
 80060ca:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dd13      	ble.n	80060fa <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 fb55 	bl	8007784 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060da:	e00e      	b.n	80060fa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da0c      	bge.n	80060fe <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060e4:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <_HandleIncomingPacket+0xdc>)
 80060e6:	7e1b      	ldrb	r3, [r3, #24]
 80060e8:	4618      	mov	r0, r3
 80060ea:	1cfb      	adds	r3, r7, #3
 80060ec:	2201      	movs	r2, #1
 80060ee:	4619      	mov	r1, r3
 80060f0:	f7ff fd52 	bl	8005b98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060f4:	e003      	b.n	80060fe <_HandleIncomingPacket+0xd2>
      break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <_HandleIncomingPacket+0xd4>
      break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <_HandleIncomingPacket+0xd4>
      break;
 80060fe:	bf00      	nop
    }
  }
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	200143a8 	.word	0x200143a8

0800610c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	@ 0x30
 8006110:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006112:	2301      	movs	r3, #1
 8006114:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	3301      	adds	r3, #1
 800611a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006120:	4b32      	ldr	r3, [pc, #200]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006126:	e00b      	b.n	8006140 <_TrySendOverflowPacket+0x34>
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	1c59      	adds	r1, r3, #1
 8006130:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006132:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613c:	09db      	lsrs	r3, r3, #7
 800613e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	2b7f      	cmp	r3, #127	@ 0x7f
 8006144:	d8f0      	bhi.n	8006128 <_TrySendOverflowPacket+0x1c>
 8006146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800614c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006154:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006156:	4b26      	ldr	r3, [pc, #152]	@ (80061f0 <_TrySendOverflowPacket+0xe4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800615c:	4b23      	ldr	r3, [pc, #140]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	e00b      	b.n	8006188 <_TrySendOverflowPacket+0x7c>
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	1c59      	adds	r1, r3, #1
 8006178:	6279      	str	r1, [r7, #36]	@ 0x24
 800617a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	09db      	lsrs	r3, r3, #7
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b7f      	cmp	r3, #127	@ 0x7f
 800618c:	d8f0      	bhi.n	8006170 <_TrySendOverflowPacket+0x64>
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	627a      	str	r2, [r7, #36]	@ 0x24
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800619e:	4b13      	ldr	r3, [pc, #76]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	4618      	mov	r0, r3
 80061a4:	1d3b      	adds	r3, r7, #4
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	1d3b      	adds	r3, r7, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	f7fa f816 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061b4:	4603      	mov	r3, r0
 80061b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80061b8:	f7ff fabe 	bl	8005738 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061c2:	4a0a      	ldr	r2, [pc, #40]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061c8:	4b08      	ldr	r3, [pc, #32]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	4b06      	ldr	r3, [pc, #24]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e004      	b.n	80061e0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061d6:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	3301      	adds	r3, #1
 80061dc:	4a03      	ldr	r2, [pc, #12]	@ (80061ec <_TrySendOverflowPacket+0xe0>)
 80061de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061e0:	693b      	ldr	r3, [r7, #16]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3730      	adds	r7, #48	@ 0x30
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200143a8 	.word	0x200143a8
 80061f0:	e0001004 	.word	0xe0001004

080061f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	@ 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006200:	4b6d      	ldr	r3, [pc, #436]	@ (80063b8 <_SendPacket+0x1c4>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d010      	beq.n	800622a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006208:	4b6b      	ldr	r3, [pc, #428]	@ (80063b8 <_SendPacket+0x1c4>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80a5 	beq.w	800635c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006212:	4b69      	ldr	r3, [pc, #420]	@ (80063b8 <_SendPacket+0x1c4>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d109      	bne.n	800622e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800621a:	f7ff ff77 	bl	800610c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800621e:	4b66      	ldr	r3, [pc, #408]	@ (80063b8 <_SendPacket+0x1c4>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b01      	cmp	r3, #1
 8006224:	f040 809c 	bne.w	8006360 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8006228:	e001      	b.n	800622e <_SendPacket+0x3a>
    goto Send;
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <_SendPacket+0x3c>
Send:
 800622e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b1f      	cmp	r3, #31
 8006234:	d809      	bhi.n	800624a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006236:	4b60      	ldr	r3, [pc, #384]	@ (80063b8 <_SendPacket+0x1c4>)
 8006238:	69da      	ldr	r2, [r3, #28]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	fa22 f303 	lsr.w	r3, r2, r3
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 808d 	bne.w	8006364 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b17      	cmp	r3, #23
 800624e:	d807      	bhi.n	8006260 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3b01      	subs	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e03d      	b.n	80062dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b7f      	cmp	r3, #127	@ 0x7f
 800626c:	d912      	bls.n	8006294 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	09da      	lsrs	r2, r3, #7
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b01      	subs	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	3a01      	subs	r2, #1
 8006286:	60fa      	str	r2, [r7, #12]
 8006288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	e006      	b.n	80062a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3b01      	subs	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a6:	d912      	bls.n	80062ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	09da      	lsrs	r2, r3, #7
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	3a01      	subs	r2, #1
 80062c0:	60fa      	str	r2, [r7, #12]
 80062c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	e006      	b.n	80062dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062dc:	4b37      	ldr	r3, [pc, #220]	@ (80063bc <_SendPacket+0x1c8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80062e2:	4b35      	ldr	r3, [pc, #212]	@ (80063b8 <_SendPacket+0x1c4>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	623b      	str	r3, [r7, #32]
 80062f4:	e00b      	b.n	800630e <_SendPacket+0x11a>
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8006300:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	2b7f      	cmp	r3, #127	@ 0x7f
 8006312:	d8f0      	bhi.n	80062f6 <_SendPacket+0x102>
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	627a      	str	r2, [r7, #36]	@ 0x24
 800631a:	6a3a      	ldr	r2, [r7, #32]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006324:	4b24      	ldr	r3, [pc, #144]	@ (80063b8 <_SendPacket+0x1c4>)
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	4618      	mov	r0, r3
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	461a      	mov	r2, r3
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	f7f9 ff54 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006338:	4603      	mov	r3, r0
 800633a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800633c:	f7ff f9fc 	bl	8005738 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006346:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <_SendPacket+0x1c4>)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	60d3      	str	r3, [r2, #12]
 800634c:	e00b      	b.n	8006366 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800634e:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <_SendPacket+0x1c4>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	3301      	adds	r3, #1
 8006354:	b2da      	uxtb	r2, r3
 8006356:	4b18      	ldr	r3, [pc, #96]	@ (80063b8 <_SendPacket+0x1c4>)
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e004      	b.n	8006366 <_SendPacket+0x172>
    goto SendDone;
 800635c:	bf00      	nop
 800635e:	e002      	b.n	8006366 <_SendPacket+0x172>
      goto SendDone;
 8006360:	bf00      	nop
 8006362:	e000      	b.n	8006366 <_SendPacket+0x172>
      goto SendDone;
 8006364:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <_SendPacket+0x1c4>)
 8006368:	7e1b      	ldrb	r3, [r3, #24]
 800636a:	4619      	mov	r1, r3
 800636c:	4a14      	ldr	r2, [pc, #80]	@ (80063c0 <_SendPacket+0x1cc>)
 800636e:	460b      	mov	r3, r1
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	440b      	add	r3, r1
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	336c      	adds	r3, #108	@ 0x6c
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b0e      	ldr	r3, [pc, #56]	@ (80063b8 <_SendPacket+0x1c4>)
 800637e:	7e1b      	ldrb	r3, [r3, #24]
 8006380:	4618      	mov	r0, r3
 8006382:	490f      	ldr	r1, [pc, #60]	@ (80063c0 <_SendPacket+0x1cc>)
 8006384:	4603      	mov	r3, r0
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4403      	add	r3, r0
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	440b      	add	r3, r1
 800638e:	3370      	adds	r3, #112	@ 0x70
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d00b      	beq.n	80063ae <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006396:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <_SendPacket+0x1c4>)
 8006398:	789b      	ldrb	r3, [r3, #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d107      	bne.n	80063ae <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800639e:	4b06      	ldr	r3, [pc, #24]	@ (80063b8 <_SendPacket+0x1c4>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80063a4:	f7ff fe42 	bl	800602c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80063a8:	4b03      	ldr	r3, [pc, #12]	@ (80063b8 <_SendPacket+0x1c4>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80063ae:	bf00      	nop
 80063b0:	3728      	adds	r7, #40	@ 0x28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	200143a8 	.word	0x200143a8
 80063bc:	e0001004 	.word	0xe0001004
 80063c0:	20012ee8 	.word	0x20012ee8

080063c4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	@ 0x28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	3301      	adds	r3, #1
 80063da:	2b80      	cmp	r3, #128	@ 0x80
 80063dc:	d80a      	bhi.n	80063f4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	1c59      	adds	r1, r3, #1
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6051      	str	r1, [r2, #4]
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b80      	cmp	r3, #128	@ 0x80
 80063fa:	d15a      	bne.n	80064b2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	623b      	str	r3, [r7, #32]
 800641c:	e00b      	b.n	8006436 <_StoreChar+0x72>
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	b2da      	uxtb	r2, r3
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	6279      	str	r1, [r7, #36]	@ 0x24
 8006428:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	09db      	lsrs	r3, r3, #7
 8006434:	623b      	str	r3, [r7, #32]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	2b7f      	cmp	r3, #127	@ 0x7f
 800643a:	d8f0      	bhi.n	800641e <_StoreChar+0x5a>
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	627a      	str	r2, [r7, #36]	@ 0x24
 8006442:	6a3a      	ldr	r2, [r7, #32]
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	61fb      	str	r3, [r7, #28]
 8006450:	2300      	movs	r3, #0
 8006452:	61bb      	str	r3, [r7, #24]
 8006454:	e00b      	b.n	800646e <_StoreChar+0xaa>
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	b2da      	uxtb	r2, r3
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	61f9      	str	r1, [r7, #28]
 8006460:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006464:	b2d2      	uxtb	r2, r2
 8006466:	701a      	strb	r2, [r3, #0]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	09db      	lsrs	r3, r3, #7
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b7f      	cmp	r3, #127	@ 0x7f
 8006472:	d8f0      	bhi.n	8006456 <_StoreChar+0x92>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	61fa      	str	r2, [r7, #28]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	221a      	movs	r2, #26
 800648a:	6939      	ldr	r1, [r7, #16]
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff feb1 	bl	80061f4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff fdbb 	bl	8006012 <_PreparePacket>
 800649c:	4602      	mov	r2, r0
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]
  }
}
 80064b2:	bf00      	nop
 80064b4:	3728      	adds	r7, #40	@ 0x28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80064ce:	2301      	movs	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80064d2:	2301      	movs	r3, #1
 80064d4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80064d6:	e007      	b.n	80064e8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	623b      	str	r3, [r7, #32]
    Width++;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3301      	adds	r3, #1
 80064e6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80064e8:	6a3a      	ldr	r2, [r7, #32]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d2f3      	bcs.n	80064d8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d901      	bls.n	80064fc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80064fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d000      	beq.n	8006508 <_PrintUnsigned+0x4c>
 8006506:	e01f      	b.n	8006548 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8006508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01c      	beq.n	8006548 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <_PrintUnsigned+0x68>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <_PrintUnsigned+0x68>
        c = '0';
 800651e:	2330      	movs	r3, #48	@ 0x30
 8006520:	76fb      	strb	r3, [r7, #27]
 8006522:	e001      	b.n	8006528 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006524:	2320      	movs	r3, #32
 8006526:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006528:	e007      	b.n	800653a <_PrintUnsigned+0x7e>
        FieldWidth--;
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	3b01      	subs	r3, #1
 800652e:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006530:	7efb      	ldrb	r3, [r7, #27]
 8006532:	4619      	mov	r1, r3
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff ff45 	bl	80063c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <_PrintUnsigned+0x8c>
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	429a      	cmp	r2, r3
 8006546:	d3f0      	bcc.n	800652a <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d903      	bls.n	8006556 <_PrintUnsigned+0x9a>
      NumDigits--;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3b01      	subs	r3, #1
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	e009      	b.n	800656a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	429a      	cmp	r2, r3
 8006566:	d200      	bcs.n	800656a <_PrintUnsigned+0xae>
        break;
 8006568:	e005      	b.n	8006576 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	fb02 f303 	mul.w	r3, r2, r3
 8006572:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006574:	e7e8      	b.n	8006548 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	fbb2 f3f3 	udiv	r3, r2, r3
 800657e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006584:	fb02 f303 	mul.w	r3, r2, r3
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800658e:	4a15      	ldr	r2, [pc, #84]	@ (80065e4 <_PrintUnsigned+0x128>)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7ff ff13 	bl	80063c4 <_StoreChar>
    Digit /= Base;
 800659e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e3      	bne.n	8006576 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80065ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d011      	beq.n	80065dc <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065be:	e006      	b.n	80065ce <_PrintUnsigned+0x112>
        FieldWidth--;
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	3b01      	subs	r3, #1
 80065c4:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80065c6:	2120      	movs	r1, #32
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f7ff fefb 	bl	80063c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <_PrintUnsigned+0x120>
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	429a      	cmp	r2, r3
 80065da:	d3f1      	bcc.n	80065c0 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80065dc:	bf00      	nop
 80065de:	3728      	adds	r7, #40	@ 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	08007f34 	.word	0x08007f34

080065e8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfb8      	it	lt
 80065fc:	425b      	neglt	r3, r3
 80065fe:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006600:	2301      	movs	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006604:	e007      	b.n	8006616 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	fb92 f3f3 	sdiv	r3, r2, r3
 800660e:	613b      	str	r3, [r7, #16]
    Width++;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3301      	adds	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	429a      	cmp	r2, r3
 800661c:	daf3      	bge.n	8006606 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	429a      	cmp	r2, r3
 8006624:	d901      	bls.n	800662a <_PrintInt+0x42>
    Width = NumDigits;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <_PrintInt+0x5e>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	db04      	blt.n	8006640 <_PrintInt+0x58>
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <_PrintInt+0x5e>
    FieldWidth--;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	3b01      	subs	r3, #1
 8006644:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <_PrintInt+0x6e>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d016      	beq.n	8006684 <_PrintInt+0x9c>
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d111      	bne.n	8006684 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006666:	e006      	b.n	8006676 <_PrintInt+0x8e>
        FieldWidth--;
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	3b01      	subs	r3, #1
 800666c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800666e:	2120      	movs	r1, #32
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fea7 	bl	80063c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <_PrintInt+0x9c>
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	429a      	cmp	r2, r3
 8006682:	d3f1      	bcc.n	8006668 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2b00      	cmp	r3, #0
 8006688:	da07      	bge.n	800669a <_PrintInt+0xb2>
    v = -v;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	425b      	negs	r3, r3
 800668e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006690:	212d      	movs	r1, #45	@ 0x2d
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff fe96 	bl	80063c4 <_StoreChar>
 8006698:	e008      	b.n	80066ac <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80066a4:	212b      	movs	r1, #43	@ 0x2b
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fe8c 	bl	80063c4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d019      	beq.n	80066ea <_PrintInt+0x102>
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d114      	bne.n	80066ea <_PrintInt+0x102>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d111      	bne.n	80066ea <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00e      	beq.n	80066ea <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066cc:	e006      	b.n	80066dc <_PrintInt+0xf4>
        FieldWidth--;
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80066d4:	2130      	movs	r1, #48	@ 0x30
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f7ff fe74 	bl	80063c4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <_PrintInt+0x102>
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d3f1      	bcc.n	80066ce <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fedf 	bl	80064bc <_PrintUnsigned>
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b098      	sub	sp, #96	@ 0x60
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006714:	f3ef 8311 	mrs	r3, BASEPRI
 8006718:	f04f 0120 	mov.w	r1, #32
 800671c:	f381 8811 	msr	BASEPRI, r1
 8006720:	633b      	str	r3, [r7, #48]	@ 0x30
 8006722:	48b7      	ldr	r0, [pc, #732]	@ (8006a00 <_VPrintTarget+0x2f8>)
 8006724:	f7ff fc75 	bl	8006012 <_PreparePacket>
 8006728:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800672a:	4bb5      	ldr	r3, [pc, #724]	@ (8006a00 <_VPrintTarget+0x2f8>)
 800672c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006734:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3301      	adds	r3, #1
 800673a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3301      	adds	r3, #1
 800674c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800674e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8183 	beq.w	8006a5e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006758:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800675c:	2b25      	cmp	r3, #37	@ 0x25
 800675e:	f040 8170 	bne.w	8006a42 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006762:	2300      	movs	r3, #0
 8006764:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006766:	2301      	movs	r3, #1
 8006768:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006772:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006776:	3b23      	subs	r3, #35	@ 0x23
 8006778:	2b0d      	cmp	r3, #13
 800677a:	d83f      	bhi.n	80067fc <_VPrintTarget+0xf4>
 800677c:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <_VPrintTarget+0x7c>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	080067ed 	.word	0x080067ed
 8006788:	080067fd 	.word	0x080067fd
 800678c:	080067fd 	.word	0x080067fd
 8006790:	080067fd 	.word	0x080067fd
 8006794:	080067fd 	.word	0x080067fd
 8006798:	080067fd 	.word	0x080067fd
 800679c:	080067fd 	.word	0x080067fd
 80067a0:	080067fd 	.word	0x080067fd
 80067a4:	080067dd 	.word	0x080067dd
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067fd 	.word	0x080067fd
 80067b4:	080067fd 	.word	0x080067fd
 80067b8:	080067cd 	.word	0x080067cd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80067bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e01a      	b.n	8006802 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80067cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ce:	f043 0302 	orr.w	r3, r3, #2
 80067d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e012      	b.n	8006802 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80067dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067de:	f043 0304 	orr.w	r3, r3, #4
 80067e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e00a      	b.n	8006802 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80067ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ee:	f043 0308 	orr.w	r3, r3, #8
 80067f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e002      	b.n	8006802 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80067fc:	2300      	movs	r3, #0
 80067fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006800:	bf00      	nop
        }
      } while (v);
 8006802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1b0      	bne.n	800676a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006808:	2300      	movs	r3, #0
 800680a:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006814:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006818:	2b2f      	cmp	r3, #47	@ 0x2f
 800681a:	d912      	bls.n	8006842 <_VPrintTarget+0x13a>
 800681c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006820:	2b39      	cmp	r3, #57	@ 0x39
 8006822:	d80e      	bhi.n	8006842 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800682a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800682c:	4613      	mov	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4413      	add	r3, r2
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	461a      	mov	r2, r3
 8006836:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800683a:	4413      	add	r3, r2
 800683c:	3b30      	subs	r3, #48	@ 0x30
 800683e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006840:	e7e4      	b.n	800680c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006842:	2300      	movs	r3, #0
 8006844:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800684e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006852:	2b2e      	cmp	r3, #46	@ 0x2e
 8006854:	d11d      	bne.n	8006892 <_VPrintTarget+0x18a>
        sFormat++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006864:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006868:	2b2f      	cmp	r3, #47	@ 0x2f
 800686a:	d912      	bls.n	8006892 <_VPrintTarget+0x18a>
 800686c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006870:	2b39      	cmp	r3, #57	@ 0x39
 8006872:	d80e      	bhi.n	8006892 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800687a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	461a      	mov	r2, r3
 8006886:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800688a:	4413      	add	r3, r2
 800688c:	3b30      	subs	r3, #48	@ 0x30
 800688e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006890:	e7e4      	b.n	800685c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800689a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800689e:	2b6c      	cmp	r3, #108	@ 0x6c
 80068a0:	d003      	beq.n	80068aa <_VPrintTarget+0x1a2>
 80068a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068a6:	2b68      	cmp	r3, #104	@ 0x68
 80068a8:	d107      	bne.n	80068ba <_VPrintTarget+0x1b2>
          c = *sFormat;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80068b8:	e7ef      	b.n	800689a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80068ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068be:	2b25      	cmp	r3, #37	@ 0x25
 80068c0:	f000 80b3 	beq.w	8006a2a <_VPrintTarget+0x322>
 80068c4:	2b25      	cmp	r3, #37	@ 0x25
 80068c6:	f2c0 80b7 	blt.w	8006a38 <_VPrintTarget+0x330>
 80068ca:	2b78      	cmp	r3, #120	@ 0x78
 80068cc:	f300 80b4 	bgt.w	8006a38 <_VPrintTarget+0x330>
 80068d0:	2b58      	cmp	r3, #88	@ 0x58
 80068d2:	f2c0 80b1 	blt.w	8006a38 <_VPrintTarget+0x330>
 80068d6:	3b58      	subs	r3, #88	@ 0x58
 80068d8:	2b20      	cmp	r3, #32
 80068da:	f200 80ad 	bhi.w	8006a38 <_VPrintTarget+0x330>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <_VPrintTarget+0x1dc>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	080069db 	.word	0x080069db
 80068e8:	08006a39 	.word	0x08006a39
 80068ec:	08006a39 	.word	0x08006a39
 80068f0:	08006a39 	.word	0x08006a39
 80068f4:	08006a39 	.word	0x08006a39
 80068f8:	08006a39 	.word	0x08006a39
 80068fc:	08006a39 	.word	0x08006a39
 8006900:	08006a39 	.word	0x08006a39
 8006904:	08006a39 	.word	0x08006a39
 8006908:	08006a39 	.word	0x08006a39
 800690c:	08006a39 	.word	0x08006a39
 8006910:	08006969 	.word	0x08006969
 8006914:	0800698f 	.word	0x0800698f
 8006918:	08006a39 	.word	0x08006a39
 800691c:	08006a39 	.word	0x08006a39
 8006920:	08006a39 	.word	0x08006a39
 8006924:	08006a39 	.word	0x08006a39
 8006928:	08006a39 	.word	0x08006a39
 800692c:	08006a39 	.word	0x08006a39
 8006930:	08006a39 	.word	0x08006a39
 8006934:	08006a39 	.word	0x08006a39
 8006938:	08006a39 	.word	0x08006a39
 800693c:	08006a39 	.word	0x08006a39
 8006940:	08006a39 	.word	0x08006a39
 8006944:	08006a05 	.word	0x08006a05
 8006948:	08006a39 	.word	0x08006a39
 800694c:	08006a39 	.word	0x08006a39
 8006950:	08006a39 	.word	0x08006a39
 8006954:	08006a39 	.word	0x08006a39
 8006958:	080069b5 	.word	0x080069b5
 800695c:	08006a39 	.word	0x08006a39
 8006960:	08006a39 	.word	0x08006a39
 8006964:	080069db 	.word	0x080069db
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	1d19      	adds	r1, r3, #4
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6011      	str	r1, [r2, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006978:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 800697c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fd1c 	bl	80063c4 <_StoreChar>
        break;
 800698c:	e055      	b.n	8006a3a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	1d19      	adds	r1, r3, #4
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6011      	str	r1, [r2, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800699c:	f107 0014 	add.w	r0, r7, #20
 80069a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069aa:	220a      	movs	r2, #10
 80069ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069ae:	f7ff fe1b 	bl	80065e8 <_PrintInt>
        break;
 80069b2:	e042      	b.n	8006a3a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	1d19      	adds	r1, r3, #4
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6011      	str	r1, [r2, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80069c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069c4:	f107 0014 	add.w	r0, r7, #20
 80069c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069d2:	220a      	movs	r2, #10
 80069d4:	f7ff fd72 	bl	80064bc <_PrintUnsigned>
        break;
 80069d8:	e02f      	b.n	8006a3a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	1d19      	adds	r1, r3, #4
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6011      	str	r1, [r2, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80069e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069ea:	f107 0014 	add.w	r0, r7, #20
 80069ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f8:	2210      	movs	r2, #16
 80069fa:	f7ff fd5f 	bl	80064bc <_PrintUnsigned>
        break;
 80069fe:	e01c      	b.n	8006a3a <_VPrintTarget+0x332>
 8006a00:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	1d19      	adds	r1, r3, #4
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6011      	str	r1, [r2, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006a12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a14:	f107 0014 	add.w	r0, r7, #20
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	2308      	movs	r3, #8
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2308      	movs	r3, #8
 8006a22:	2210      	movs	r2, #16
 8006a24:	f7ff fd4a 	bl	80064bc <_PrintUnsigned>
        break;
 8006a28:	e007      	b.n	8006a3a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006a2a:	f107 0314 	add.w	r3, r7, #20
 8006a2e:	2125      	movs	r1, #37	@ 0x25
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff fcc7 	bl	80063c4 <_StoreChar>
        break;
 8006a36:	e000      	b.n	8006a3a <_VPrintTarget+0x332>
      default:
        break;
 8006a38:	bf00      	nop
      }
      sFormat++;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e007      	b.n	8006a52 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006a42:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006a46:	f107 0314 	add.w	r3, r7, #20
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fcb9 	bl	80063c4 <_StoreChar>
    }
  } while (*sFormat);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f47f ae72 	bne.w	8006740 <_VPrintTarget+0x38>
 8006a5c:	e000      	b.n	8006a60 <_VPrintTarget+0x358>
      break;
 8006a5e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d041      	beq.n	8006aea <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a76:	e00b      	b.n	8006a90 <_VPrintTarget+0x388>
 8006a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7e:	1c59      	adds	r1, r3, #1
 8006a80:	6439      	str	r1, [r7, #64]	@ 0x40
 8006a82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8c:	09db      	lsrs	r3, r3, #7
 8006a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a94:	d8f0      	bhi.n	8006a78 <_VPrintTarget+0x370>
 8006a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aaa:	2300      	movs	r3, #0
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aae:	e00b      	b.n	8006ac8 <_VPrintTarget+0x3c0>
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	1c59      	adds	r1, r3, #1
 8006ab8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006aba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	09db      	lsrs	r3, r3, #7
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006acc:	d8f0      	bhi.n	8006ab0 <_VPrintTarget+0x3a8>
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	69b9      	ldr	r1, [r7, #24]
 8006ae2:	221a      	movs	r2, #26
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fb85 	bl	80061f4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006af0:	bf00      	nop
 8006af2:	3758      	adds	r7, #88	@ 0x58
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b06:	2300      	movs	r3, #0
 8006b08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006b0c:	4917      	ldr	r1, [pc, #92]	@ (8006b6c <SEGGER_SYSVIEW_Init+0x74>)
 8006b0e:	4818      	ldr	r0, [pc, #96]	@ (8006b70 <SEGGER_SYSVIEW_Init+0x78>)
 8006b10:	f7ff f93e 	bl	8005d90 <SEGGER_RTT_AllocUpBuffer>
 8006b14:	4603      	mov	r3, r0
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	4b16      	ldr	r3, [pc, #88]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b1a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006b1c:	4b15      	ldr	r3, [pc, #84]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b1e:	785a      	ldrb	r2, [r3, #1]
 8006b20:	4b14      	ldr	r3, [pc, #80]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b22:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006b24:	4b13      	ldr	r3, [pc, #76]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b26:	7e1b      	ldrb	r3, [r3, #24]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	2308      	movs	r3, #8
 8006b30:	4a11      	ldr	r2, [pc, #68]	@ (8006b78 <SEGGER_SYSVIEW_Init+0x80>)
 8006b32:	490f      	ldr	r1, [pc, #60]	@ (8006b70 <SEGGER_SYSVIEW_Init+0x78>)
 8006b34:	f7ff f9b0 	bl	8005e98 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006b38:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <SEGGER_SYSVIEW_Init+0x84>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b44:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006b46:	4a0b      	ldr	r2, [pc, #44]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006b4c:	4a09      	ldr	r2, [pc, #36]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006b52:	4a08      	ldr	r2, [pc, #32]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006b58:	4a06      	ldr	r2, [pc, #24]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006b5e:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <SEGGER_SYSVIEW_Init+0x7c>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	200133a0 	.word	0x200133a0
 8006b70:	08007eb8 	.word	0x08007eb8
 8006b74:	200143a8 	.word	0x200143a8
 8006b78:	200143a0 	.word	0x200143a0
 8006b7c:	e0001004 	.word	0xe0001004

08006b80 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006b88:	4a04      	ldr	r2, [pc, #16]	@ (8006b9c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6113      	str	r3, [r2, #16]
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	200143a8 	.word	0x200143a8

08006ba0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bac:	f04f 0120 	mov.w	r1, #32
 8006bb0:	f381 8811 	msr	BASEPRI, r1
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	4808      	ldr	r0, [pc, #32]	@ (8006bd8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006bb8:	f7ff fa2b 	bl	8006012 <_PreparePacket>
 8006bbc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	68b8      	ldr	r0, [r7, #8]
 8006bc4:	f7ff fb16 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200143d8 	.word	0x200143d8

08006bdc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006be6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bea:	f04f 0120 	mov.w	r1, #32
 8006bee:	f381 8811 	msr	BASEPRI, r1
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	4816      	ldr	r0, [pc, #88]	@ (8006c50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006bf6:	f7ff fa0c 	bl	8006012 <_PreparePacket>
 8006bfa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e00b      	b.n	8006c22 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	1c59      	adds	r1, r3, #1
 8006c12:	61f9      	str	r1, [r7, #28]
 8006c14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	09db      	lsrs	r3, r3, #7
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c26:	d8f0      	bhi.n	8006c0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	61fa      	str	r2, [r7, #28]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	6938      	ldr	r0, [r7, #16]
 8006c3e:	f7ff fad9 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f383 8811 	msr	BASEPRI, r3
}
 8006c48:	bf00      	nop
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	200143d8 	.word	0x200143d8

08006c54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08c      	sub	sp, #48	@ 0x30
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c60:	f3ef 8311 	mrs	r3, BASEPRI
 8006c64:	f04f 0120 	mov.w	r1, #32
 8006c68:	f381 8811 	msr	BASEPRI, r1
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	4825      	ldr	r0, [pc, #148]	@ (8006d04 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006c70:	f7ff f9cf 	bl	8006012 <_PreparePacket>
 8006c74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c82:	e00b      	b.n	8006c9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8a:	1c59      	adds	r1, r3, #1
 8006c8c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006c8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c98:	09db      	lsrs	r3, r3, #7
 8006c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ca0:	d8f0      	bhi.n	8006c84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	623b      	str	r3, [r7, #32]
 8006cba:	e00b      	b.n	8006cd4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	09db      	lsrs	r3, r3, #7
 8006cd2:	623b      	str	r3, [r7, #32]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cd8:	d8f0      	bhi.n	8006cbc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	6979      	ldr	r1, [r7, #20]
 8006cee:	69b8      	ldr	r0, [r7, #24]
 8006cf0:	f7ff fa80 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f383 8811 	msr	BASEPRI, r3
}
 8006cfa:	bf00      	nop
 8006cfc:	3730      	adds	r7, #48	@ 0x30
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200143d8 	.word	0x200143d8

08006d08 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08e      	sub	sp, #56	@ 0x38
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d16:	f3ef 8311 	mrs	r3, BASEPRI
 8006d1a:	f04f 0120 	mov.w	r1, #32
 8006d1e:	f381 8811 	msr	BASEPRI, r1
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	4832      	ldr	r0, [pc, #200]	@ (8006df0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006d26:	f7ff f974 	bl	8006012 <_PreparePacket>
 8006d2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d38:	e00b      	b.n	8006d52 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d40:	1c59      	adds	r1, r3, #1
 8006d42:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	09db      	lsrs	r3, r3, #7
 8006d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d56:	d8f0      	bhi.n	8006d3a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d70:	e00b      	b.n	8006d8a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d78:	1c59      	adds	r1, r3, #1
 8006d7a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d86:	09db      	lsrs	r3, r3, #7
 8006d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d8e:	d8f0      	bhi.n	8006d72 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	e00b      	b.n	8006dc2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	1c59      	adds	r1, r3, #1
 8006db2:	6279      	str	r1, [r7, #36]	@ 0x24
 8006db4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	09db      	lsrs	r3, r3, #7
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dc6:	d8f0      	bhi.n	8006daa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dce:	6a3a      	ldr	r2, [r7, #32]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	6979      	ldr	r1, [r7, #20]
 8006ddc:	69b8      	ldr	r0, [r7, #24]
 8006dde:	f7ff fa09 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f383 8811 	msr	BASEPRI, r3
}
 8006de8:	bf00      	nop
 8006dea:	3738      	adds	r7, #56	@ 0x38
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	200143d8 	.word	0x200143d8

08006df4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b090      	sub	sp, #64	@ 0x40
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e02:	f3ef 8311 	mrs	r3, BASEPRI
 8006e06:	f04f 0120 	mov.w	r1, #32
 8006e0a:	f381 8811 	msr	BASEPRI, r1
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	4840      	ldr	r0, [pc, #256]	@ (8006f14 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006e12:	f7ff f8fe 	bl	8006012 <_PreparePacket>
 8006e16:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e24:	e00b      	b.n	8006e3e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2c:	1c59      	adds	r1, r3, #1
 8006e2e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	09db      	lsrs	r3, r3, #7
 8006e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e42:	d8f0      	bhi.n	8006e26 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e5c:	e00b      	b.n	8006e76 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	1c59      	adds	r1, r3, #1
 8006e66:	6379      	str	r1, [r7, #52]	@ 0x34
 8006e68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	09db      	lsrs	r3, r3, #7
 8006e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e7a:	d8f0      	bhi.n	8006e5e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e94:	e00b      	b.n	8006eae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ea0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	09db      	lsrs	r3, r3, #7
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eb2:	d8f0      	bhi.n	8006e96 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eca:	623b      	str	r3, [r7, #32]
 8006ecc:	e00b      	b.n	8006ee6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed4:	1c59      	adds	r1, r3, #1
 8006ed6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ed8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	09db      	lsrs	r3, r3, #7
 8006ee4:	623b      	str	r3, [r7, #32]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eea:	d8f0      	bhi.n	8006ece <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ef2:	6a3a      	ldr	r2, [r7, #32]
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	6979      	ldr	r1, [r7, #20]
 8006f00:	69b8      	ldr	r0, [r7, #24]
 8006f02:	f7ff f977 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f383 8811 	msr	BASEPRI, r3
}
 8006f0c:	bf00      	nop
 8006f0e:	3740      	adds	r7, #64	@ 0x40
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	200143d8 	.word	0x200143d8

08006f18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08c      	sub	sp, #48	@ 0x30
 8006f1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006f1e:	4b59      	ldr	r3, [pc, #356]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006f24:	f3ef 8311 	mrs	r3, BASEPRI
 8006f28:	f04f 0120 	mov.w	r1, #32
 8006f2c:	f381 8811 	msr	BASEPRI, r1
 8006f30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006f32:	4b54      	ldr	r3, [pc, #336]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	220a      	movs	r2, #10
 8006f38:	4953      	ldr	r1, [pc, #332]	@ (8007088 <SEGGER_SYSVIEW_Start+0x170>)
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7f9 f950 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006f46:	f7fe fbf7 	bl	8005738 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006f4a:	200a      	movs	r0, #10
 8006f4c:	f7ff fe28 	bl	8006ba0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f50:	f3ef 8311 	mrs	r3, BASEPRI
 8006f54:	f04f 0120 	mov.w	r1, #32
 8006f58:	f381 8811 	msr	BASEPRI, r1
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	484b      	ldr	r0, [pc, #300]	@ (800708c <SEGGER_SYSVIEW_Start+0x174>)
 8006f60:	f7ff f857 	bl	8006012 <_PreparePacket>
 8006f64:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f6e:	4b45      	ldr	r3, [pc, #276]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f74:	e00b      	b.n	8006f8e <SEGGER_SYSVIEW_Start+0x76>
 8006f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f92:	d8f0      	bhi.n	8006f76 <SEGGER_SYSVIEW_Start+0x5e>
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fa8:	4b36      	ldr	r3, [pc, #216]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	e00b      	b.n	8006fc8 <SEGGER_SYSVIEW_Start+0xb0>
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006fba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	09db      	lsrs	r3, r3, #7
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fcc:	d8f0      	bhi.n	8006fb0 <SEGGER_SYSVIEW_Start+0x98>
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	4b28      	ldr	r3, [pc, #160]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e00b      	b.n	8007002 <SEGGER_SYSVIEW_Start+0xea>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	61f9      	str	r1, [r7, #28]
 8006ff4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	09db      	lsrs	r3, r3, #7
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b7f      	cmp	r3, #127	@ 0x7f
 8007006:	d8f0      	bhi.n	8006fea <SEGGER_SYSVIEW_Start+0xd2>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e00b      	b.n	800703a <SEGGER_SYSVIEW_Start+0x122>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	1c59      	adds	r1, r3, #1
 800702a:	6179      	str	r1, [r7, #20]
 800702c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	09db      	lsrs	r3, r3, #7
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b7f      	cmp	r3, #127	@ 0x7f
 800703e:	d8f0      	bhi.n	8007022 <SEGGER_SYSVIEW_Start+0x10a>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	617a      	str	r2, [r7, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007050:	2218      	movs	r2, #24
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff f8cd 	bl	80061f4 <_SendPacket>
      RECORD_END();
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007060:	4b08      	ldr	r3, [pc, #32]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007068:	4b06      	ldr	r3, [pc, #24]	@ (8007084 <SEGGER_SYSVIEW_Start+0x16c>)
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800706e:	f000 f9eb 	bl	8007448 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007072:	f000 f9b1 	bl	80073d8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007076:	f000 fc23 	bl	80078c0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800707a:	bf00      	nop
 800707c:	3730      	adds	r7, #48	@ 0x30
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200143a8 	.word	0x200143a8
 8007088:	08007f28 	.word	0x08007f28
 800708c:	200143d8 	.word	0x200143d8

08007090 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007096:	f3ef 8311 	mrs	r3, BASEPRI
 800709a:	f04f 0120 	mov.w	r1, #32
 800709e:	f381 8811 	msr	BASEPRI, r1
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	480b      	ldr	r0, [pc, #44]	@ (80070d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80070a6:	f7fe ffb4 	bl	8006012 <_PreparePacket>
 80070aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80070ac:	4b0a      	ldr	r3, [pc, #40]	@ (80070d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80070b4:	220b      	movs	r2, #11
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6838      	ldr	r0, [r7, #0]
 80070ba:	f7ff f89b 	bl	80061f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80070be:	4b06      	ldr	r3, [pc, #24]	@ (80070d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f383 8811 	msr	BASEPRI, r3
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200143d8 	.word	0x200143d8
 80070d8:	200143a8 	.word	0x200143a8

080070dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08c      	sub	sp, #48	@ 0x30
 80070e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80070e2:	f3ef 8311 	mrs	r3, BASEPRI
 80070e6:	f04f 0120 	mov.w	r1, #32
 80070ea:	f381 8811 	msr	BASEPRI, r1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	4845      	ldr	r0, [pc, #276]	@ (8007208 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80070f2:	f7fe ff8e 	bl	8006012 <_PreparePacket>
 80070f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007100:	4b42      	ldr	r3, [pc, #264]	@ (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007106:	e00b      	b.n	8007120 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007112:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	09db      	lsrs	r3, r3, #7
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	2b7f      	cmp	r3, #127	@ 0x7f
 8007124:	d8f0      	bhi.n	8007108 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800712c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007134:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
 800713a:	4b34      	ldr	r3, [pc, #208]	@ (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	623b      	str	r3, [r7, #32]
 8007140:	e00b      	b.n	800715a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	6279      	str	r1, [r7, #36]	@ 0x24
 800714c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	09db      	lsrs	r3, r3, #7
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	2b7f      	cmp	r3, #127	@ 0x7f
 800715e:	d8f0      	bhi.n	8007142 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	627a      	str	r2, [r7, #36]	@ 0x24
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	4b25      	ldr	r3, [pc, #148]	@ (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e00b      	b.n	8007194 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	61f9      	str	r1, [r7, #28]
 8007186:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	09db      	lsrs	r3, r3, #7
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b7f      	cmp	r3, #127	@ 0x7f
 8007198:	d8f0      	bhi.n	800717c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	61fa      	str	r2, [r7, #28]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e00b      	b.n	80071cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	6179      	str	r1, [r7, #20]
 80071be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	09db      	lsrs	r3, r3, #7
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80071d0:	d8f0      	bhi.n	80071b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	617a      	str	r2, [r7, #20]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80071e2:	2218      	movs	r2, #24
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68b8      	ldr	r0, [r7, #8]
 80071e8:	f7ff f804 	bl	80061f4 <_SendPacket>
  RECORD_END();
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80071f2:	4b06      	ldr	r3, [pc, #24]	@ (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80071fa:	4b04      	ldr	r3, [pc, #16]	@ (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fe:	4798      	blx	r3
  }
}
 8007200:	bf00      	nop
 8007202:	3730      	adds	r7, #48	@ 0x30
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	200143d8 	.word	0x200143d8
 800720c:	200143a8 	.word	0x200143a8

08007210 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b092      	sub	sp, #72	@ 0x48
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007218:	f3ef 8311 	mrs	r3, BASEPRI
 800721c:	f04f 0120 	mov.w	r1, #32
 8007220:	f381 8811 	msr	BASEPRI, r1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	486a      	ldr	r0, [pc, #424]	@ (80073d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007228:	f7fe fef3 	bl	8006012 <_PreparePacket>
 800722c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	647b      	str	r3, [r7, #68]	@ 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b66      	ldr	r3, [pc, #408]	@ (80073d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	643b      	str	r3, [r7, #64]	@ 0x40
 8007242:	e00b      	b.n	800725c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007246:	b2da      	uxtb	r2, r3
 8007248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800724a:	1c59      	adds	r1, r3, #1
 800724c:	6479      	str	r1, [r7, #68]	@ 0x44
 800724e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	643b      	str	r3, [r7, #64]	@ 0x40
 800725c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800725e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007260:	d8f0      	bhi.n	8007244 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	647a      	str	r2, [r7, #68]	@ 0x44
 8007268:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007270:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800727c:	e00b      	b.n	8007296 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007280:	b2da      	uxtb	r2, r3
 8007282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007284:	1c59      	adds	r1, r3, #1
 8007286:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007288:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007292:	09db      	lsrs	r3, r3, #7
 8007294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	2b7f      	cmp	r3, #127	@ 0x7f
 800729a:	d8f0      	bhi.n	800727e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800729c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072aa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	4619      	mov	r1, r3
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7fe fe5f 	bl	8005f78 <_EncodeStr>
 80072ba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80072bc:	2209      	movs	r2, #9
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	6938      	ldr	r0, [r7, #16]
 80072c2:	f7fe ff97 	bl	80061f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b40      	ldr	r3, [pc, #256]	@ (80073d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072da:	e00b      	b.n	80072f4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80072dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	6379      	str	r1, [r7, #52]	@ 0x34
 80072e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072ea:	b2d2      	uxtb	r2, r2
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	09db      	lsrs	r3, r3, #7
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80072f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072f8:	d8f0      	bhi.n	80072dc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8007300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007302:	b2d2      	uxtb	r2, r2
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007308:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007314:	e00b      	b.n	800732e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007318:	b2da      	uxtb	r2, r3
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	1c59      	adds	r1, r3, #1
 800731e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8007320:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	09db      	lsrs	r3, r3, #7
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	2b7f      	cmp	r3, #127	@ 0x7f
 8007332:	d8f0      	bhi.n	8007316 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800733a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	623b      	str	r3, [r7, #32]
 800734e:	e00b      	b.n	8007368 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	1c59      	adds	r1, r3, #1
 8007358:	6279      	str	r1, [r7, #36]	@ 0x24
 800735a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	09db      	lsrs	r3, r3, #7
 8007366:	623b      	str	r3, [r7, #32]
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	2b7f      	cmp	r3, #127	@ 0x7f
 800736c:	d8f0      	bhi.n	8007350 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	627a      	str	r2, [r7, #36]	@ 0x24
 8007374:	6a3a      	ldr	r2, [r7, #32]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	2300      	movs	r3, #0
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e00b      	b.n	80073a0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	61f9      	str	r1, [r7, #28]
 8007392:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	09db      	lsrs	r3, r3, #7
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073a4:	d8f0      	bhi.n	8007388 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	61fa      	str	r2, [r7, #28]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	b2d2      	uxtb	r2, r2
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80073b6:	2215      	movs	r2, #21
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	6938      	ldr	r0, [r7, #16]
 80073bc:	f7fe ff1a 	bl	80061f4 <_SendPacket>
  RECORD_END();
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f383 8811 	msr	BASEPRI, r3
}
 80073c6:	bf00      	nop
 80073c8:	3748      	adds	r7, #72	@ 0x48
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	200143d8 	.word	0x200143d8
 80073d4:	200143a8 	.word	0x200143a8

080073d8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80073dc:	4b07      	ldr	r3, [pc, #28]	@ (80073fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80073e4:	4b05      	ldr	r3, [pc, #20]	@ (80073fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80073ee:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4798      	blx	r3
  }
}
 80073f6:	bf00      	nop
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	200143a8 	.word	0x200143a8

08007400 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007408:	f3ef 8311 	mrs	r3, BASEPRI
 800740c:	f04f 0120 	mov.w	r1, #32
 8007410:	f381 8811 	msr	BASEPRI, r1
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	480b      	ldr	r0, [pc, #44]	@ (8007444 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007418:	f7fe fdfb 	bl	8006012 <_PreparePacket>
 800741c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800741e:	2280      	movs	r2, #128	@ 0x80
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	6938      	ldr	r0, [r7, #16]
 8007424:	f7fe fda8 	bl	8005f78 <_EncodeStr>
 8007428:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800742a:	220e      	movs	r2, #14
 800742c:	68f9      	ldr	r1, [r7, #12]
 800742e:	6938      	ldr	r0, [r7, #16]
 8007430:	f7fe fee0 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f383 8811 	msr	BASEPRI, r3
}
 800743a:	bf00      	nop
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200143d8 	.word	0x200143d8

08007448 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800744e:	4b15      	ldr	r3, [pc, #84]	@ (80074a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01a      	beq.n	800748c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007456:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007460:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4798      	blx	r3
 8007468:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800746c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800746e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	000a      	movs	r2, r1
 800747c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800747e:	4613      	mov	r3, r2
 8007480:	461a      	mov	r2, r3
 8007482:	4621      	mov	r1, r4
 8007484:	200d      	movs	r0, #13
 8007486:	f7ff fbe5 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32x2>
 800748a:	e006      	b.n	800749a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800748c:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	200c      	movs	r0, #12
 8007494:	f7ff fba2 	bl	8006bdc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}
 80074a2:	bf00      	nop
 80074a4:	200143a8 	.word	0x200143a8
 80074a8:	e0001004 	.word	0xe0001004

080074ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074b2:	f3ef 8311 	mrs	r3, BASEPRI
 80074b6:	f04f 0120 	mov.w	r1, #32
 80074ba:	f381 8811 	msr	BASEPRI, r1
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	4819      	ldr	r0, [pc, #100]	@ (8007528 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80074c2:	f7fe fda6 	bl	8006012 <_PreparePacket>
 80074c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80074cc:	4b17      	ldr	r3, [pc, #92]	@ (800752c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	e00b      	b.n	80074f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	6179      	str	r1, [r7, #20]
 80074ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	09db      	lsrs	r3, r3, #7
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80074fc:	d8f0      	bhi.n	80074e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	617a      	str	r2, [r7, #20]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800750e:	2202      	movs	r2, #2
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	68b8      	ldr	r0, [r7, #8]
 8007514:	f7fe fe6e 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f383 8811 	msr	BASEPRI, r3
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	200143d8 	.word	0x200143d8
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007536:	f3ef 8311 	mrs	r3, BASEPRI
 800753a:	f04f 0120 	mov.w	r1, #32
 800753e:	f381 8811 	msr	BASEPRI, r1
 8007542:	607b      	str	r3, [r7, #4]
 8007544:	4807      	ldr	r0, [pc, #28]	@ (8007564 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007546:	f7fe fd64 	bl	8006012 <_PreparePacket>
 800754a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800754c:	2203      	movs	r2, #3
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6838      	ldr	r0, [r7, #0]
 8007552:	f7fe fe4f 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f383 8811 	msr	BASEPRI, r3
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	200143d8 	.word	0x200143d8

08007568 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800756e:	f3ef 8311 	mrs	r3, BASEPRI
 8007572:	f04f 0120 	mov.w	r1, #32
 8007576:	f381 8811 	msr	BASEPRI, r1
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	4807      	ldr	r0, [pc, #28]	@ (800759c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800757e:	f7fe fd48 	bl	8006012 <_PreparePacket>
 8007582:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007584:	2212      	movs	r2, #18
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6838      	ldr	r0, [r7, #0]
 800758a:	f7fe fe33 	bl	80061f4 <_SendPacket>
  RECORD_END();
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f383 8811 	msr	BASEPRI, r3
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	200143d8 	.word	0x200143d8

080075a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075a6:	f3ef 8311 	mrs	r3, BASEPRI
 80075aa:	f04f 0120 	mov.w	r1, #32
 80075ae:	f381 8811 	msr	BASEPRI, r1
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	4807      	ldr	r0, [pc, #28]	@ (80075d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80075b6:	f7fe fd2c 	bl	8006012 <_PreparePacket>
 80075ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80075bc:	2211      	movs	r2, #17
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6838      	ldr	r0, [r7, #0]
 80075c2:	f7fe fe17 	bl	80061f4 <_SendPacket>
  RECORD_END();
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f383 8811 	msr	BASEPRI, r3
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	200143d8 	.word	0x200143d8

080075d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075e0:	f3ef 8311 	mrs	r3, BASEPRI
 80075e4:	f04f 0120 	mov.w	r1, #32
 80075e8:	f381 8811 	msr	BASEPRI, r1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	4819      	ldr	r0, [pc, #100]	@ (8007654 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80075f0:	f7fe fd0f 	bl	8006012 <_PreparePacket>
 80075f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075fa:	4b17      	ldr	r3, [pc, #92]	@ (8007658 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	e00b      	b.n	8007626 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	1c59      	adds	r1, r3, #1
 8007616:	61f9      	str	r1, [r7, #28]
 8007618:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	09db      	lsrs	r3, r3, #7
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b7f      	cmp	r3, #127	@ 0x7f
 800762a:	d8f0      	bhi.n	800760e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	61fa      	str	r2, [r7, #28]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800763c:	2208      	movs	r2, #8
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	6938      	ldr	r0, [r7, #16]
 8007642:	f7fe fdd7 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f383 8811 	msr	BASEPRI, r3
}
 800764c:	bf00      	nop
 800764e:	3720      	adds	r7, #32
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	200143d8 	.word	0x200143d8
 8007658:	200143a8 	.word	0x200143a8

0800765c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007664:	f3ef 8311 	mrs	r3, BASEPRI
 8007668:	f04f 0120 	mov.w	r1, #32
 800766c:	f381 8811 	msr	BASEPRI, r1
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	4819      	ldr	r0, [pc, #100]	@ (80076d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007674:	f7fe fccd 	bl	8006012 <_PreparePacket>
 8007678:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800767e:	4b17      	ldr	r3, [pc, #92]	@ (80076dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	e00b      	b.n	80076aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	b2da      	uxtb	r2, r3
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	1c59      	adds	r1, r3, #1
 800769a:	61f9      	str	r1, [r7, #28]
 800769c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076a0:	b2d2      	uxtb	r2, r2
 80076a2:	701a      	strb	r2, [r3, #0]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	09db      	lsrs	r3, r3, #7
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80076ae:	d8f0      	bhi.n	8007692 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	61fa      	str	r2, [r7, #28]
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80076c0:	2204      	movs	r2, #4
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6938      	ldr	r0, [r7, #16]
 80076c6:	f7fe fd95 	bl	80061f4 <_SendPacket>
  RECORD_END();
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f383 8811 	msr	BASEPRI, r3
}
 80076d0:	bf00      	nop
 80076d2:	3720      	adds	r7, #32
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200143d8 	.word	0x200143d8
 80076dc:	200143a8 	.word	0x200143a8

080076e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076e8:	f3ef 8311 	mrs	r3, BASEPRI
 80076ec:	f04f 0120 	mov.w	r1, #32
 80076f0:	f381 8811 	msr	BASEPRI, r1
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	4819      	ldr	r0, [pc, #100]	@ (800775c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80076f8:	f7fe fc8b 	bl	8006012 <_PreparePacket>
 80076fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007702:	4b17      	ldr	r3, [pc, #92]	@ (8007760 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	e00b      	b.n	800772e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	1c59      	adds	r1, r3, #1
 800771e:	61f9      	str	r1, [r7, #28]
 8007720:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	09db      	lsrs	r3, r3, #7
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	2b7f      	cmp	r3, #127	@ 0x7f
 8007732:	d8f0      	bhi.n	8007716 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	61fa      	str	r2, [r7, #28]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007744:	2206      	movs	r2, #6
 8007746:	68f9      	ldr	r1, [r7, #12]
 8007748:	6938      	ldr	r0, [r7, #16]
 800774a:	f7fe fd53 	bl	80061f4 <_SendPacket>
  RECORD_END();
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f383 8811 	msr	BASEPRI, r3
}
 8007754:	bf00      	nop
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	200143d8 	.word	0x200143d8
 8007760:	200143a8 	.word	0x200143a8

08007764 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800776c:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	1ad3      	subs	r3, r2, r3
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	200143a8 	.word	0x200143a8

08007784 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	@ 0x30
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800778e:	4b3b      	ldr	r3, [pc, #236]	@ (800787c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d06d      	beq.n	8007872 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007796:	4b39      	ldr	r3, [pc, #228]	@ (800787c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800779c:	2300      	movs	r3, #0
 800779e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077a0:	e008      	b.n	80077b4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80077a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80077a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80077ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b0:	3301      	adds	r3, #1
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3f2      	bcc.n	80077a2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80077bc:	e000      	b.n	80077c0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80077be:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80077c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d055      	beq.n	8007872 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077c6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ca:	f04f 0120 	mov.w	r1, #32
 80077ce:	f381 8811 	msr	BASEPRI, r1
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	482a      	ldr	r0, [pc, #168]	@ (8007880 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80077d6:	f7fe fc1c 	bl	8006012 <_PreparePacket>
 80077da:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	623b      	str	r3, [r7, #32]
 80077e8:	e00b      	b.n	8007802 <SEGGER_SYSVIEW_SendModule+0x7e>
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	1c59      	adds	r1, r3, #1
 80077f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80077f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	09db      	lsrs	r3, r3, #7
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	2b7f      	cmp	r3, #127	@ 0x7f
 8007806:	d8f0      	bhi.n	80077ea <SEGGER_SYSVIEW_SendModule+0x66>
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	627a      	str	r2, [r7, #36]	@ 0x24
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007816:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	e00b      	b.n	800783c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	1c59      	adds	r1, r3, #1
 800782c:	61f9      	str	r1, [r7, #28]
 800782e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	09db      	lsrs	r3, r3, #7
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007840:	d8f0      	bhi.n	8007824 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	61fa      	str	r2, [r7, #28]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2280      	movs	r2, #128	@ 0x80
 8007858:	4619      	mov	r1, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7fe fb8c 	bl	8005f78 <_EncodeStr>
 8007860:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007862:	2216      	movs	r2, #22
 8007864:	68f9      	ldr	r1, [r7, #12]
 8007866:	6938      	ldr	r0, [r7, #16]
 8007868:	f7fe fcc4 	bl	80061f4 <_SendPacket>
      RECORD_END();
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007872:	bf00      	nop
 8007874:	3730      	adds	r7, #48	@ 0x30
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	200143d0 	.word	0x200143d0
 8007880:	200143d8 	.word	0x200143d8

08007884 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00f      	beq.n	80078b2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1f2      	bne.n	8007898 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	200143d0 	.word	0x200143d0

080078c0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80078c6:	f3ef 8311 	mrs	r3, BASEPRI
 80078ca:	f04f 0120 	mov.w	r1, #32
 80078ce:	f381 8811 	msr	BASEPRI, r1
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	4817      	ldr	r0, [pc, #92]	@ (8007934 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80078d6:	f7fe fb9c 	bl	8006012 <_PreparePacket>
 80078da:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	4b14      	ldr	r3, [pc, #80]	@ (8007938 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	e00b      	b.n	8007904 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	1c59      	adds	r1, r3, #1
 80078f4:	6179      	str	r1, [r7, #20]
 80078f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	09db      	lsrs	r3, r3, #7
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b7f      	cmp	r3, #127	@ 0x7f
 8007908:	d8f0      	bhi.n	80078ec <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	617a      	str	r2, [r7, #20]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800791a:	221b      	movs	r2, #27
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	68b8      	ldr	r0, [r7, #8]
 8007920:	f7fe fc68 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f383 8811 	msr	BASEPRI, r3
}
 800792a:	bf00      	nop
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	200143d8 	.word	0x200143d8
 8007938:	200143d4 	.word	0x200143d4

0800793c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800793c:	b40f      	push	{r0, r1, r2, r3}
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	461a      	mov	r2, r3
 800794e:	2100      	movs	r1, #0
 8007950:	6938      	ldr	r0, [r7, #16]
 8007952:	f7fe fed9 	bl	8006708 <_VPrintTarget>
  va_end(ParamList);
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007960:	b004      	add	sp, #16
 8007962:	4770      	bx	lr

08007964 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	@ 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800796c:	f3ef 8311 	mrs	r3, BASEPRI
 8007970:	f04f 0120 	mov.w	r1, #32
 8007974:	f381 8811 	msr	BASEPRI, r1
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	4827      	ldr	r0, [pc, #156]	@ (8007a18 <SEGGER_SYSVIEW_Warn+0xb4>)
 800797c:	f7fe fb49 	bl	8006012 <_PreparePacket>
 8007980:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007982:	2280      	movs	r2, #128	@ 0x80
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	6938      	ldr	r0, [r7, #16]
 8007988:	f7fe faf6 	bl	8005f78 <_EncodeStr>
 800798c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
 8007992:	2301      	movs	r3, #1
 8007994:	623b      	str	r3, [r7, #32]
 8007996:	e00b      	b.n	80079b0 <SEGGER_SYSVIEW_Warn+0x4c>
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	1c59      	adds	r1, r3, #1
 80079a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80079a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	09db      	lsrs	r3, r3, #7
 80079ae:	623b      	str	r3, [r7, #32]
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80079b4:	d8f0      	bhi.n	8007998 <SEGGER_SYSVIEW_Warn+0x34>
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	61fb      	str	r3, [r7, #28]
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	e00b      	b.n	80079e8 <SEGGER_SYSVIEW_Warn+0x84>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	1c59      	adds	r1, r3, #1
 80079d8:	61f9      	str	r1, [r7, #28]
 80079da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	09db      	lsrs	r3, r3, #7
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80079ec:	d8f0      	bhi.n	80079d0 <SEGGER_SYSVIEW_Warn+0x6c>
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	61fa      	str	r2, [r7, #28]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079fe:	221a      	movs	r2, #26
 8007a00:	68f9      	ldr	r1, [r7, #12]
 8007a02:	6938      	ldr	r0, [r7, #16]
 8007a04:	f7fe fbf6 	bl	80061f4 <_SendPacket>
  RECORD_END();
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f383 8811 	msr	BASEPRI, r3
}
 8007a0e:	bf00      	nop
 8007a10:	3728      	adds	r7, #40	@ 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200143d8 	.word	0x200143d8

08007a1c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007a20:	4b13      	ldr	r3, [pc, #76]	@ (8007a70 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a22:	7e1b      	ldrb	r3, [r3, #24]
 8007a24:	4619      	mov	r1, r3
 8007a26:	4a13      	ldr	r2, [pc, #76]	@ (8007a74 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a28:	460b      	mov	r3, r1
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	440b      	add	r3, r1
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	4413      	add	r3, r2
 8007a32:	336c      	adds	r3, #108	@ 0x6c
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a38:	7e1b      	ldrb	r3, [r3, #24]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	490d      	ldr	r1, [pc, #52]	@ (8007a74 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007a3e:	4603      	mov	r3, r0
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	4403      	add	r3, r0
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	440b      	add	r3, r1
 8007a48:	3370      	adds	r3, #112	@ 0x70
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d00b      	beq.n	8007a68 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a52:	789b      	ldrb	r3, [r3, #2]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007a58:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a5e:	f7fe fae5 	bl	800602c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a62:	4b03      	ldr	r3, [pc, #12]	@ (8007a70 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007a68:	4b01      	ldr	r3, [pc, #4]	@ (8007a70 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	200143a8 	.word	0x200143a8
 8007a74:	20012ee8 	.word	0x20012ee8

08007a78 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007a7c:	4803      	ldr	r0, [pc, #12]	@ (8007a8c <_cbSendSystemDesc+0x14>)
 8007a7e:	f7ff fcbf 	bl	8007400 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007a82:	4803      	ldr	r0, [pc, #12]	@ (8007a90 <_cbSendSystemDesc+0x18>)
 8007a84:	f7ff fcbc 	bl	8007400 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007a88:	bf00      	nop
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08007ec0 	.word	0x08007ec0
 8007a90:	08007ef4 	.word	0x08007ef4

08007a94 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007a98:	4b06      	ldr	r3, [pc, #24]	@ (8007ab4 <SEGGER_SYSVIEW_Conf+0x20>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <SEGGER_SYSVIEW_Conf+0x20>)
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <SEGGER_SYSVIEW_Conf+0x24>)
 8007aa2:	4a06      	ldr	r2, [pc, #24]	@ (8007abc <SEGGER_SYSVIEW_Conf+0x28>)
 8007aa4:	f7ff f828 	bl	8006af8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007aa8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8007aac:	f7ff f868 	bl	8006b80 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007ab0:	bf00      	nop
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000000 	.word	0x20000000
 8007ab8:	08007a79 	.word	0x08007a79
 8007abc:	08007f1c 	.word	0x08007f1c

08007ac0 <memcmp>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	3901      	subs	r1, #1
 8007ac4:	4402      	add	r2, r0
 8007ac6:	4290      	cmp	r0, r2
 8007ac8:	d101      	bne.n	8007ace <memcmp+0xe>
 8007aca:	2000      	movs	r0, #0
 8007acc:	e005      	b.n	8007ada <memcmp+0x1a>
 8007ace:	7803      	ldrb	r3, [r0, #0]
 8007ad0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	d001      	beq.n	8007adc <memcmp+0x1c>
 8007ad8:	1b18      	subs	r0, r3, r4
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	3001      	adds	r0, #1
 8007ade:	e7f2      	b.n	8007ac6 <memcmp+0x6>

08007ae0 <memset>:
 8007ae0:	4402      	add	r2, r0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d100      	bne.n	8007aea <memset+0xa>
 8007ae8:	4770      	bx	lr
 8007aea:	f803 1b01 	strb.w	r1, [r3], #1
 8007aee:	e7f9      	b.n	8007ae4 <memset+0x4>

08007af0 <__libc_init_array>:
 8007af0:	b570      	push	{r4, r5, r6, lr}
 8007af2:	4d0d      	ldr	r5, [pc, #52]	@ (8007b28 <__libc_init_array+0x38>)
 8007af4:	4c0d      	ldr	r4, [pc, #52]	@ (8007b2c <__libc_init_array+0x3c>)
 8007af6:	1b64      	subs	r4, r4, r5
 8007af8:	10a4      	asrs	r4, r4, #2
 8007afa:	2600      	movs	r6, #0
 8007afc:	42a6      	cmp	r6, r4
 8007afe:	d109      	bne.n	8007b14 <__libc_init_array+0x24>
 8007b00:	4d0b      	ldr	r5, [pc, #44]	@ (8007b30 <__libc_init_array+0x40>)
 8007b02:	4c0c      	ldr	r4, [pc, #48]	@ (8007b34 <__libc_init_array+0x44>)
 8007b04:	f000 f826 	bl	8007b54 <_init>
 8007b08:	1b64      	subs	r4, r4, r5
 8007b0a:	10a4      	asrs	r4, r4, #2
 8007b0c:	2600      	movs	r6, #0
 8007b0e:	42a6      	cmp	r6, r4
 8007b10:	d105      	bne.n	8007b1e <__libc_init_array+0x2e>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b18:	4798      	blx	r3
 8007b1a:	3601      	adds	r6, #1
 8007b1c:	e7ee      	b.n	8007afc <__libc_init_array+0xc>
 8007b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b22:	4798      	blx	r3
 8007b24:	3601      	adds	r6, #1
 8007b26:	e7f2      	b.n	8007b0e <__libc_init_array+0x1e>
 8007b28:	08007f4c 	.word	0x08007f4c
 8007b2c:	08007f4c 	.word	0x08007f4c
 8007b30:	08007f4c 	.word	0x08007f4c
 8007b34:	08007f50 	.word	0x08007f50

08007b38 <memcpy>:
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b40:	d100      	bne.n	8007b44 <memcpy+0xc>
 8007b42:	4770      	bx	lr
 8007b44:	b510      	push	{r4, lr}
 8007b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	d1f9      	bne.n	8007b46 <memcpy+0xe>
 8007b52:	bd10      	pop	{r4, pc}

08007b54 <_init>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	bf00      	nop
 8007b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5a:	bc08      	pop	{r3}
 8007b5c:	469e      	mov	lr, r3
 8007b5e:	4770      	bx	lr

08007b60 <_fini>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	bf00      	nop
 8007b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b66:	bc08      	pop	{r3}
 8007b68:	469e      	mov	lr, r3
 8007b6a:	4770      	bx	lr
