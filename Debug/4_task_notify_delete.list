
4_task_notify_delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076fc  080076fc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007704  08007704  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800770c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a0  2000001c  08007728  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200144bc  08007728  000244bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f6a  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003268  00000000  00000000  00033ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00037268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eed  00000000  00000000  000385d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190b4  00000000  00000000  000394c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b94  00000000  00000000  00052579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b411  00000000  00000000  0006810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005110  00000000  00000000  00103520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e0  00000000  00000000  00108630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007518 	.word	0x08007518

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08007518 	.word	0x08007518

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ee8 	.word	0x20012ee8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000284:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb51 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f89d 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f903 	bl	8000788 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Enable CYCCNT counter.
  DWT_CTRL |= (1 << 0);
 8000582:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <main+0x100>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a3a      	ldr	r2, [pc, #232]	; (8000670 <main+0x100>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]

  // Start SEGGER Uart (segger_uart.c)
  SEGGER_UART_init(921600);
 800058e:	f44f 2061 	mov.w	r0, #921600	; 0xe1000
 8000592:	f004 fcf7 	bl	8004f84 <SEGGER_UART_init>

  // Start SEGGER
  SEGGER_SYSVIEW_Conf();
 8000596:	f006 ff5f 	bl	8007458 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler, "task-1", 200, "task1: Turn on the led", 3, &task1_handle);
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x104>)
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2303      	movs	r3, #3
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	4b35      	ldr	r3, [pc, #212]	; (8000678 <main+0x108>)
 80005a4:	22c8      	movs	r2, #200	; 0xc8
 80005a6:	4935      	ldr	r1, [pc, #212]	; (800067c <main+0x10c>)
 80005a8:	4835      	ldr	r0, [pc, #212]	; (8000680 <main+0x110>)
 80005aa:	f002 f8df 	bl	800276c <xTaskCreate>
 80005ae:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00a      	beq.n	80005cc <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ba:	f383 8811 	msr	BASEPRI, r3
 80005be:	f3bf 8f6f 	isb	sy
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c8:	bf00      	nop
 80005ca:	e7fe      	b.n	80005ca <main+0x5a>

  nxt_del_handle = task1_handle;
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <main+0x104>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a2c      	ldr	r2, [pc, #176]	; (8000684 <main+0x114>)
 80005d2:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(task2_handler, "task-2", 200, "task2: Turn off the led", 2, &task2_handle);
 80005d4:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <main+0x118>)
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2302      	movs	r3, #2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <main+0x11c>)
 80005de:	22c8      	movs	r2, #200	; 0xc8
 80005e0:	492b      	ldr	r1, [pc, #172]	; (8000690 <main+0x120>)
 80005e2:	482c      	ldr	r0, [pc, #176]	; (8000694 <main+0x124>)
 80005e4:	f002 f8c2 	bl	800276c <xTaskCreate>
 80005e8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d00a      	beq.n	8000606 <main+0x96>
        __asm volatile
 80005f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f4:	f383 8811 	msr	BASEPRI, r3
 80005f8:	f3bf 8f6f 	isb	sy
 80005fc:	f3bf 8f4f 	dsb	sy
 8000600:	60fb      	str	r3, [r7, #12]
    }
 8000602:	bf00      	nop
 8000604:	e7fe      	b.n	8000604 <main+0x94>

  status = xTaskCreate(task3_handler, "task-3", 200, "task3: Do nothing", 1, &task3_handle);
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <main+0x128>)
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <main+0x12c>)
 8000610:	22c8      	movs	r2, #200	; 0xc8
 8000612:	4923      	ldr	r1, [pc, #140]	; (80006a0 <main+0x130>)
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <main+0x134>)
 8000616:	f002 f8a9 	bl	800276c <xTaskCreate>
 800061a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d00a      	beq.n	8000638 <main+0xc8>
        __asm volatile
 8000622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000626:	f383 8811 	msr	BASEPRI, r3
 800062a:	f3bf 8f6f 	isb	sy
 800062e:	f3bf 8f4f 	dsb	sy
 8000632:	60bb      	str	r3, [r7, #8]
    }
 8000634:	bf00      	nop
 8000636:	e7fe      	b.n	8000636 <main+0xc6>

  status = xTaskCreate(btn_handler, "btn", 200, "Button Task: ", 4, &btn_handle);
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <main+0x138>)
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2304      	movs	r3, #4
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <main+0x13c>)
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	491a      	ldr	r1, [pc, #104]	; (80006b0 <main+0x140>)
 8000646:	481b      	ldr	r0, [pc, #108]	; (80006b4 <main+0x144>)
 8000648:	f002 f890 	bl	800276c <xTaskCreate>
 800064c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00a      	beq.n	800066a <main+0xfa>
        __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	607b      	str	r3, [r7, #4]
    }
 8000666:	bf00      	nop
 8000668:	e7fe      	b.n	8000668 <main+0xf8>

  vTaskStartScheduler();
 800066a:	f002 fbb1 	bl	8002dd0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0xfe>
 8000670:	e0001000 	.word	0xe0001000
 8000674:	20000038 	.word	0x20000038
 8000678:	08007530 	.word	0x08007530
 800067c:	08007548 	.word	0x08007548
 8000680:	0800084d 	.word	0x0800084d
 8000684:	20000048 	.word	0x20000048
 8000688:	2000003c 	.word	0x2000003c
 800068c:	08007550 	.word	0x08007550
 8000690:	08007568 	.word	0x08007568
 8000694:	08000899 	.word	0x08000899
 8000698:	20000040 	.word	0x20000040
 800069c:	08007570 	.word	0x08007570
 80006a0:	08007584 	.word	0x08007584
 80006a4:	080008e5 	.word	0x080008e5
 80006a8:	20000044 	.word	0x20000044
 80006ac:	0800758c 	.word	0x0800758c
 80006b0:	0800759c 	.word	0x0800759c
 80006b4:	08000931 	.word	0x08000931

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 feec 	bl	80074a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <SystemClock_Config+0xc8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <SystemClock_Config+0xc8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <SystemClock_Config+0xc8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b21      	ldr	r3, [pc, #132]	; (8000784 <SystemClock_Config+0xcc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <SystemClock_Config+0xcc>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <SystemClock_Config+0xcc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000728:	2310      	movs	r3, #16
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800072c:	23a8      	movs	r3, #168	; 0xa8
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd47 	bl	80011d0 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f962 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2102      	movs	r1, #2
 8000768:	4618      	mov	r0, r3
 800076a:	f000 ffa9 	bl	80016c0 <HAL_RCC_ClockConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000774:	f000 f94c 	bl	8000a10 <Error_Handler>
  }
}
 8000778:	bf00      	nop
 800077a:	3750      	adds	r7, #80	; 0x50
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a26      	ldr	r2, [pc, #152]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <MX_GPIO_Init+0xbc>)
 80007dc:	f000 fcde 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_GPIO_Init+0xc0>)
 80007f6:	f000 fb35 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0xbc>)
 8000816:	f000 fb25 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081a:	2320      	movs	r3, #32
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0xbc>)
 8000832:	f000 fb17 	bl	8000e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000
 8000848:	40020800 	.word	0x40020800

0800084c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *param)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af02      	add	r7, sp, #8
 8000852:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Task 1\n");
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <task1_handler+0x40>)
 8000856:	f006 fd53 	bl	8007300 <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2300      	movs	r3, #0
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2000      	movs	r0, #0
 8000868:	f003 f864 	bl	8003934 <xTaskGenericNotifyWait>
 800086c:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d1ef      	bne.n	8000854 <task1_handler+0x8>
			vTaskSuspendAll();
 8000874:	f002 fb0e 	bl	8002e94 <vTaskSuspendAll>
			nxt_del_handle = task2_handle;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <task1_handler+0x44>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a05      	ldr	r2, [pc, #20]	; (8000894 <task1_handler+0x48>)
 800087e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000880:	f002 fb16 	bl	8002eb0 <xTaskResumeAll>
			vTaskSuspend(NULL);
 8000884:	2000      	movs	r0, #0
 8000886:	f002 f931 	bl	8002aec <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Task 1\n");
 800088a:	e7e3      	b.n	8000854 <task1_handler+0x8>
 800088c:	080075a0 	.word	0x080075a0
 8000890:	2000003c 	.word	0x2000003c
 8000894:	20000048 	.word	0x20000048

08000898 <task2_handler>:
		}
	}
}

static void task2_handler(void *param)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Task 2\n");
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <task2_handler+0x40>)
 80008a2:	f006 fd2d 	bl	8007300 <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2000      	movs	r0, #0
 80008b4:	f003 f83e 	bl	8003934 <xTaskGenericNotifyWait>
 80008b8:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1ef      	bne.n	80008a0 <task2_handler+0x8>
			vTaskSuspendAll();
 80008c0:	f002 fae8 	bl	8002e94 <vTaskSuspendAll>
			nxt_del_handle = task3_handle;
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <task2_handler+0x44>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <task2_handler+0x48>)
 80008ca:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80008cc:	f002 faf0 	bl	8002eb0 <xTaskResumeAll>
			vTaskSuspend(NULL);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f002 f90b 	bl	8002aec <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Task 2\n");
 80008d6:	e7e3      	b.n	80008a0 <task2_handler+0x8>
 80008d8:	080075a8 	.word	0x080075a8
 80008dc:	20000040 	.word	0x20000040
 80008e0:	20000048 	.word	0x20000048

080008e4 <task3_handler>:
		}
	}
}

static void task3_handler(void *param)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Task 3\n");
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <task3_handler+0x40>)
 80008ee:	f006 fd07 	bl	8007300 <SEGGER_SYSVIEW_PrintfTarget>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f003 f818 	bl	8003934 <xTaskGenericNotifyWait>
 8000904:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d1ef      	bne.n	80008ec <task3_handler+0x8>
			vTaskSuspendAll();
 800090c:	f002 fac2 	bl	8002e94 <vTaskSuspendAll>
			nxt_del_handle = btn_handle;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <task3_handler+0x44>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <task3_handler+0x48>)
 8000916:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000918:	f002 faca 	bl	8002eb0 <xTaskResumeAll>
			vTaskSuspend(NULL);
 800091c:	2000      	movs	r0, #0
 800091e:	f002 f8e5 	bl	8002aec <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Task 3\n");
 8000922:	e7e3      	b.n	80008ec <task3_handler+0x8>
 8000924:	080075b0 	.word	0x080075b0
 8000928:	20000044 	.word	0x20000044
 800092c:	20000048 	.word	0x20000048

08000930 <btn_handler>:
		}
	}
}

static void btn_handler(void *param)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	73fb      	strb	r3, [r7, #15]

	btn_read = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	4821      	ldr	r0, [pc, #132]	; (80009cc <btn_handler+0x9c>)
 8000946:	f000 fc11 	bl	800116c <HAL_GPIO_ReadPin>
 800094a:	4603      	mov	r3, r0
 800094c:	73bb      	strb	r3, [r7, #14]
	vTaskDelay(pdMS_TO_TICKS(10));
 800094e:	200a      	movs	r0, #10
 8000950:	f002 f894 	bl	8002a7c <vTaskDelay>

	while (1) {
		btn_read = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <btn_handler+0x9c>)
 800095a:	f000 fc07 	bl	800116c <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	73bb      	strb	r3, [r7, #14]

		if (btn_read) {
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d02b      	beq.n	80009c0 <btn_handler+0x90>
			if (!prev_read) {
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d128      	bne.n	80009c0 <btn_handler+0x90>
				if (nxt_del_handle != btn_handle) {
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <btn_handler+0xa0>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <btn_handler+0xa4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d00c      	beq.n	8000994 <btn_handler+0x64>
					SEGGER_SYSVIEW_PrintfTarget("Notify a task to shutdown\n");
 800097a:	4817      	ldr	r0, [pc, #92]	; (80009d8 <btn_handler+0xa8>)
 800097c:	f006 fcc0 	bl	8007300 <SEGGER_SYSVIEW_PrintfTarget>
					xTaskNotify(nxt_del_handle, 0, eNoAction);
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <btn_handler+0xa0>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2300      	movs	r3, #0
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	f003 f859 	bl	8003a44 <xTaskGenericNotify>
 8000992:	e015      	b.n	80009c0 <btn_handler+0x90>
				} else {
					SEGGER_SYSVIEW_PrintfTarget("Resume all tasks\n");
 8000994:	4811      	ldr	r0, [pc, #68]	; (80009dc <btn_handler+0xac>)
 8000996:	f006 fcb3 	bl	8007300 <SEGGER_SYSVIEW_PrintfTarget>
					nxt_del_handle = task1_handle;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <btn_handler+0xb0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <btn_handler+0xa0>)
 80009a0:	6013      	str	r3, [r2, #0]
					vTaskResume(task1_handle);
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <btn_handler+0xb0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 f980 	bl	8002cac <vTaskResume>
					vTaskResume(task2_handle);
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <btn_handler+0xb4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f97b 	bl	8002cac <vTaskResume>
					vTaskResume(task3_handle);
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <btn_handler+0xb8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 f976 	bl	8002cac <vTaskResume>
				}
			}
		}

		prev_read = btn_read;
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10)); // 每 10 ms 檢查一次
 80009c4:	200a      	movs	r0, #10
 80009c6:	f002 f859 	bl	8002a7c <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 80009ca:	e7c3      	b.n	8000954 <btn_handler+0x24>
 80009cc:	40020800 	.word	0x40020800
 80009d0:	20000048 	.word	0x20000048
 80009d4:	20000044 	.word	0x20000044
 80009d8:	080075b8 	.word	0x080075b8
 80009dc:	080075d4 	.word	0x080075d4
 80009e0:	20000038 	.word	0x20000038
 80009e4:	2000003c 	.word	0x2000003c
 80009e8:	20000040 	.word	0x20000040

080009ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d101      	bne.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fe:	f000 f92f 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40000800 	.word	0x40000800

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a5a:	f003 fd5d 	bl	8004518 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_InitTick+0xe4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <HAL_InitTick+0xe4>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <HAL_InitTick+0xe4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a98:	f107 0210 	add.w	r2, r7, #16
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ffd8 	bl	8001a58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d103      	bne.n	8000aba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab2:	f000 ffbd 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8000ab6:	6378      	str	r0, [r7, #52]	; 0x34
 8000ab8:	e004      	b.n	8000ac4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aba:	f000 ffb9 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <HAL_InitTick+0xe8>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	0c9b      	lsrs	r3, r3, #18
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_InitTick+0xec>)
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <HAL_InitTick+0xf0>)
 8000ad6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_InitTick+0xec>)
 8000ada:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ade:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <HAL_InitTick+0xec>)
 8000ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_InitTick+0xec>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_InitTick+0xec>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_InitTick+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000af8:	4817      	ldr	r0, [pc, #92]	; (8000b58 <HAL_InitTick+0xec>)
 8000afa:	f000 ffdf 	bl	8001abc <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d11b      	bne.n	8000b44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000b0c:	4812      	ldr	r0, [pc, #72]	; (8000b58 <HAL_InitTick+0xec>)
 8000b0e:	f001 f82f 	bl	8001b70 <HAL_TIM_Base_Start_IT>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d111      	bne.n	8000b44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b20:	201e      	movs	r0, #30
 8000b22:	f000 f991 	bl	8000e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d808      	bhi.n	8000b3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	201e      	movs	r0, #30
 8000b32:	f000 f96d 	bl	8000e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_InitTick+0xf4>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e002      	b.n	8000b44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3738      	adds	r7, #56	; 0x38
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	431bde83 	.word	0x431bde83
 8000b58:	2000004c 	.word	0x2000004c
 8000b5c:	40000800 	.word	0x40000800
 8000b60:	20000004 	.word	0x20000004

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	e7fe      	b.n	8000b68 <NMI_Handler+0x4>

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <TIM4_IRQHandler+0x10>)
 8000b96:	f001 f84d 	bl	8001c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000004c 	.word	0x2000004c

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	; (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	; (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f006 fc5d 	bl	80074b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fcb9 	bl	8000570 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c0c:	0800770c 	.word	0x0800770c
  ldr r2, =_sbss
 8000c10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c14:	200144bc 	.word	0x200144bc

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f7ff ff0e 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fee4 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000094 	.word	0x20000094

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000094 	.word	0x20000094

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e159      	b.n	8001134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8148 	bne.w	800112e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80a2 	beq.w	800112e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b57      	ldr	r3, [pc, #348]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a56      	ldr	r2, [pc, #344]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b54      	ldr	r3, [pc, #336]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x2ec>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x2f0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x202>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_GPIO_Init+0x2f4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x1fe>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <HAL_GPIO_Init+0x2f8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x1fa>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a46      	ldr	r2, [pc, #280]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x1f6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a45      	ldr	r2, [pc, #276]	; (8001164 <HAL_GPIO_Init+0x300>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x1f2>
 8001052:	2304      	movs	r3, #4
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001056:	2307      	movs	r3, #7
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x204>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x204>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	; (8001150 <HAL_GPIO_Init+0x2ec>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_GPIO_Init+0x304>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010aa:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fe:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_GPIO_Init+0x304>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_GPIO_Init+0x304>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_GPIO_Init+0x304>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f aea2 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e267      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ee:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d00c      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b85      	ldr	r3, [pc, #532]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d112      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001206:	4b82      	ldr	r3, [pc, #520]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b7e      	ldr	r3, [pc, #504]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e242      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b70      	ldr	r3, [pc, #448]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6f      	ldr	r2, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fcfe 	bl	8000c88 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fcfa 	bl	8000c88 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e207      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcea 	bl	8000c88 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fce6 	bl	8000c88 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	; 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1f3      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ca:	4b51      	ldr	r3, [pc, #324]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d063      	beq.n	80013ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fa:	2b08      	cmp	r3, #8
 80012fc:	d11c      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fe:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d001      	beq.n	8001322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4937      	ldr	r1, [pc, #220]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	e03a      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d020      	beq.n	8001382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001342:	2201      	movs	r2, #1
 8001344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001346:	f7ff fc9f 	bl	8000c88 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7ff fc9b 	bl	8000c88 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e1a8      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4925      	ldr	r1, [pc, #148]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x244>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc7e 	bl	8000c88 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc7a 	bl	8000c88 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e187      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d036      	beq.n	8001428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d016      	beq.n	80013f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff fc5e 	bl	8000c88 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc5a 	bl	8000c88 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e167      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x240>)
 80013e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_OscConfig+0x248>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fc47 	bl	8000c88 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	e00e      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fc43 	bl	8000c88 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d907      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e150      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001410:	40023800 	.word	0x40023800
 8001414:	42470000 	.word	0x42470000
 8001418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b88      	ldr	r3, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ea      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8097 	beq.w	8001564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b81      	ldr	r3, [pc, #516]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a7c      	ldr	r2, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b77      	ldr	r3, [pc, #476]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a73      	ldr	r2, [pc, #460]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff fc03 	bl	8000c88 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff fbff 	bl	8000c88 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e10c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_OscConfig+0x474>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6713      	str	r3, [r2, #112]	; 0x70
 80014b8:	e01c      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5b      	ldr	r2, [pc, #364]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0x324>
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	; 0x70
 80014e8:	4b55      	ldr	r3, [pc, #340]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	4a54      	ldr	r2, [pc, #336]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d015      	beq.n	8001528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fbc4 	bl	8000c88 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	e00a      	b.n	800151a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fbc0 	bl	8000c88 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001512:	4293      	cmp	r3, r2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e0cb      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0ee      	beq.n	8001504 <HAL_RCC_OscConfig+0x334>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001528:	f7ff fbae 	bl	8000c88 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff fbaa 	bl	8000c88 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e0b5      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1ee      	bne.n	8001530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80a1 	beq.w	80016b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d05c      	beq.n	8001634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d141      	bne.n	8001606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb7e 	bl	8000c88 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fb7a 	bl	8000c88 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e087      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	3b01      	subs	r3, #1
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	491b      	ldr	r1, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fb53 	bl	8000c88 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fb4f 	bl	8000c88 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e05c      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x416>
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb3c 	bl	8000c88 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb38 	bl	8000c88 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x444>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e038      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
 8001640:	40023800 	.word	0x40023800
 8001644:	40007000 	.word	0x40007000
 8001648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x4ec>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d028      	beq.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d121      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d11a      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167c:	4013      	ands	r3, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001684:	4293      	cmp	r3, r2
 8001686:	d111      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fa6a 	bl	8000c88 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff fa66 	bl	8000c88 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f821 	bl	800188c <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff f900 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	080076bc 	.word	0x080076bc
 8001884:	20000000 	.word	0x20000000
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800188c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001890:	b090      	sub	sp, #64	; 0x40
 8001892:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
 8001898:	2300      	movs	r3, #0
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d00d      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x40>
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	f200 80a1 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <HAL_RCC_GetSysClockFreq+0x34>
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d003      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018be:	e09b      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018c4:	e09b      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ca:	e098      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d6:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d028      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	623b      	str	r3, [r7, #32]
 80018ec:	627a      	str	r2, [r7, #36]	; 0x24
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018f4:	2100      	movs	r1, #0
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 80018f8:	fb03 f201 	mul.w	r2, r3, r1
 80018fc:	2300      	movs	r3, #0
 80018fe:	fb00 f303 	mul.w	r3, r0, r3
 8001902:	4413      	add	r3, r2
 8001904:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001906:	fba0 1202 	umull	r1, r2, r0, r2
 800190a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800190c:	460a      	mov	r2, r1
 800190e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001912:	4413      	add	r3, r2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001918:	2200      	movs	r2, #0
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	61fa      	str	r2, [r7, #28]
 800191e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001926:	f7fe fca5 	bl	8000274 <__aeabi_uldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4613      	mov	r3, r2
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001932:	e053      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	617a      	str	r2, [r7, #20]
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001946:	f04f 0b00 	mov.w	fp, #0
 800194a:	4652      	mov	r2, sl
 800194c:	465b      	mov	r3, fp
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	ebb2 080a 	subs.w	r8, r2, sl
 8001966:	eb63 090b 	sbc.w	r9, r3, fp
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001976:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800197a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800197e:	ebb2 0408 	subs.w	r4, r2, r8
 8001982:	eb63 0509 	sbc.w	r5, r3, r9
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	00eb      	lsls	r3, r5, #3
 8001990:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001994:	00e2      	lsls	r2, r4, #3
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	eb14 030a 	adds.w	r3, r4, sl
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	eb45 030b 	adc.w	r3, r5, fp
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c6:	2200      	movs	r2, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019d0:	f7fe fc50 	bl	8000274 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x180>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x184>)
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3740      	adds	r7, #64	; 0x40
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	017d7840 	.word	0x017d7840

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	080076cc 	.word	0x080076cc

08001a58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	220f      	movs	r2, #15
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_RCC_GetClockConfig+0x60>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0207 	and.w	r2, r3, #7
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40023c00 	.word	0x40023c00

08001abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f839 	bl	8001b5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 f9b2 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d001      	beq.n	8001b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e044      	b.n	8001c12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d018      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d013      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00e      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d009      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_TIM_Base_Start_IT+0x6c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d111      	bne.n	8001c00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d010      	beq.n	8001c10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfe:	e007      	b.n	8001c10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40000400 	.word	0x40000400
 8001c28:	40000800 	.word	0x40000800
 8001c2c:	40000c00 	.word	0x40000c00
 8001c30:	40014000 	.word	0x40014000

08001c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d020      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01b      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8d2 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8c4 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8d5 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d020      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0204 	mvn.w	r2, #4
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8ac 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cd0:	e005      	b.n	8001cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f89e 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f8af 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01b      	beq.n	8001d30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0208 	mvn.w	r2, #8
 8001d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f886 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f878 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f889 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0210 	mvn.w	r2, #16
 8001d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2208      	movs	r2, #8
 8001d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f860 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f852 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f863 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0201 	mvn.w	r2, #1
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fe26 	bl	80009ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8e6 	bl	8001f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f834 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0220 	mvn.w	r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8b8 	bl	8001f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00f      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e82:	d00b      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <TIM_Base_SetConfig+0x100>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a36      	ldr	r2, [pc, #216]	; (8001f68 <TIM_Base_SetConfig+0x104>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d003      	beq.n	8001e9c <TIM_Base_SetConfig+0x38>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a35      	ldr	r2, [pc, #212]	; (8001f6c <TIM_Base_SetConfig+0x108>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a2b      	ldr	r2, [pc, #172]	; (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d01b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebc:	d017      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a28      	ldr	r2, [pc, #160]	; (8001f64 <TIM_Base_SetConfig+0x100>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <TIM_Base_SetConfig+0x104>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00f      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <TIM_Base_SetConfig+0x108>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00b      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <TIM_Base_SetConfig+0x10c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <TIM_Base_SetConfig+0x110>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d003      	beq.n	8001eee <TIM_Base_SetConfig+0x8a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a23      	ldr	r2, [pc, #140]	; (8001f78 <TIM_Base_SetConfig+0x114>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d108      	bne.n	8001f00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <TIM_Base_SetConfig+0xfc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d103      	bne.n	8001f34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f023 0201 	bic.w	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]
  }
}
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40000800 	.word	0x40000800
 8001f6c:	40000c00 	.word	0x40000c00
 8001f70:	40014000 	.word	0x40014000
 8001f74:	40014400 	.word	0x40014400
 8001f78:	40014800 	.word	0x40014800

08001f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 0208 	add.w	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fbc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f103 0208 	add.w	r2, r3, #8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f103 0208 	add.w	r2, r3, #8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	601a      	str	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800205c:	d103      	bne.n	8002066 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e00c      	b.n	8002080 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3308      	adds	r3, #8
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e002      	b.n	8002074 <vListInsert+0x2e>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	429a      	cmp	r2, r3
 800207e:	d2f6      	bcs.n	800206e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6892      	ldr	r2, [r2, #8]
 80020ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6852      	ldr	r2, [r2, #4]
 80020d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d103      	bne.n	80020ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1e5a      	subs	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002116:	2301      	movs	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <xQueueGenericReset+0x2e>
        __asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	60fb      	str	r3, [r7, #12]
    }
 8002136:	bf00      	nop
 8002138:	e7fe      	b.n	8002138 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d05d      	beq.n	80021fc <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	d059      	beq.n	80021fc <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2100      	movs	r1, #0
 8002152:	fba3 2302 	umull	r2, r3, r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d000      	beq.n	800215c <xQueueGenericReset+0x50>
 800215a:	2101      	movs	r1, #1
 800215c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d14c      	bne.n	80021fc <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002162:	f002 fa57 	bl	8004614 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	441a      	add	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2200      	movs	r2, #0
 8002180:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	3b01      	subs	r3, #1
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	441a      	add	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	22ff      	movs	r2, #255	; 0xff
 80021a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	22ff      	movs	r2, #255	; 0xff
 80021ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d114      	bne.n	80021e2 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01a      	beq.n	80021f6 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3310      	adds	r3, #16
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 f985 	bl	80034d4 <xTaskRemoveFromEventList>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <xQueueGenericReset+0x11c>)
 80021d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	e009      	b.n	80021f6 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	3310      	adds	r3, #16
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fedc 	bl	8001fa4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	3324      	adds	r3, #36	; 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fed7 	bl	8001fa4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80021f6:	f002 fa3d 	bl	8004674 <vPortExitCritical>
 80021fa:	e001      	b.n	8002200 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <xQueueGenericReset+0x110>
        __asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	60bb      	str	r3, [r7, #8]
    }
 8002218:	bf00      	nop
 800221a:	e7fe      	b.n	800221a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800221c:	697b      	ldr	r3, [r7, #20]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	4613      	mov	r3, r2
 8002238:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d02e      	beq.n	80022a2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002244:	2100      	movs	r1, #0
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	fba3 2302 	umull	r2, r3, r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d000      	beq.n	8002254 <xQueueGenericCreate+0x28>
 8002252:	2101      	movs	r1, #1
 8002254:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d123      	bne.n	80022a2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002262:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002266:	d81c      	bhi.n	80022a2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	3350      	adds	r3, #80	; 0x50
 8002276:	4618      	mov	r0, r3
 8002278:	f002 faf8 	bl	800486c <pvPortMalloc>
 800227c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01c      	beq.n	80022be <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3350      	adds	r3, #80	; 0x50
 800228c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800228e:	79fa      	ldrb	r2, [r7, #7]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f814 	bl	80022c8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80022a0:	e00d      	b.n	80022be <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <xQueueGenericCreate+0x92>
        __asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	613b      	str	r3, [r7, #16]
    }
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80022be:	69fb      	ldr	r3, [r7, #28]
    }
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d103      	bne.n	80022e4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e002      	b.n	80022ea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022f6:	2101      	movs	r1, #1
 80022f8:	69b8      	ldr	r0, [r7, #24]
 80022fa:	f7ff ff07 	bl	800210c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	68f9      	ldr	r1, [r7, #12]
 800230c:	2073      	movs	r0, #115	; 0x73
 800230e:	f004 f97d 	bl	800660c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b08f      	sub	sp, #60	; 0x3c
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <xQueueReceive+0x30>
        __asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	623b      	str	r3, [r7, #32]
    }
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <xQueueReceive+0x3e>
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <xQueueReceive+0x42>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <xQueueReceive+0x44>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <xQueueReceive+0x5e>
        __asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	61fb      	str	r3, [r7, #28]
    }
 8002376:	bf00      	nop
 8002378:	e7fe      	b.n	8002378 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800237a:	f001 fabd 	bl	80038f8 <xTaskGetSchedulerState>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <xQueueReceive+0x6e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <xQueueReceive+0x72>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <xQueueReceive+0x74>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <xQueueReceive+0x8e>
        __asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	61bb      	str	r3, [r7, #24]
    }
 80023a6:	bf00      	nop
 80023a8:	e7fe      	b.n	80023a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80023aa:	f002 f933 	bl	8004614 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d02f      	beq.n	800241a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023be:	f000 f8bd 	bl	800253c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	4618      	mov	r0, r3
 80023c6:	f004 feaf 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 80023ca:	4604      	mov	r4, r0
 80023cc:	2000      	movs	r0, #0
 80023ce:	f004 feab 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 80023d2:	4602      	mov	r2, r0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2101      	movs	r1, #1
 80023d8:	9100      	str	r1, [sp, #0]
 80023da:	4621      	mov	r1, r4
 80023dc:	205c      	movs	r0, #92	; 0x5c
 80023de:	f004 f98b 	bl	80066f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00f      	beq.n	8002412 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	3310      	adds	r3, #16
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f86c 	bl	80034d4 <xTaskRemoveFromEventList>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002402:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <xQueueReceive+0x21c>)
 8002404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	f3bf 8f4f 	dsb	sy
 800240e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002412:	f002 f92f 	bl	8004674 <vPortExitCritical>
                return pdPASS;
 8002416:	2301      	movs	r3, #1
 8002418:	e08a      	b.n	8002530 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d113      	bne.n	8002448 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002420:	f002 f928 	bl	8004674 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fe7e 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 800242c:	4604      	mov	r4, r0
 800242e:	2000      	movs	r0, #0
 8002430:	f004 fe7a 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2101      	movs	r1, #1
 800243a:	9100      	str	r1, [sp, #0]
 800243c:	4621      	mov	r1, r4
 800243e:	205c      	movs	r0, #92	; 0x5c
 8002440:	f004 f95a 	bl	80066f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002444:	2300      	movs	r3, #0
 8002446:	e073      	b.n	8002530 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4618      	mov	r0, r3
 8002454:	f001 f916 	bl	8003684 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002458:	2301      	movs	r3, #1
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800245c:	f002 f90a 	bl	8004674 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002460:	f000 fd18 	bl	8002e94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002464:	f002 f8d6 	bl	8004614 <vPortEnterCritical>
 8002468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800246e:	b25b      	sxtb	r3, r3
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002474:	d103      	bne.n	800247e <xQueueReceive+0x162>
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002484:	b25b      	sxtb	r3, r3
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800248a:	d103      	bne.n	8002494 <xQueueReceive+0x178>
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002494:	f002 f8ee 	bl	8004674 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002498:	1d3a      	adds	r2, r7, #4
 800249a:	f107 0310 	add.w	r3, r7, #16
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f905 	bl	80036b0 <xTaskCheckForTimeOut>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d124      	bne.n	80024f6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ae:	f000 f8bd 	bl	800262c <prvIsQueueEmpty>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d018      	beq.n	80024ea <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 ff9b 	bl	80033fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80024c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024c8:	f000 f85e 	bl	8002588 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80024cc:	f000 fcf0 	bl	8002eb0 <xTaskResumeAll>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f af69 	bne.w	80023aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80024d8:	4b17      	ldr	r3, [pc, #92]	; (8002538 <xQueueReceive+0x21c>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	e75f      	b.n	80023aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80024ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ec:	f000 f84c 	bl	8002588 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80024f0:	f000 fcde 	bl	8002eb0 <xTaskResumeAll>
 80024f4:	e759      	b.n	80023aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80024f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024f8:	f000 f846 	bl	8002588 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80024fc:	f000 fcd8 	bl	8002eb0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002502:	f000 f893 	bl	800262c <prvIsQueueEmpty>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	f43f af4e 	beq.w	80023aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	4618      	mov	r0, r3
 8002512:	f004 fe09 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 8002516:	4604      	mov	r4, r0
 8002518:	2000      	movs	r0, #0
 800251a:	f004 fe05 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 800251e:	4602      	mov	r2, r0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2101      	movs	r1, #1
 8002524:	9100      	str	r1, [sp, #0]
 8002526:	4621      	mov	r1, r4
 8002528:	205c      	movs	r0, #92	; 0x5c
 800252a:	f004 f8e5 	bl	80066f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800252e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002530:	4618      	mov	r0, r3
 8002532:	3734      	adds	r7, #52	; 0x34
 8002534:	46bd      	mov	sp, r7
 8002536:	bd90      	pop	{r4, r7, pc}
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d018      	beq.n	8002580 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	441a      	add	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	d303      	bcc.n	8002570 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	461a      	mov	r2, r3
 800257a:	6838      	ldr	r0, [r7, #0]
 800257c:	f004 ffbe 	bl	80074fc <memcpy>
    }
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002590:	f002 f840 	bl	8004614 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800259a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800259c:	e011      	b.n	80025c2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3324      	adds	r3, #36	; 0x24
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 ff92 	bl	80034d4 <xTaskRemoveFromEventList>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80025b6:	f001 f8e1 	bl	800377c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	3b01      	subs	r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dce9      	bgt.n	800259e <prvUnlockQueue+0x16>
 80025ca:	e000      	b.n	80025ce <prvUnlockQueue+0x46>
                    break;
 80025cc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80025d6:	f002 f84d 	bl	8004674 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80025da:	f002 f81b 	bl	8004614 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80025e6:	e011      	b.n	800260c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3310      	adds	r3, #16
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 ff6d 	bl	80034d4 <xTaskRemoveFromEventList>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002600:	f001 f8bc 	bl	800377c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002604:	7bbb      	ldrb	r3, [r7, #14]
 8002606:	3b01      	subs	r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800260c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002610:	2b00      	cmp	r3, #0
 8002612:	dce9      	bgt.n	80025e8 <prvUnlockQueue+0x60>
 8002614:	e000      	b.n	8002618 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002616:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	22ff      	movs	r2, #255	; 0xff
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002620:	f002 f828 	bl	8004674 <vPortExitCritical>
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002634:	f001 ffee 	bl	8004614 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002640:	2301      	movs	r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	e001      	b.n	800264a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800264a:	f002 f813 	bl	8004674 <vPortExitCritical>

    return xReturn;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	60fb      	str	r3, [r7, #12]
    }
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d024      	beq.n	80026d2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e01e      	b.n	80026cc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800268e:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <vQueueAddToRegistry+0xa8>)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d105      	bne.n	80026aa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <vQueueAddToRegistry+0xa8>)
 80026a4:	4413      	add	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
                    break;
 80026a8:	e013      	b.n	80026d2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <vQueueAddToRegistry+0x6e>
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <vQueueAddToRegistry+0xa8>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <vQueueAddToRegistry+0xa8>)
 80026c2:	4413      	add	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d9dd      	bls.n	800268e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00f      	beq.n	80026f8 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 fd1e 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 80026ec:	4601      	mov	r1, r0
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2071      	movs	r0, #113	; 0x71
 80026f4:	f003 ff30 	bl	8006558 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80026f8:	bf00      	nop
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000098 	.word	0x20000098

08002704 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002714:	f001 ff7e 	bl	8004614 <vPortEnterCritical>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800271e:	b25b      	sxtb	r3, r3
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002724:	d103      	bne.n	800272e <vQueueWaitForMessageRestricted+0x2a>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002734:	b25b      	sxtb	r3, r3
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800273a:	d103      	bne.n	8002744 <vQueueWaitForMessageRestricted+0x40>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002744:	f001 ff96 	bl	8004674 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3324      	adds	r3, #36	; 0x24
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fe73 	bl	8003444 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff12 	bl	8002588 <prvUnlockQueue>
    }
 8002764:	bf00      	nop
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	; 0x30
 8002770:	af04      	add	r7, sp, #16
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f002 f873 	bl	800486c <pvPortMalloc>
 8002786:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d013      	beq.n	80027b6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800278e:	2058      	movs	r0, #88	; 0x58
 8002790:	f002 f86c 	bl	800486c <pvPortMalloc>
 8002794:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800279c:	2258      	movs	r2, #88	; 0x58
 800279e:	2100      	movs	r1, #0
 80027a0:	69f8      	ldr	r0, [r7, #28]
 80027a2:	f004 fe7f 	bl	80074a4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
 80027ac:	e005      	b.n	80027ba <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f002 f916 	bl	80049e0 <vPortFree>
 80027b4:	e001      	b.n	80027ba <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9303      	str	r3, [sp, #12]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f80e 	bl	80027f8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80027dc:	69f8      	ldr	r0, [r7, #28]
 80027de:	f000 f899 	bl	8002914 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e002      	b.n	80027ee <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ec:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80027ee:	69bb      	ldr	r3, [r7, #24]
    }
 80027f0:	4618      	mov	r0, r3
 80027f2:	3720      	adds	r7, #32
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	461a      	mov	r2, r3
 8002810:	21a5      	movs	r1, #165	; 0xa5
 8002812:	f004 fe47 	bl	80074a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002820:	3b01      	subs	r3, #1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f023 0307 	bic.w	r3, r3, #7
 800282e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <prvInitialiseNewTask+0x58>
        __asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	617b      	str	r3, [r7, #20]
    }
 800284c:	bf00      	nop
 800284e:	e7fe      	b.n	800284e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01e      	beq.n	8002894 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e012      	b.n	8002882 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	7819      	ldrb	r1, [r3, #0]
 8002864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	3334      	adds	r3, #52	; 0x34
 800286c:	460a      	mov	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2b09      	cmp	r3, #9
 8002886:	d9e9      	bls.n	800285c <prvInitialiseNewTask+0x64>
 8002888:	e000      	b.n	800288c <prvInitialiseNewTask+0x94>
            {
                break;
 800288a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	2b04      	cmp	r3, #4
 8002898:	d90a      	bls.n	80028b0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	613b      	str	r3, [r7, #16]
    }
 80028ac:	bf00      	nop
 80028ae:	e7fe      	b.n	80028ae <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d901      	bls.n	80028ba <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028b6:	2304      	movs	r3, #4
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	3304      	adds	r3, #4
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fb8a 	bl	8001fe4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	3318      	adds	r3, #24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fb85 	bl	8001fe4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028de:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	f1c3 0205 	rsb	r2, r3, #5
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	68f9      	ldr	r1, [r7, #12]
 80028f4:	69b8      	ldr	r0, [r7, #24]
 80028f6:	f001 fcdd 	bl	80042b4 <pxPortInitialiseStack>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800291c:	f001 fe7a 	bl	8004614 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <prvAddNewTaskToReadyList+0x14c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a4e      	ldr	r2, [pc, #312]	; (8002a60 <prvAddNewTaskToReadyList+0x14c>)
 8002928:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800292a:	4b4e      	ldr	r3, [pc, #312]	; (8002a64 <prvAddNewTaskToReadyList+0x150>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002932:	4a4c      	ldr	r2, [pc, #304]	; (8002a64 <prvAddNewTaskToReadyList+0x150>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <prvAddNewTaskToReadyList+0x14c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d110      	bne.n	8002962 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002940:	f000 ff40 	bl	80037c4 <prvInitialiseTaskLists>
 8002944:	e00d      	b.n	8002962 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <prvAddNewTaskToReadyList+0x154>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800294e:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <prvAddNewTaskToReadyList+0x150>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	429a      	cmp	r2, r3
 800295a:	d802      	bhi.n	8002962 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800295c:	4a41      	ldr	r2, [pc, #260]	; (8002a64 <prvAddNewTaskToReadyList+0x150>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002962:	4b42      	ldr	r3, [pc, #264]	; (8002a6c <prvAddNewTaskToReadyList+0x158>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	4a40      	ldr	r2, [pc, #256]	; (8002a6c <prvAddNewTaskToReadyList+0x158>)
 800296a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800296c:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <prvAddNewTaskToReadyList+0x158>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <prvAddNewTaskToReadyList+0x94>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f004 faad 	bl	8006edc <SEGGER_SYSVIEW_OnTaskCreate>
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	461d      	mov	r5, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461c      	mov	r4, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1ae3      	subs	r3, r4, r3
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	462b      	mov	r3, r5
 80029a4:	f002 f9ba 	bl	8004d1c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fb1a 	bl	8006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <prvAddNewTaskToReadyList+0x15c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <prvAddNewTaskToReadyList+0x15c>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	492b      	ldr	r1, [pc, #172]	; (8002a74 <prvAddNewTaskToReadyList+0x160>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	3204      	adds	r2, #4
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4a1b      	ldr	r2, [pc, #108]	; (8002a74 <prvAddNewTaskToReadyList+0x160>)
 8002a06:	441a      	add	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	4918      	ldr	r1, [pc, #96]	; (8002a74 <prvAddNewTaskToReadyList+0x160>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	4814      	ldr	r0, [pc, #80]	; (8002a74 <prvAddNewTaskToReadyList+0x160>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a2e:	f001 fe21 	bl	8004674 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a32:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <prvAddNewTaskToReadyList+0x154>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00e      	beq.n	8002a58 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <prvAddNewTaskToReadyList+0x150>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <prvAddNewTaskToReadyList+0x164>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a60:	200001b0 	.word	0x200001b0
 8002a64:	200000d8 	.word	0x200000d8
 8002a68:	200001bc 	.word	0x200001bc
 8002a6c:	200001cc 	.word	0x200001cc
 8002a70:	200001b8 	.word	0x200001b8
 8002a74:	200000dc 	.word	0x200000dc
 8002a78:	e000ed04 	.word	0xe000ed04

08002a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01b      	beq.n	8002ac6 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <vTaskDelay+0x68>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <vTaskDelay+0x30>
        __asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60bb      	str	r3, [r7, #8]
    }
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002aac:	f000 f9f2 	bl	8002e94 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	2023      	movs	r0, #35	; 0x23
 8002ab4:	f003 fd14 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ab8:	2100      	movs	r1, #0
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f001 f8f6 	bl	8003cac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ac0:	f000 f9f6 	bl	8002eb0 <xTaskResumeAll>
 8002ac4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <vTaskDelay+0x6c>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200001d8 	.word	0x200001d8
 8002ae8:	e000ed04 	.word	0xe000ed04

08002aec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002af4:	f001 fd8e 	bl	8004614 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <vTaskSuspend+0x18>
 8002afe:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <vTaskSuspend+0x13c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	e000      	b.n	8002b06 <vTaskSuspend+0x1a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fb0c 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4619      	mov	r1, r3
 8002b14:	2029      	movs	r0, #41	; 0x29
 8002b16:	f003 fce3 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff faca 	bl	80020b8 <uxListRemove>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d115      	bne.n	8002b56 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	493f      	ldr	r1, [pc, #252]	; (8002c2c <vTaskSuspend+0x140>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <vTaskSuspend+0x6a>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	2201      	movs	r2, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <vTaskSuspend+0x144>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4013      	ands	r3, r2
 8002b52:	4a37      	ldr	r2, [pc, #220]	; (8002c30 <vTaskSuspend+0x144>)
 8002b54:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	3318      	adds	r3, #24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff faa8 	bl	80020b8 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	211b      	movs	r1, #27
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 fa7b 	bl	8007068 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	482e      	ldr	r0, [pc, #184]	; (8002c34 <vTaskSuspend+0x148>)
 8002b7a:	f7ff fa40 	bl	8001ffe <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e010      	b.n	8002ba6 <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3354      	adds	r3, #84	; 0x54
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	4413      	add	r3, r2
 8002b9a:	3354      	adds	r3, #84	; 0x54
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	ddeb      	ble.n	8002b84 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002bac:	f001 fd62 	bl	8004674 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002bb0:	4b21      	ldr	r3, [pc, #132]	; (8002c38 <vTaskSuspend+0x14c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002bb8:	f001 fd2c 	bl	8004614 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002bbc:	f000 fe80 	bl	80038c0 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002bc0:	f001 fd58 	bl	8004674 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <vTaskSuspend+0x13c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d127      	bne.n	8002c1e <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8002bce:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <vTaskSuspend+0x14c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d017      	beq.n	8002c06 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <vTaskSuspend+0x150>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <vTaskSuspend+0x108>
        __asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	60fb      	str	r3, [r7, #12]
    }
 8002bf0:	bf00      	nop
 8002bf2:	e7fe      	b.n	8002bf2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <vTaskSuspend+0x154>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c04:	e00b      	b.n	8002c1e <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <vTaskSuspend+0x148>)
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <vTaskSuspend+0x158>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d103      	bne.n	8002c1a <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <vTaskSuspend+0x13c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
    }
 8002c18:	e001      	b.n	8002c1e <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8002c1a:	f000 fb85 	bl	8003328 <vTaskSwitchContext>
    }
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200000d8 	.word	0x200000d8
 8002c2c:	200000dc 	.word	0x200000dc
 8002c30:	200001b8 	.word	0x200001b8
 8002c34:	2000019c 	.word	0x2000019c
 8002c38:	200001bc 	.word	0x200001bc
 8002c3c:	200001d8 	.word	0x200001d8
 8002c40:	e000ed04 	.word	0xe000ed04
 8002c44:	200001b0 	.word	0x200001b0

08002c48 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	60fb      	str	r3, [r7, #12]
    }
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <prvTaskIsTaskSuspended+0x5c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10a      	bne.n	8002c94 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <prvTaskIsTaskSuspended+0x60>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d005      	beq.n	8002c94 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c94:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002c96:	4618      	mov	r0, r3
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	2000019c 	.word	0x2000019c
 8002ca8:	20000170 	.word	0x20000170

08002cac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <vTaskResume+0x28>
        __asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	60fb      	str	r3, [r7, #12]
    }
 8002cd0:	bf00      	nop
 8002cd2:	e7fe      	b.n	8002cd2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	; (8002dc0 <vTaskResume+0x114>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d06c      	beq.n	8002db8 <vTaskResume+0x10c>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d069      	beq.n	8002db8 <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 8002ce4:	f001 fc96 	bl	8004614 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002ce8:	6978      	ldr	r0, [r7, #20]
 8002cea:	f7ff ffad 	bl	8002c48 <prvTaskIsTaskSuspended>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05f      	beq.n	8002db4 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fa16 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4619      	mov	r1, r3
 8002d00:	202a      	movs	r0, #42	; 0x2a
 8002d02:	f003 fbed 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f9d4 	bl	80020b8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 f966 	bl	8006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <vTaskResume+0x118>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <vTaskResume+0x118>)
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2e:	4926      	ldr	r1, [pc, #152]	; (8002dc8 <vTaskResume+0x11c>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	3204      	adds	r2, #4
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <vTaskResume+0x11c>)
 8002d6e:	441a      	add	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	615a      	str	r2, [r3, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d78:	4913      	ldr	r1, [pc, #76]	; (8002dc8 <vTaskResume+0x11c>)
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	480f      	ldr	r0, [pc, #60]	; (8002dc8 <vTaskResume+0x11c>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4403      	add	r3, r0
 8002d94:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <vTaskResume+0x114>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d307      	bcc.n	8002db4 <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <vTaskResume+0x120>)
 8002da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002db4:	f001 fc5e 	bl	8004674 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002db8:	bf00      	nop
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	200000d8 	.word	0x200000d8
 8002dc4:	200001b8 	.word	0x200001b8
 8002dc8:	200000dc 	.word	0x200000dc
 8002dcc:	e000ed04 	.word	0xe000ed04

08002dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <vTaskStartScheduler+0xa4>)
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	2300      	movs	r3, #0
 8002de0:	2282      	movs	r2, #130	; 0x82
 8002de2:	4925      	ldr	r1, [pc, #148]	; (8002e78 <vTaskStartScheduler+0xa8>)
 8002de4:	4825      	ldr	r0, [pc, #148]	; (8002e7c <vTaskStartScheduler+0xac>)
 8002de6:	f7ff fcc1 	bl	800276c <xTaskCreate>
 8002dea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002df2:	f000 ffdb 	bl	8003dac <xTimerCreateTimerTask>
 8002df6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d124      	bne.n	8002e48 <vTaskStartScheduler+0x78>
        __asm volatile
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	60bb      	str	r3, [r7, #8]
    }
 8002e10:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <vTaskStartScheduler+0xb0>)
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <vTaskStartScheduler+0xb4>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <vTaskStartScheduler+0xb8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <vTaskStartScheduler+0xbc>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <vTaskStartScheduler+0xa4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d102      	bne.n	8002e38 <vTaskStartScheduler+0x68>
 8002e32:	f004 f837 	bl	8006ea4 <SEGGER_SYSVIEW_OnIdle>
 8002e36:	e004      	b.n	8002e42 <vTaskStartScheduler+0x72>
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <vTaskStartScheduler+0xbc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f004 f88f 	bl	8006f60 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002e42:	f001 fac7 	bl	80043d4 <xPortStartScheduler>
 8002e46:	e00e      	b.n	8002e66 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e4e:	d10a      	bne.n	8002e66 <vTaskStartScheduler+0x96>
        __asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	607b      	str	r3, [r7, #4]
    }
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <vTaskStartScheduler+0xc0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200001d4 	.word	0x200001d4
 8002e78:	080075e8 	.word	0x080075e8
 8002e7c:	08003795 	.word	0x08003795
 8002e80:	200001d0 	.word	0x200001d0
 8002e84:	200001bc 	.word	0x200001bc
 8002e88:	200001b4 	.word	0x200001b4
 8002e8c:	200000d8 	.word	0x200000d8
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <vTaskSuspendAll+0x18>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a03      	ldr	r2, [pc, #12]	; (8002eac <vTaskSuspendAll+0x18>)
 8002ea0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	200001d8 	.word	0x200001d8

08002eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <xTaskResumeAll+0x1dc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <xTaskResumeAll+0x2c>
        __asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	607b      	str	r3, [r7, #4]
    }
 8002ed8:	bf00      	nop
 8002eda:	e7fe      	b.n	8002eda <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002edc:	f001 fb9a 	bl	8004614 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <xTaskResumeAll+0x1dc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	4a69      	ldr	r2, [pc, #420]	; (800308c <xTaskResumeAll+0x1dc>)
 8002ee8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eea:	4b68      	ldr	r3, [pc, #416]	; (800308c <xTaskResumeAll+0x1dc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 80c4 	bne.w	800307c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <xTaskResumeAll+0x1e0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80bf 	beq.w	800307c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002efe:	e08e      	b.n	800301e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f00:	4b64      	ldr	r3, [pc, #400]	; (8003094 <xTaskResumeAll+0x1e4>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	6a12      	ldr	r2, [r2, #32]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	69d2      	ldr	r2, [r2, #28]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3318      	adds	r3, #24
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d103      	bne.n	8002f36 <xTaskResumeAll+0x86>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	68d2      	ldr	r2, [r2, #12]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3304      	adds	r3, #4
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d103      	bne.n	8002f74 <xTaskResumeAll+0xc4>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 f82c 	bl	8006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	2201      	movs	r2, #1
 8002f92:	409a      	lsls	r2, r3
 8002f94:	4b40      	ldr	r3, [pc, #256]	; (8003098 <xTaskResumeAll+0x1e8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <xTaskResumeAll+0x1e8>)
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	493e      	ldr	r1, [pc, #248]	; (800309c <xTaskResumeAll+0x1ec>)
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	3304      	adds	r3, #4
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	3204      	adds	r2, #4
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	1d1a      	adds	r2, r3, #4
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4a2e      	ldr	r2, [pc, #184]	; (800309c <xTaskResumeAll+0x1ec>)
 8002fe2:	441a      	add	r2, r3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	615a      	str	r2, [r3, #20]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	492b      	ldr	r1, [pc, #172]	; (800309c <xTaskResumeAll+0x1ec>)
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1c59      	adds	r1, r3, #1
 8002ffc:	4827      	ldr	r0, [pc, #156]	; (800309c <xTaskResumeAll+0x1ec>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4403      	add	r3, r0
 8003008:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <xTaskResumeAll+0x1f0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <xTaskResumeAll+0x1f4>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <xTaskResumeAll+0x1e4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f47f af6c 	bne.w	8002f00 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800302e:	f000 fc47 	bl	80038c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <xTaskResumeAll+0x1f8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800303e:	f000 f859 	bl	80030f4 <xTaskIncrementTick>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <xTaskResumeAll+0x1f4>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3b01      	subs	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f1      	bne.n	800303e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <xTaskResumeAll+0x1f8>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <xTaskResumeAll+0x1f4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003068:	2301      	movs	r3, #1
 800306a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <xTaskResumeAll+0x1fc>)
 800306e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800307c:	f001 fafa 	bl	8004674 <vPortExitCritical>

    return xAlreadyYielded;
 8003080:	69bb      	ldr	r3, [r7, #24]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200001d8 	.word	0x200001d8
 8003090:	200001b0 	.word	0x200001b0
 8003094:	20000170 	.word	0x20000170
 8003098:	200001b8 	.word	0x200001b8
 800309c:	200000dc 	.word	0x200000dc
 80030a0:	200000d8 	.word	0x200000d8
 80030a4:	200001c4 	.word	0x200001c4
 80030a8:	200001c0 	.word	0x200001c0
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <xTaskGetTickCount+0x1c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80030bc:	687b      	ldr	r3, [r7, #4]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	200001b4 	.word	0x200001b4

080030d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d6:	f001 fb89 	bl	80047ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <xTaskGetTickCountFromISR+0x20>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80030e4:	683b      	ldr	r3, [r7, #0]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200001b4 	.word	0x200001b4

080030f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fe:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <xTaskIncrementTick+0x208>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 80f0 	bne.w	80032e8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003108:	4b7d      	ldr	r3, [pc, #500]	; (8003300 <xTaskIncrementTick+0x20c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003110:	4a7b      	ldr	r2, [pc, #492]	; (8003300 <xTaskIncrementTick+0x20c>)
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d120      	bne.n	800315e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800311c:	4b79      	ldr	r3, [pc, #484]	; (8003304 <xTaskIncrementTick+0x210>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <xTaskIncrementTick+0x48>
        __asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	607b      	str	r3, [r7, #4]
    }
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <xTaskIncrementTick+0x46>
 800313c:	4b71      	ldr	r3, [pc, #452]	; (8003304 <xTaskIncrementTick+0x210>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	4b71      	ldr	r3, [pc, #452]	; (8003308 <xTaskIncrementTick+0x214>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6f      	ldr	r2, [pc, #444]	; (8003304 <xTaskIncrementTick+0x210>)
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4a6f      	ldr	r2, [pc, #444]	; (8003308 <xTaskIncrementTick+0x214>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b6e      	ldr	r3, [pc, #440]	; (800330c <xTaskIncrementTick+0x218>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a6d      	ldr	r2, [pc, #436]	; (800330c <xTaskIncrementTick+0x218>)
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	f000 fbb1 	bl	80038c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800315e:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <xTaskIncrementTick+0x21c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a3a      	ldr	r2, [r7, #32]
 8003164:	429a      	cmp	r2, r3
 8003166:	f0c0 80aa 	bcc.w	80032be <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800316a:	4b66      	ldr	r3, [pc, #408]	; (8003304 <xTaskIncrementTick+0x210>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <xTaskIncrementTick+0x21c>)
 8003176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317a:	601a      	str	r2, [r3, #0]
                    break;
 800317c:	e09f      	b.n	80032be <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800317e:	4b61      	ldr	r3, [pc, #388]	; (8003304 <xTaskIncrementTick+0x210>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	429a      	cmp	r2, r3
 8003194:	d203      	bcs.n	800319e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003196:	4a5e      	ldr	r2, [pc, #376]	; (8003310 <xTaskIncrementTick+0x21c>)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800319c:	e08f      	b.n	80032be <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	68d2      	ldr	r2, [r2, #12]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	6892      	ldr	r2, [r2, #8]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	3304      	adds	r3, #4
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d103      	bne.n	80031cc <xTaskIncrementTick+0xd8>
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2200      	movs	r2, #0
 80031d0:	615a      	str	r2, [r3, #20]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01e      	beq.n	8003222 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	6a12      	ldr	r2, [r2, #32]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	69d2      	ldr	r2, [r2, #28]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	3318      	adds	r3, #24
 8003206:	429a      	cmp	r2, r3
 8003208:	d103      	bne.n	8003212 <xTaskIncrementTick+0x11e>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	6a1a      	ldr	r2, [r3, #32]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2200      	movs	r2, #0
 8003216:	629a      	str	r2, [r3, #40]	; 0x28
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	1e5a      	subs	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fedd 	bl	8006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	2201      	movs	r2, #1
 8003230:	409a      	lsls	r2, r3
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <xTaskIncrementTick+0x220>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	4a36      	ldr	r2, [pc, #216]	; (8003314 <xTaskIncrementTick+0x220>)
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <xTaskIncrementTick+0x224>)
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3304      	adds	r3, #4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	60da      	str	r2, [r3, #12]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	3204      	adds	r2, #4
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	1d1a      	adds	r2, r3, #4
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4a26      	ldr	r2, [pc, #152]	; (8003318 <xTaskIncrementTick+0x224>)
 8003280:	441a      	add	r2, r3
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	615a      	str	r2, [r3, #20]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	4923      	ldr	r1, [pc, #140]	; (8003318 <xTaskIncrementTick+0x224>)
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1c59      	adds	r1, r3, #1
 800329a:	481f      	ldr	r0, [pc, #124]	; (8003318 <xTaskIncrementTick+0x224>)
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4403      	add	r3, r0
 80032a6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <xTaskIncrementTick+0x228>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f67f af59 	bls.w	800316a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032bc:	e755      	b.n	800316a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <xTaskIncrementTick+0x228>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	4914      	ldr	r1, [pc, #80]	; (8003318 <xTaskIncrementTick+0x224>)
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d901      	bls.n	80032da <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <xTaskIncrementTick+0x22c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e004      	b.n	80032f2 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <xTaskIncrementTick+0x230>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <xTaskIncrementTick+0x230>)
 80032f0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	200001d8 	.word	0x200001d8
 8003300:	200001b4 	.word	0x200001b4
 8003304:	20000168 	.word	0x20000168
 8003308:	2000016c 	.word	0x2000016c
 800330c:	200001c8 	.word	0x200001c8
 8003310:	200001d0 	.word	0x200001d0
 8003314:	200001b8 	.word	0x200001b8
 8003318:	200000dc 	.word	0x200000dc
 800331c:	200000d8 	.word	0x200000d8
 8003320:	200001c4 	.word	0x200001c4
 8003324:	200001c0 	.word	0x200001c0

08003328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <vTaskSwitchContext+0xbc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <vTaskSwitchContext+0xc0>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800333c:	e04d      	b.n	80033da <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800333e:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <vTaskSwitchContext+0xc0>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003344:	4b29      	ldr	r3, [pc, #164]	; (80033ec <vTaskSwitchContext+0xc4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003352:	7afb      	ldrb	r3, [r7, #11]
 8003354:	f1c3 031f 	rsb	r3, r3, #31
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	4925      	ldr	r1, [pc, #148]	; (80033f0 <vTaskSwitchContext+0xc8>)
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <vTaskSwitchContext+0x5c>
        __asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	607b      	str	r3, [r7, #4]
    }
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <vTaskSwitchContext+0x5a>
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4613      	mov	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <vTaskSwitchContext+0xc8>)
 8003390:	4413      	add	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3308      	adds	r3, #8
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d104      	bne.n	80033b4 <vTaskSwitchContext+0x8c>
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	4a0e      	ldr	r2, [pc, #56]	; (80033f4 <vTaskSwitchContext+0xcc>)
 80033bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <vTaskSwitchContext+0xcc>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <vTaskSwitchContext+0xd0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d102      	bne.n	80033d0 <vTaskSwitchContext+0xa8>
 80033ca:	f003 fd6b 	bl	8006ea4 <SEGGER_SYSVIEW_OnIdle>
}
 80033ce:	e004      	b.n	80033da <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <vTaskSwitchContext+0xcc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fdc3 	bl	8006f60 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200001d8 	.word	0x200001d8
 80033e8:	200001c4 	.word	0x200001c4
 80033ec:	200001b8 	.word	0x200001b8
 80033f0:	200000dc 	.word	0x200000dc
 80033f4:	200000d8 	.word	0x200000d8
 80033f8:	200001d4 	.word	0x200001d4

080033fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	60fb      	str	r3, [r7, #12]
    }
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <vTaskPlaceOnEventList+0x44>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3318      	adds	r3, #24
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fe0b 	bl	8002046 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003430:	2101      	movs	r1, #1
 8003432:	6838      	ldr	r0, [r7, #0]
 8003434:	f000 fc3a 	bl	8003cac <prvAddCurrentTaskToDelayedList>
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200000d8 	.word	0x200000d8

08003444 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	613b      	str	r3, [r7, #16]
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	61da      	str	r2, [r3, #28]
 800347a:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	621a      	str	r2, [r3, #32]
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	3218      	adds	r2, #24
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f103 0218 	add.w	r2, r3, #24
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80034ba:	2024      	movs	r0, #36	; 0x24
 80034bc:	f002 fff2 	bl	80064a4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68b8      	ldr	r0, [r7, #8]
 80034c4:	f000 fbf2 	bl	8003cac <prvAddCurrentTaskToDelayedList>
    }
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200000d8 	.word	0x200000d8

080034d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60fb      	str	r3, [r7, #12]
    }
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	6a12      	ldr	r2, [r2, #32]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	69d2      	ldr	r2, [r2, #28]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	3318      	adds	r3, #24
 8003522:	429a      	cmp	r2, r3
 8003524:	d103      	bne.n	800352e <xTaskRemoveFromEventList+0x5a>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	6a1a      	ldr	r2, [r3, #32]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	2200      	movs	r2, #0
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353e:	4b4b      	ldr	r3, [pc, #300]	; (800366c <xTaskRemoveFromEventList+0x198>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d162      	bne.n	800360c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	68d2      	ldr	r2, [r2, #12]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	6892      	ldr	r2, [r2, #8]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	3304      	adds	r3, #4
 8003568:	429a      	cmp	r2, r3
 800356a:	d103      	bne.n	8003574 <xTaskRemoveFromEventList+0xa0>
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	6a3b      	ldr	r3, [r7, #32]
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	4618      	mov	r0, r3
 8003588:	f003 fd2c 	bl	8006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	409a      	lsls	r2, r3
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <xTaskRemoveFromEventList+0x19c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4313      	orrs	r3, r2
 800359a:	4a35      	ldr	r2, [pc, #212]	; (8003670 <xTaskRemoveFromEventList+0x19c>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a2:	4934      	ldr	r1, [pc, #208]	; (8003674 <xTaskRemoveFromEventList+0x1a0>)
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3304      	adds	r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	3204      	adds	r2, #4
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	1d1a      	adds	r2, r3, #4
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4a24      	ldr	r2, [pc, #144]	; (8003674 <xTaskRemoveFromEventList+0x1a0>)
 80035e2:	441a      	add	r2, r3
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	615a      	str	r2, [r3, #20]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4921      	ldr	r1, [pc, #132]	; (8003674 <xTaskRemoveFromEventList+0x1a0>)
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	481d      	ldr	r0, [pc, #116]	; (8003674 <xTaskRemoveFromEventList+0x1a0>)
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	e01b      	b.n	8003644 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <xTaskRemoveFromEventList+0x1a4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	61da      	str	r2, [r3, #28]
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	621a      	str	r2, [r3, #32]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	3218      	adds	r2, #24
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	f103 0218 	add.w	r2, r3, #24
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	4a10      	ldr	r2, [pc, #64]	; (8003678 <xTaskRemoveFromEventList+0x1a4>)
 8003638:	629a      	str	r2, [r3, #40]	; 0x28
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <xTaskRemoveFromEventList+0x1a4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <xTaskRemoveFromEventList+0x1a4>)
 8003642:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <xTaskRemoveFromEventList+0x1a8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d905      	bls.n	800365e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <xTaskRemoveFromEventList+0x1ac>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e001      	b.n	8003662 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200001d8 	.word	0x200001d8
 8003670:	200001b8 	.word	0x200001b8
 8003674:	200000dc 	.word	0x200000dc
 8003678:	20000170 	.word	0x20000170
 800367c:	200000d8 	.word	0x200000d8
 8003680:	200001c4 	.word	0x200001c4

08003684 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <vTaskInternalSetTimeOutState+0x24>)
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <vTaskInternalSetTimeOutState+0x28>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	605a      	str	r2, [r3, #4]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	200001c8 	.word	0x200001c8
 80036ac:	200001b4 	.word	0x200001b4

080036b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	613b      	str	r3, [r7, #16]
    }
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	60fb      	str	r3, [r7, #12]
    }
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80036f2:	f000 ff8f 	bl	8004614 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036f6:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <xTaskCheckForTimeOut+0xc4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370e:	d102      	bne.n	8003716 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	e026      	b.n	8003764 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <xTaskCheckForTimeOut+0xc8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d00a      	beq.n	8003738 <xTaskCheckForTimeOut+0x88>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	429a      	cmp	r2, r3
 800372a:	d305      	bcc.n	8003738 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e015      	b.n	8003764 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	429a      	cmp	r2, r3
 8003740:	d20b      	bcs.n	800375a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff98 	bl	8003684 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e004      	b.n	8003764 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003764:	f000 ff86 	bl	8004674 <vPortExitCritical>

    return xReturn;
 8003768:	69fb      	ldr	r3, [r7, #28]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200001b4 	.word	0x200001b4
 8003778:	200001c8 	.word	0x200001c8

0800377c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <vTaskMissedYield+0x14>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	200001c4 	.word	0x200001c4

08003794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800379c:	f000 f852 	bl	8003844 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <prvIdleTask+0x28>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d9f9      	bls.n	800379c <prvIdleTask+0x8>
            {
                taskYIELD();
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <prvIdleTask+0x2c>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037b8:	e7f0      	b.n	800379c <prvIdleTask+0x8>
 80037ba:	bf00      	nop
 80037bc:	200000dc 	.word	0x200000dc
 80037c0:	e000ed04 	.word	0xe000ed04

080037c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	e00c      	b.n	80037ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <prvInitialiseTaskLists+0x60>)
 80037dc:	4413      	add	r3, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fbe0 	bl	8001fa4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d9ef      	bls.n	80037d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <prvInitialiseTaskLists+0x64>)
 80037f2:	f7fe fbd7 	bl	8001fa4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037f6:	480d      	ldr	r0, [pc, #52]	; (800382c <prvInitialiseTaskLists+0x68>)
 80037f8:	f7fe fbd4 	bl	8001fa4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <prvInitialiseTaskLists+0x6c>)
 80037fe:	f7fe fbd1 	bl	8001fa4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003802:	480c      	ldr	r0, [pc, #48]	; (8003834 <prvInitialiseTaskLists+0x70>)
 8003804:	f7fe fbce 	bl	8001fa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <prvInitialiseTaskLists+0x74>)
 800380a:	f7fe fbcb 	bl	8001fa4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <prvInitialiseTaskLists+0x78>)
 8003810:	4a05      	ldr	r2, [pc, #20]	; (8003828 <prvInitialiseTaskLists+0x64>)
 8003812:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <prvInitialiseTaskLists+0x7c>)
 8003816:	4a05      	ldr	r2, [pc, #20]	; (800382c <prvInitialiseTaskLists+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200000dc 	.word	0x200000dc
 8003828:	20000140 	.word	0x20000140
 800382c:	20000154 	.word	0x20000154
 8003830:	20000170 	.word	0x20000170
 8003834:	20000184 	.word	0x20000184
 8003838:	2000019c 	.word	0x2000019c
 800383c:	20000168 	.word	0x20000168
 8003840:	2000016c 	.word	0x2000016c

08003844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800384a:	e019      	b.n	8003880 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800384c:	f000 fee2 	bl	8004614 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <prvCheckTasksWaitingTermination+0x50>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fc2b 	bl	80020b8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <prvCheckTasksWaitingTermination+0x54>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	3b01      	subs	r3, #1
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <prvCheckTasksWaitingTermination+0x54>)
 800386a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003874:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003876:	f000 fefd 	bl	8004674 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f810 	bl	80038a0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <prvCheckTasksWaitingTermination+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e1      	bne.n	800384c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000184 	.word	0x20000184
 8003898:	200001b0 	.word	0x200001b0
 800389c:	20000198 	.word	0x20000198

080038a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 f897 	bl	80049e0 <vPortFree>
            vPortFree( pxTCB );
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f001 f894 	bl	80049e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <prvResetNextTaskUnblockTime+0x30>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d104      	bne.n	80038d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <prvResetNextTaskUnblockTime+0x34>)
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038d6:	e005      	b.n	80038e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <prvResetNextTaskUnblockTime+0x30>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <prvResetNextTaskUnblockTime+0x34>)
 80038e2:	6013      	str	r3, [r2, #0]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000168 	.word	0x20000168
 80038f4:	200001d0 	.word	0x200001d0

080038f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <xTaskGetSchedulerState+0x34>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003906:	2301      	movs	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	e008      	b.n	800391e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <xTaskGetSchedulerState+0x38>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003914:	2302      	movs	r3, #2
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e001      	b.n	800391e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800391e:	687b      	ldr	r3, [r7, #4]
    }
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	200001bc 	.word	0x200001bc
 8003930:	200001d8 	.word	0x200001d8

08003934 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	613b      	str	r3, [r7, #16]
    }
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800395e:	f000 fe59 	bl	8004614 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	3354      	adds	r3, #84	; 0x54
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d022      	beq.n	80039ba <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	3214      	adds	r2, #20
 800397c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	43d2      	mvns	r2, r2
 8003984:	4011      	ands	r1, r2
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	3214      	adds	r2, #20
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800398e:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	3354      	adds	r3, #84	; 0x54
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039a2:	2101      	movs	r1, #1
 80039a4:	6a38      	ldr	r0, [r7, #32]
 80039a6:	f000 f981 	bl	8003cac <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <xTaskGenericNotifyWait+0x10c>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80039ba:	f000 fe5b 	bl	8004674 <vPortExitCritical>

        taskENTER_CRITICAL();
 80039be:	f000 fe29 	bl	8004614 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	2040      	movs	r0, #64	; 0x40
 80039d0:	f002 fe92 	bl	80066f8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	3214      	adds	r2, #20
 80039e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	3354      	adds	r3, #84	; 0x54
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d002      	beq.n	8003a02 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e00e      	b.n	8003a20 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	3214      	adds	r2, #20
 8003a0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	43d2      	mvns	r2, r2
 8003a12:	4011      	ands	r1, r2
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	3214      	adds	r2, #20
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <xTaskGenericNotifyWait+0x108>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	3354      	adds	r3, #84	; 0x54
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003a2e:	f000 fe21 	bl	8004674 <vPortExitCritical>

        return xReturn;
 8003a32:	697b      	ldr	r3, [r7, #20]
    }
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	200000d8 	.word	0x200000d8
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b090      	sub	sp, #64	; 0x40
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003a52:	2301      	movs	r3, #1
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	623b      	str	r3, [r7, #32]
    }
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xTaskGenericNotify+0x4a>
        __asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	61fb      	str	r3, [r7, #28]
    }
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003a92:	f000 fdbf 	bl	8004614 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	3214      	adds	r2, #20
 8003aa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3354      	adds	r3, #84	; 0x54
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	3354      	adds	r3, #84	; 0x54
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d83b      	bhi.n	8003b42 <xTaskGenericNotify+0xfe>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <xTaskGenericNotify+0x8c>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003b61 	.word	0x08003b61
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003b19 	.word	0x08003b19
 8003ae0:	08003b27 	.word	0x08003b27
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	3214      	adds	r2, #20
 8003aea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	ea42 0103 	orr.w	r1, r2, r3
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	3214      	adds	r2, #20
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003afe:	e032      	b.n	8003b66 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	3214      	adds	r2, #20
 8003b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	3214      	adds	r2, #20
 8003b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003b16:	e026      	b.n	8003b66 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	3214      	adds	r2, #20
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003b24:	e01f      	b.n	8003b66 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d006      	beq.n	8003b3c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	3214      	adds	r2, #20
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003b3a:	e014      	b.n	8003b66 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003b40:	e011      	b.n	8003b66 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003b42:	4b55      	ldr	r3, [pc, #340]	; (8003c98 <xTaskGenericNotify+0x254>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <xTaskGenericNotify+0x120>
        __asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	61bb      	str	r3, [r7, #24]
    }
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <xTaskGenericNotify+0x11a>
                    break;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <xTaskGenericNotify+0x122>

                    break;
 8003b64:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 fadd 	bl	8007128 <SEGGER_SYSVIEW_ShrinkId>
 8003b6e:	4601      	mov	r1, r0
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	203e      	movs	r0, #62	; 0x3e
 8003b7c:	f002 fdbc 	bl	80066f8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d17f      	bne.n	8003c88 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9e:	6892      	ldr	r2, [r2, #8]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	3304      	adds	r3, #4
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d103      	bne.n	8003bb6 <xTaskGenericNotify+0x172>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 fa0b 	bl	8006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <xTaskGenericNotify+0x258>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <xTaskGenericNotify+0x258>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	492e      	ldr	r1, [pc, #184]	; (8003ca0 <xTaskGenericNotify+0x25c>)
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	3204      	adds	r2, #4
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	1d1a      	adds	r2, r3, #4
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <xTaskGenericNotify+0x25c>)
 8003c24:	441a      	add	r2, r3
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	615a      	str	r2, [r3, #20]
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2e:	491c      	ldr	r1, [pc, #112]	; (8003ca0 <xTaskGenericNotify+0x25c>)
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c59      	adds	r1, r3, #1
 8003c3e:	4818      	ldr	r0, [pc, #96]	; (8003ca0 <xTaskGenericNotify+0x25c>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4403      	add	r3, r0
 8003c4a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <xTaskGenericNotify+0x226>
        __asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	617b      	str	r3, [r7, #20]
    }
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <xTaskGenericNotify+0x260>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d907      	bls.n	8003c88 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <xTaskGenericNotify+0x264>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c88:	f000 fcf4 	bl	8004674 <vPortExitCritical>

        return xReturn;
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3738      	adds	r7, #56	; 0x38
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200001b4 	.word	0x200001b4
 8003c9c:	200001b8 	.word	0x200001b8
 8003ca0:	200000dc 	.word	0x200000dc
 8003ca4:	200000d8 	.word	0x200000d8
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cbc:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fe f9f8 	bl	80020b8 <uxListRemove>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xec>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ce4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cec:	d124      	bne.n	8003d38 <prvAddCurrentTaskToDelayedList+0x8c>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d021      	beq.n	8003d38 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	609a      	str	r2, [r3, #8]
 8003d02:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	6892      	ldr	r2, [r2, #8]
 8003d0a:	60da      	str	r2, [r3, #12]
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	3204      	adds	r2, #4
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1d1a      	adds	r2, r3, #4
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d28:	615a      	str	r2, [r3, #20]
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d36:	e026      	b.n	8003d86 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d40:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d209      	bcs.n	8003d64 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f7fe f972 	bl	8002046 <vListInsert>
}
 8003d62:	e010      	b.n	8003d86 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7fe f968 	bl	8002046 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d202      	bcs.n	8003d86 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003d80:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6013      	str	r3, [r2, #0]
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200001b4 	.word	0x200001b4
 8003d94:	200000d8 	.word	0x200000d8
 8003d98:	200001b8 	.word	0x200001b8
 8003d9c:	2000019c 	.word	0x2000019c
 8003da0:	2000016c 	.word	0x2000016c
 8003da4:	20000168 	.word	0x20000168
 8003da8:	200001d0 	.word	0x200001d0

08003dac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003db6:	f000 fa47 	bl	8004248 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003dba:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <xTimerCreateTimerTask+0x54>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <xTimerCreateTimerTask+0x58>)
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003dd0:	490d      	ldr	r1, [pc, #52]	; (8003e08 <xTimerCreateTimerTask+0x5c>)
 8003dd2:	480e      	ldr	r0, [pc, #56]	; (8003e0c <xTimerCreateTimerTask+0x60>)
 8003dd4:	f7fe fcca 	bl	800276c <xTaskCreate>
 8003dd8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	603b      	str	r3, [r7, #0]
    }
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003df6:	687b      	ldr	r3, [r7, #4]
    }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000020c 	.word	0x2000020c
 8003e04:	20000210 	.word	0x20000210
 8003e08:	080075f0 	.word	0x080075f0
 8003e0c:	08003eb5 	.word	0x08003eb5

08003e10 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e1c:	e008      	b.n	8003e30 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	4413      	add	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	18d1      	adds	r1, r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f8dd 	bl	8003ffc <prvInsertTimerInActiveList>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ea      	bne.n	8003e1e <prvReloadTimer+0xe>
        }
    }
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <prvProcessExpiredTimer+0x5c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe f923 	bl	80020b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff ffc3 	bl	8003e10 <prvReloadTimer>
 8003e8a:	e008      	b.n	8003e9e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	4798      	blx	r3
    }
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000204 	.word	0x20000204

08003eb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 f857 	bl	8003f74 <prvGetNextExpireTime>
 8003ec6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f803 	bl	8003ed8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ed2:	f000 f8d5 	bl	8004080 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ed6:	e7f1      	b.n	8003ebc <prvTimerTask+0x8>

08003ed8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ee2:	f7fe ffd7 	bl	8002e94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f866 	bl	8003fbc <prvSampleTimeNow>
 8003ef0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d130      	bne.n	8003f5a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <prvProcessTimerOrBlockTask+0x3c>
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d806      	bhi.n	8003f14 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f06:	f7fe ffd3 	bl	8002eb0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ffa1 	bl	8003e54 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f12:	e024      	b.n	8003f5e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <prvProcessTimerOrBlockTask+0x90>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <prvProcessTimerOrBlockTask+0x50>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <prvProcessTimerOrBlockTask+0x52>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <prvProcessTimerOrBlockTask+0x94>)
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f7fe fbe3 	bl	8002704 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f3e:	f7fe ffb7 	bl	8002eb0 <xTaskResumeAll>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <prvProcessTimerOrBlockTask+0x98>)
 8003f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	f3bf 8f6f 	isb	sy
    }
 8003f58:	e001      	b.n	8003f5e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f5a:	f7fe ffa9 	bl	8002eb0 <xTaskResumeAll>
    }
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000208 	.word	0x20000208
 8003f6c:	2000020c 	.word	0x2000020c
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <prvGetNextExpireTime+0x44>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <prvGetNextExpireTime+0x16>
 8003f86:	2201      	movs	r2, #1
 8003f88:	e000      	b.n	8003f8c <prvGetNextExpireTime+0x18>
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <prvGetNextExpireTime+0x44>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e001      	b.n	8003fa8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    }
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000204 	.word	0x20000204

08003fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003fc4:	f7ff f874 	bl	80030b0 <xTaskGetTickCount>
 8003fc8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvSampleTimeNow+0x3c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d205      	bcs.n	8003fe0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003fd4:	f000 f912 	bl	80041fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e002      	b.n	8003fe6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <prvSampleTimeNow+0x3c>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003fec:	68fb      	ldr	r3, [r7, #12]
    }
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000214 	.word	0x20000214

08003ffc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	429a      	cmp	r2, r3
 8004020:	d812      	bhi.n	8004048 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	429a      	cmp	r2, r3
 800402e:	d302      	bcc.n	8004036 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e01b      	b.n	800406e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <prvInsertTimerInActiveList+0x7c>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe f800 	bl	8002046 <vListInsert>
 8004046:	e012      	b.n	800406e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	429a      	cmp	r2, r3
 800404e:	d206      	bcs.n	800405e <prvInsertTimerInActiveList+0x62>
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004058:	2301      	movs	r3, #1
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e007      	b.n	800406e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800405e:	4b07      	ldr	r3, [pc, #28]	; (800407c <prvInsertTimerInActiveList+0x80>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fd ffec 	bl	8002046 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800406e:	697b      	ldr	r3, [r7, #20]
    }
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000208 	.word	0x20000208
 800407c:	20000204 	.word	0x20000204

08004080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004086:	e0a6      	b.n	80041d6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f2c0 80a3 	blt.w	80041d6 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3304      	adds	r3, #4
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe f809 	bl	80020b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff ff87 	bl	8003fbc <prvSampleTimeNow>
 80040ae:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f200 808d 	bhi.w	80041d4 <prvProcessReceivedCommands+0x154>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <prvProcessReceivedCommands+0x40>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040e5 	.word	0x080040e5
 80040c8:	0800414d 	.word	0x0800414d
 80040cc:	08004161 	.word	0x08004161
 80040d0:	080041ab 	.word	0x080041ab
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040e5 	.word	0x080040e5
 80040dc:	0800414d 	.word	0x0800414d
 80040e0:	08004161 	.word	0x08004161
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	18d1      	adds	r1, r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	69f8      	ldr	r0, [r7, #28]
 8004104:	f7ff ff7a 	bl	8003ffc <prvInsertTimerInActiveList>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d063      	beq.n	80041d6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d009      	beq.n	8004130 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	4413      	add	r3, r2
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4619      	mov	r1, r3
 8004128:	69f8      	ldr	r0, [r7, #28]
 800412a:	f7ff fe71 	bl	8003e10 <prvReloadTimer>
 800412e:	e008      	b.n	8004142 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004136:	f023 0301 	bic.w	r3, r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	69f8      	ldr	r0, [r7, #28]
 8004148:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800414a:	e044      	b.n	80041d6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004152:	f023 0301 	bic.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800415e:	e03a      	b.n	80041d6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	617b      	str	r3, [r7, #20]
    }
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	18d1      	adds	r1, r2, r3
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	69f8      	ldr	r0, [r7, #28]
 80041a4:	f7ff ff2a 	bl	8003ffc <prvInsertTimerInActiveList>
                        break;
 80041a8:	e015      	b.n	80041d6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80041b8:	69f8      	ldr	r0, [r7, #28]
 80041ba:	f000 fc11 	bl	80049e0 <vPortFree>
 80041be:	e00a      	b.n	80041d6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041d2:	e000      	b.n	80041d6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80041d4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <prvProcessReceivedCommands+0x178>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f107 0108 	add.w	r1, r7, #8
 80041de:	2200      	movs	r2, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe f89b 	bl	800231c <xQueueReceive>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f af4d 	bne.w	8004088 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	2000020c 	.word	0x2000020c

080041fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004202:	e009      	b.n	8004218 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <prvSwitchTimerLists+0x44>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800420e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004212:	6838      	ldr	r0, [r7, #0]
 8004214:	f7ff fe1e 	bl	8003e54 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvSwitchTimerLists+0x44>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <prvSwitchTimerLists+0x44>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <prvSwitchTimerLists+0x48>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <prvSwitchTimerLists+0x44>)
 800422e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004230:	4a04      	ldr	r2, [pc, #16]	; (8004244 <prvSwitchTimerLists+0x48>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6013      	str	r3, [r2, #0]
    }
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20000204 	.word	0x20000204
 8004244:	20000208 	.word	0x20000208

08004248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800424c:	f000 f9e2 	bl	8004614 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11d      	bne.n	8004294 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004258:	4811      	ldr	r0, [pc, #68]	; (80042a0 <prvCheckForValidListAndQueue+0x58>)
 800425a:	f7fd fea3 	bl	8001fa4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800425e:	4811      	ldr	r0, [pc, #68]	; (80042a4 <prvCheckForValidListAndQueue+0x5c>)
 8004260:	f7fd fea0 	bl	8001fa4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004266:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <prvCheckForValidListAndQueue+0x58>)
 8004268:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvCheckForValidListAndQueue+0x64>)
 800426c:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <prvCheckForValidListAndQueue+0x5c>)
 800426e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004270:	2200      	movs	r2, #0
 8004272:	210c      	movs	r1, #12
 8004274:	200a      	movs	r0, #10
 8004276:	f7fd ffd9 	bl	800222c <xQueueGenericCreate>
 800427a:	4603      	mov	r3, r0
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 800427e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4908      	ldr	r1, [pc, #32]	; (80042b0 <prvCheckForValidListAndQueue+0x68>)
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe f9e2 	bl	8002658 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004294:	f000 f9ee 	bl	8004674 <vPortExitCritical>
    }
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	2000020c 	.word	0x2000020c
 80042a0:	200001dc 	.word	0x200001dc
 80042a4:	200001f0 	.word	0x200001f0
 80042a8:	20000204 	.word	0x20000204
 80042ac:	20000208 	.word	0x20000208
 80042b0:	080075f8 	.word	0x080075f8

080042b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b04      	subs	r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b04      	subs	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b04      	subs	r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <pxPortInitialiseStack+0x64>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b14      	subs	r3, #20
 80042ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b04      	subs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f06f 0202 	mvn.w	r2, #2
 8004302:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b20      	subs	r3, #32
 8004308:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	0800431d 	.word	0x0800431d

0800431c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <prvTaskExitError+0x54>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432e:	d00a      	beq.n	8004346 <prvTaskExitError+0x2a>
        __asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60fb      	str	r3, [r7, #12]
    }
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <prvTaskExitError+0x28>
        __asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60bb      	str	r3, [r7, #8]
    }
 8004358:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800435a:	bf00      	nop
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0fc      	beq.n	800435c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	20000010 	.word	0x20000010
	...

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	4770      	bx	lr
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst2>:
 80043a0:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <prvPortStartFirstTask+0x24>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8814 	msr	CONTROL, r0
 80043ba:	b662      	cpsie	i
 80043bc:	b661      	cpsie	f
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	df00      	svc	0
 80043c8:	bf00      	nop
 80043ca:	0000      	.short	0x0000
 80043cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop

080043d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043da:	4b46      	ldr	r3, [pc, #280]	; (80044f4 <xPortStartScheduler+0x120>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <xPortStartScheduler+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10a      	bne.n	80043fa <xPortStartScheduler+0x26>
        __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	613b      	str	r3, [r7, #16]
    }
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043fa:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <xPortStartScheduler+0x120>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3f      	ldr	r2, [pc, #252]	; (80044fc <xPortStartScheduler+0x128>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10a      	bne.n	800441a <xPortStartScheduler+0x46>
        __asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
    }
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <xPortStartScheduler+0x12c>)
 800441c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <xPortStartScheduler+0x130>)
 8004440:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <xPortStartScheduler+0x134>)
 8004444:	2207      	movs	r2, #7
 8004446:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004448:	e009      	b.n	800445e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800444a:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <xPortStartScheduler+0x134>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <xPortStartScheduler+0x134>)
 8004452:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d0ef      	beq.n	800444a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <xPortStartScheduler+0x134>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	d00a      	beq.n	800448c <xPortStartScheduler+0xb8>
        __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
    }
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800448c:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <xPortStartScheduler+0x134>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <xPortStartScheduler+0x134>)
 8004494:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <xPortStartScheduler+0x134>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800449e:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <xPortStartScheduler+0x134>)
 80044a0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <xPortStartScheduler+0x138>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <xPortStartScheduler+0x138>)
 80044b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <xPortStartScheduler+0x138>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <xPortStartScheduler+0x138>)
 80044bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044c2:	f000 f963 	bl	800478c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <xPortStartScheduler+0x13c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044cc:	f000 f982 	bl	80047d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <xPortStartScheduler+0x140>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <xPortStartScheduler+0x140>)
 80044d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044dc:	f7ff ff64 	bl	80043a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044e0:	f7fe ff22 	bl	8003328 <vTaskSwitchContext>
    prvTaskExitError();
 80044e4:	f7ff ff1a 	bl	800431c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	410fc271 	.word	0x410fc271
 80044fc:	410fc270 	.word	0x410fc270
 8004500:	e000e400 	.word	0xe000e400
 8004504:	20000218 	.word	0x20000218
 8004508:	2000021c 	.word	0x2000021c
 800450c:	e000ed20 	.word	0xe000ed20
 8004510:	20000010 	.word	0x20000010
 8004514:	e000ef34 	.word	0xe000ef34

08004518 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <vInitPrioGroupValue+0xe4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a37      	ldr	r2, [pc, #220]	; (8004600 <vInitPrioGroupValue+0xe8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10a      	bne.n	800453e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	613b      	str	r3, [r7, #16]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <vInitPrioGroupValue+0xe4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a30      	ldr	r2, [pc, #192]	; (8004604 <vInitPrioGroupValue+0xec>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10a      	bne.n	800455e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
    }
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <vInitPrioGroupValue+0xf0>)
 8004560:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <vInitPrioGroupValue+0xf4>)
 8004584:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <vInitPrioGroupValue+0xf8>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458c:	e009      	b.n	80045a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <vInitPrioGroupValue+0xf8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <vInitPrioGroupValue+0xf8>)
 8004596:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d0ef      	beq.n	800458e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d00a      	beq.n	80045d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60bb      	str	r3, [r7, #8]
    }
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045e2:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000ed00 	.word	0xe000ed00
 8004600:	410fc271 	.word	0x410fc271
 8004604:	410fc270 	.word	0x410fc270
 8004608:	e000e400 	.word	0xe000e400
 800460c:	20000218 	.word	0x20000218
 8004610:	2000021c 	.word	0x2000021c

08004614 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
        __asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	607b      	str	r3, [r7, #4]
    }
 800462c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <vPortEnterCritical+0x58>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <vPortEnterCritical+0x58>)
 8004636:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <vPortEnterCritical+0x58>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10f      	bne.n	8004660 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortEnterCritical+0x5c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <vPortEnterCritical+0x4c>
        __asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
    }
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vPortEnterCritical+0x4a>
    }
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	20000010 	.word	0x20000010
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <vPortExitCritical+0x50>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <vPortExitCritical+0x24>
        __asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
    }
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <vPortExitCritical+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <vPortExitCritical+0x50>)
 80046a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <vPortExitCritical+0x50>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <vPortExitCritical+0x42>
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80046b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000010 	.word	0x20000010
	...

080046d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046d0:	f3ef 8009 	mrs	r0, PSP
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <pxCurrentTCBConst>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f01e 0f10 	tst.w	lr, #16
 80046e0:	bf08      	it	eq
 80046e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	6010      	str	r0, [r2, #0]
 80046ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046f4:	f380 8811 	msr	BASEPRI, r0
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f7fe fe12 	bl	8003328 <vTaskSwitchContext>
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f380 8811 	msr	BASEPRI, r0
 800470c:	bc09      	pop	{r0, r3}
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004716:	f01e 0f10 	tst.w	lr, #16
 800471a:	bf08      	it	eq
 800471c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004720:	f380 8809 	msr	PSP, r0
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst>:
 8004730:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
        __asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
    }
 8004750:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004752:	f002 fb2d 	bl	8006db0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004756:	f7fe fccd 	bl	80030f4 <xTaskIncrementTick>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004760:	f002 fb84 	bl	8006e6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <SysTick_Handler+0x50>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e001      	b.n	8004772 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800476e:	f002 fb61 	bl	8006e34 <SEGGER_SYSVIEW_RecordExitISR>
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f383 8811 	msr	BASEPRI, r3
    }
 800477c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <vPortSetupTimerInterrupt+0x34>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <vPortSetupTimerInterrupt+0x38>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <vPortSetupTimerInterrupt+0x3c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <vPortSetupTimerInterrupt+0x40>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <vPortSetupTimerInterrupt+0x44>)
 80047aa:	3b01      	subs	r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vPortSetupTimerInterrupt+0x34>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000e010 	.word	0xe000e010
 80047c4:	e000e018 	.word	0xe000e018
 80047c8:	20000000 	.word	0x20000000
 80047cc:	10624dd3 	.word	0x10624dd3
 80047d0:	e000e014 	.word	0xe000e014

080047d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047e4 <vPortEnableVFP+0x10>
 80047d8:	6801      	ldr	r1, [r0, #0]
 80047da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047de:	6001      	str	r1, [r0, #0]
 80047e0:	4770      	bx	lr
 80047e2:	0000      	.short	0x0000
 80047e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop

080047ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047f2:	f3ef 8305 	mrs	r3, IPSR
 80047f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	d914      	bls.n	8004828 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <vPortValidateInterruptPriority+0x70>)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <vPortValidateInterruptPriority+0x74>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	7afa      	ldrb	r2, [r7, #11]
 800480e:	429a      	cmp	r2, r3
 8004810:	d20a      	bcs.n	8004828 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	607b      	str	r3, [r7, #4]
    }
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <vPortValidateInterruptPriority+0x78>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <vPortValidateInterruptPriority+0x7c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d90a      	bls.n	800484e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	603b      	str	r3, [r7, #0]
    }
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <vPortValidateInterruptPriority+0x60>
    }
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	e000e3f0 	.word	0xe000e3f0
 8004860:	20000218 	.word	0x20000218
 8004864:	e000ed0c 	.word	0xe000ed0c
 8004868:	2000021c 	.word	0x2000021c

0800486c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004878:	f7fe fb0c 	bl	8002e94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <pvPortMalloc+0x160>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004884:	f000 f908 	bl	8004a98 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800488e:	2208      	movs	r2, #8
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	3308      	adds	r3, #8
 800489a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	43db      	mvns	r3, r3
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d804      	bhi.n	80048b0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4413      	add	r3, r2
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	e001      	b.n	80048b4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db70      	blt.n	800499c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d06d      	beq.n	800499c <pvPortMalloc+0x130>
 80048c0:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <pvPortMalloc+0x164>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d868      	bhi.n	800499c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <pvPortMalloc+0x168>)
 80048cc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <pvPortMalloc+0x168>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048d4:	e004      	b.n	80048e0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d903      	bls.n	80048f2 <pvPortMalloc+0x86>
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f1      	bne.n	80048d6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80048f2:	4b36      	ldr	r3, [pc, #216]	; (80049cc <pvPortMalloc+0x160>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d04f      	beq.n	800499c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2208      	movs	r2, #8
 8004902:	4413      	add	r3, r2
 8004904:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1ad2      	subs	r2, r2, r3
 8004916:	2308      	movs	r3, #8
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	429a      	cmp	r2, r3
 800491c:	d91f      	bls.n	800495e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800491e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <pvPortMalloc+0xda>
        __asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	613b      	str	r3, [r7, #16]
    }
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad2      	subs	r2, r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004958:	6978      	ldr	r0, [r7, #20]
 800495a:	f000 f8f9 	bl	8004b50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800495e:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <pvPortMalloc+0x164>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <pvPortMalloc+0x164>)
 800496a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800496c:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <pvPortMalloc+0x164>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <pvPortMalloc+0x16c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d203      	bcs.n	8004980 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <pvPortMalloc+0x164>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <pvPortMalloc+0x16c>)
 800497e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004992:	4b12      	ldr	r3, [pc, #72]	; (80049dc <pvPortMalloc+0x170>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <pvPortMalloc+0x170>)
 800499a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800499c:	f7fe fa88 	bl	8002eb0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <pvPortMalloc+0x154>
        __asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60fb      	str	r3, [r7, #12]
    }
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <pvPortMalloc+0x152>
    return pvReturn;
 80049c0:	69fb      	ldr	r3, [r7, #28]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3728      	adds	r7, #40	; 0x28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20012e28 	.word	0x20012e28
 80049d0:	20012e2c 	.word	0x20012e2c
 80049d4:	20012e20 	.word	0x20012e20
 80049d8:	20012e30 	.word	0x20012e30
 80049dc:	20012e34 	.word	0x20012e34

080049e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d049      	beq.n	8004a86 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80049f2:	2308      	movs	r3, #8
 80049f4:	425b      	negs	r3, r3
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	db0a      	blt.n	8004a1e <vPortFree+0x3e>
        __asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	60fb      	str	r3, [r7, #12]
    }
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <vPortFree+0x5c>
        __asm volatile
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	60bb      	str	r3, [r7, #8]
    }
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	0fdb      	lsrs	r3, r3, #31
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01c      	beq.n	8004a86 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d118      	bne.n	8004a86 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004a60:	f7fe fa18 	bl	8002e94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <vPortFree+0xb0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <vPortFree+0xb0>)
 8004a70:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a72:	6938      	ldr	r0, [r7, #16]
 8004a74:	f000 f86c 	bl	8004b50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <vPortFree+0xb4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <vPortFree+0xb4>)
 8004a80:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004a82:	f7fe fa15 	bl	8002eb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20012e2c 	.word	0x20012e2c
 8004a94:	20012e38 	.word	0x20012e38

08004a98 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a9e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004aa2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <prvHeapInit+0xa4>)
 8004aa6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <prvHeapInit+0xa4>)
 8004ac8:	4413      	add	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ad0:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <prvHeapInit+0xa8>)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <prvHeapInit+0xa8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a13      	ldr	r2, [pc, #76]	; (8004b44 <prvHeapInit+0xac>)
 8004af8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <prvHeapInit+0xac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2200      	movs	r2, #0
 8004b00:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <prvHeapInit+0xac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	1ad2      	subs	r2, r2, r3
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <prvHeapInit+0xac>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <prvHeapInit+0xb0>)
 8004b26:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <prvHeapInit+0xb4>)
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000220 	.word	0x20000220
 8004b40:	20012e20 	.word	0x20012e20
 8004b44:	20012e28 	.word	0x20012e28
 8004b48:	20012e30 	.word	0x20012e30
 8004b4c:	20012e2c 	.word	0x20012e2c

08004b50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b58:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <prvInsertBlockIntoFreeList+0xac>)
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e002      	b.n	8004b64 <prvInsertBlockIntoFreeList+0x14>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d8f7      	bhi.n	8004b5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d108      	bne.n	8004b92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	441a      	add	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d118      	bne.n	8004bd8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <prvInsertBlockIntoFreeList+0xb0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d00d      	beq.n	8004bce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e008      	b.n	8004be0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bce:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <prvInsertBlockIntoFreeList+0xb0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e003      	b.n	8004be0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d002      	beq.n	8004bee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004bee:	bf00      	nop
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20012e20 	.word	0x20012e20
 8004c00:	20012e28 	.word	0x20012e28

08004c04 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]
 8004c0e:	e033      	b.n	8004c78 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004c10:	491e      	ldr	r1, [pc, #120]	; (8004c8c <_cbSendTaskList+0x88>)
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	491a      	ldr	r1, [pc, #104]	; (8004c8c <_cbSendTaskList+0x88>)
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3304      	adds	r3, #4
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	4c16      	ldr	r4, [pc, #88]	; (8004c8c <_cbSendTaskList+0x88>)
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4423      	add	r3, r4
 8004c40:	3308      	adds	r3, #8
 8004c42:	681c      	ldr	r4, [r3, #0]
 8004c44:	4d11      	ldr	r5, [pc, #68]	; (8004c8c <_cbSendTaskList+0x88>)
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	442b      	add	r3, r5
 8004c52:	330c      	adds	r3, #12
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	4e0d      	ldr	r6, [pc, #52]	; (8004c8c <_cbSendTaskList+0x88>)
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4433      	add	r3, r6
 8004c64:	3310      	adds	r3, #16
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	462b      	mov	r3, r5
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	f000 f8bd 	bl	8004dec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3301      	adds	r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <_cbSendTaskList+0x8c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3c6      	bcc.n	8004c10 <_cbSendTaskList+0xc>
  }
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8c:	20012e3c 	.word	0x20012e3c
 8004c90:	20012edc 	.word	0x20012edc

08004c94 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c9c:	f7fe fa18 	bl	80030d0 <xTaskGetTickCountFromISR>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	469a      	mov	sl, r3
 8004ca6:	4693      	mov	fp, r2
 8004ca8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	f04f 0a00 	mov.w	sl, #0
 8004cb8:	f04f 0b00 	mov.w	fp, #0
 8004cbc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004cc0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004cc4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004cc8:	4652      	mov	r2, sl
 8004cca:	465b      	mov	r3, fp
 8004ccc:	1a14      	subs	r4, r2, r0
 8004cce:	eb63 0501 	sbc.w	r5, r3, r1
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	00ab      	lsls	r3, r5, #2
 8004cdc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ce0:	00a2      	lsls	r2, r4, #2
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	461d      	mov	r5, r3
 8004ce6:	eb14 0800 	adds.w	r8, r4, r0
 8004cea:	eb45 0901 	adc.w	r9, r5, r1
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d02:	4690      	mov	r8, r2
 8004d04:	4699      	mov	r9, r3
 8004d06:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004d1c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	492b      	ldr	r1, [pc, #172]	; (8004ddc <SYSVIEW_AddTask+0xc0>)
 8004d2e:	68b8      	ldr	r0, [r7, #8]
 8004d30:	f002 fba8 	bl	8007484 <memcmp>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d04b      	beq.n	8004dd2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004d3a:	4b29      	ldr	r3, [pc, #164]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b07      	cmp	r3, #7
 8004d40:	d903      	bls.n	8004d4a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004d42:	4828      	ldr	r0, [pc, #160]	; (8004de4 <SYSVIEW_AddTask+0xc8>)
 8004d44:	f002 faf0 	bl	8007328 <SEGGER_SYSVIEW_Warn>
    return;
 8004d48:	e044      	b.n	8004dd4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d4a:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4926      	ldr	r1, [pc, #152]	; (8004de8 <SYSVIEW_AddTask+0xcc>)
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d5e:	4b20      	ldr	r3, [pc, #128]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4921      	ldr	r1, [pc, #132]	; (8004de8 <SYSVIEW_AddTask+0xcc>)
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3304      	adds	r3, #4
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d74:	4b1a      	ldr	r3, [pc, #104]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	491b      	ldr	r1, [pc, #108]	; (8004de8 <SYSVIEW_AddTask+0xcc>)
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	3308      	adds	r3, #8
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	4916      	ldr	r1, [pc, #88]	; (8004de8 <SYSVIEW_AddTask+0xcc>)
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4910      	ldr	r1, [pc, #64]	; (8004de8 <SYSVIEW_AddTask+0xcc>)
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3310      	adds	r3, #16
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004db6:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <SYSVIEW_AddTask+0xc4>)
 8004dbe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f80e 	bl	8004dec <SYSVIEW_SendTaskInfo>
 8004dd0:	e000      	b.n	8004dd4 <SYSVIEW_AddTask+0xb8>
    return;
 8004dd2:	bf00      	nop

}
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	08007600 	.word	0x08007600
 8004de0:	20012edc 	.word	0x20012edc
 8004de4:	08007608 	.word	0x08007608
 8004de8:	20012e3c 	.word	0x20012e3c

08004dec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004dfa:	f107 0314 	add.w	r3, r7, #20
 8004dfe:	2214      	movs	r2, #20
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 fb4e 	bl	80074a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 fe77 	bl	8006b14 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004e26:	bf00      	nop
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <__NVIC_EnableIRQ>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db0b      	blt.n	8004e5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	f003 021f 	and.w	r2, r3, #31
 8004e48:	4907      	ldr	r1, [pc, #28]	; (8004e68 <__NVIC_EnableIRQ+0x38>)
 8004e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2001      	movs	r0, #1
 8004e52:	fa00 f202 	lsl.w	r2, r0, r2
 8004e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000e100 	.word	0xe000e100

08004e6c <__NVIC_SetPriority>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	6039      	str	r1, [r7, #0]
 8004e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	db0a      	blt.n	8004e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	490c      	ldr	r1, [pc, #48]	; (8004eb8 <__NVIC_SetPriority+0x4c>)
 8004e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	440b      	add	r3, r1
 8004e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e94:	e00a      	b.n	8004eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4908      	ldr	r1, [pc, #32]	; (8004ebc <__NVIC_SetPriority+0x50>)
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	3b04      	subs	r3, #4
 8004ea4:	0112      	lsls	r2, r2, #4
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	761a      	strb	r2, [r3, #24]
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000e100 	.word	0xe000e100
 8004ebc:	e000ed00 	.word	0xe000ed00

08004ec0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004ec6:	f002 fa8b 	bl	80073e0 <SEGGER_SYSVIEW_IsStarted>
 8004eca:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004ed2:	f001 fca3 	bl	800681c <SEGGER_SYSVIEW_Start>
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004eea:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <_cbOnUARTRx+0x3c>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d806      	bhi.n	8004f00 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <_cbOnUARTRx+0x3c>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <_cbOnUARTRx+0x3c>)
 8004efc:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004efe:	e009      	b.n	8004f14 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004f00:	f7ff ffde 	bl	8004ec0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <_cbOnUARTRx+0x3c>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	1dfb      	adds	r3, r7, #7
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f000 fb9a 	bl	8005648 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004f14:	bf00      	nop
}
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000014 	.word	0x20000014

08004f20 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <_cbOnUARTTx+0x5c>)
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d80f      	bhi.n	8004f50 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <_cbOnUARTTx+0x5c>)
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <_cbOnUARTTx+0x60>)
 8004f38:	5c9a      	ldrb	r2, [r3, r2]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <_cbOnUARTTx+0x5c>)
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	3301      	adds	r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <_cbOnUARTTx+0x5c>)
 8004f48:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004f4e:	e00f      	b.n	8004f70 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <_cbOnUARTTx+0x5c>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fa19 	bl	8005390 <SEGGER_RTT_ReadUpBufferNoLock>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	da02      	bge.n	8004f6e <_cbOnUARTTx+0x4e>
    r = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e000      	b.n	8004f70 <_cbOnUARTTx+0x50>
  }
Done:
 8004f6e:	bf00      	nop
  return r;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000014 	.word	0x20000014
 8004f80:	080076dc 	.word	0x080076dc

08004f84 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <SEGGER_UART_init+0x1c>)
 8004f8e:	4905      	ldr	r1, [pc, #20]	; (8004fa4 <SEGGER_UART_init+0x20>)
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f863 	bl	800505c <HIF_UART_Init>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	08004ee1 	.word	0x08004ee1
 8004fa4:	08004f21 	.word	0x08004f21

08004fa8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004fae:	4b1e      	ldr	r3, [pc, #120]	; (8005028 <USART2_IRQHandler+0x80>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d011      	beq.n	8004fe2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004fbe:	4b1b      	ldr	r3, [pc, #108]	; (800502c <USART2_IRQHandler+0x84>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 030b 	and.w	r3, r3, #11
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d108      	bne.n	8004fe2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <USART2_IRQHandler+0x88>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d004      	beq.n	8004fe2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004fd8:	4b15      	ldr	r3, [pc, #84]	; (8005030 <USART2_IRQHandler+0x88>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	79fa      	ldrb	r2, [r7, #7]
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01a      	beq.n	8005022 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fec:	4b11      	ldr	r3, [pc, #68]	; (8005034 <USART2_IRQHandler+0x8c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d015      	beq.n	8005020 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <USART2_IRQHandler+0x8c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	1dfa      	adds	r2, r7, #7
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4798      	blx	r3
 8004ffe:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005006:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <USART2_IRQHandler+0x90>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a0b      	ldr	r2, [pc, #44]	; (8005038 <USART2_IRQHandler+0x90>)
 800500c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e006      	b.n	8005022 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <USART2_IRQHandler+0x80>)
 8005016:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005018:	79fa      	ldrb	r2, [r7, #7]
 800501a:	4b04      	ldr	r3, [pc, #16]	; (800502c <USART2_IRQHandler+0x84>)
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e000      	b.n	8005022 <USART2_IRQHandler+0x7a>
      return;
 8005020:	bf00      	nop
    }
  }
}
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40004400 	.word	0x40004400
 800502c:	40004404 	.word	0x40004404
 8005030:	20012ee0 	.word	0x20012ee0
 8005034:	20012ee4 	.word	0x20012ee4
 8005038:	4000440c 	.word	0x4000440c

0800503c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	4000440c 	.word	0x4000440c

0800505c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005068:	4b2e      	ldr	r3, [pc, #184]	; (8005124 <HIF_UART_Init+0xc8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <HIF_UART_Init+0xc8>)
 800506e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005072:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005074:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <HIF_UART_Init+0xcc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2b      	ldr	r2, [pc, #172]	; (8005128 <HIF_UART_Init+0xcc>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005080:	4b2a      	ldr	r3, [pc, #168]	; (800512c <HIF_UART_Init+0xd0>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005094:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005096:	4a25      	ldr	r2, [pc, #148]	; (800512c <HIF_UART_Init+0xd0>)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800509c:	4b24      	ldr	r3, [pc, #144]	; (8005130 <HIF_UART_Init+0xd4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80050b0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80050b2:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <HIF_UART_Init+0xd4>)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <HIF_UART_Init+0xd8>)
 80050ba:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80050be:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HIF_UART_Init+0xdc>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80050c6:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HIF_UART_Init+0xe0>)
 80050c8:	2280      	movs	r2, #128	; 0x80
 80050ca:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80050d2:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HIF_UART_Init+0xe4>)
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050da:	3301      	adds	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d302      	bcc.n	80050f2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80050ec:	f640 73ff 	movw	r3, #4095	; 0xfff
 80050f0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	4a11      	ldr	r2, [pc, #68]	; (8005144 <HIF_UART_Init+0xe8>)
 80050fe:	b29b      	uxth	r3, r3
 8005100:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005102:	4a11      	ldr	r2, [pc, #68]	; (8005148 <HIF_UART_Init+0xec>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005108:	4a10      	ldr	r2, [pc, #64]	; (800514c <HIF_UART_Init+0xf0>)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800510e:	2106      	movs	r1, #6
 8005110:	2026      	movs	r0, #38	; 0x26
 8005112:	f7ff feab 	bl	8004e6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005116:	2026      	movs	r0, #38	; 0x26
 8005118:	f7ff fe8a 	bl	8004e30 <__NVIC_EnableIRQ>
}
 800511c:	bf00      	nop
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023840 	.word	0x40023840
 8005128:	40023830 	.word	0x40023830
 800512c:	40020020 	.word	0x40020020
 8005130:	40020000 	.word	0x40020000
 8005134:	4000440c 	.word	0x4000440c
 8005138:	40004410 	.word	0x40004410
 800513c:	40004414 	.word	0x40004414
 8005140:	0501bd00 	.word	0x0501bd00
 8005144:	40004408 	.word	0x40004408
 8005148:	20012ee0 	.word	0x20012ee0
 800514c:	20012ee4 	.word	0x20012ee4

08005150 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005156:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <_DoInit+0x98>)
 8005158:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2203      	movs	r2, #3
 800515e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2203      	movs	r2, #3
 8005164:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <_DoInit+0x9c>)
 800516a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a20      	ldr	r2, [pc, #128]	; (80051f0 <_DoInit+0xa0>)
 8005170:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005178:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a17      	ldr	r2, [pc, #92]	; (80051ec <_DoInit+0x9c>)
 8005190:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <_DoInit+0xa4>)
 8005196:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2210      	movs	r2, #16
 800519c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3307      	adds	r3, #7
 80051b4:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <_DoInit+0xa8>)
 80051b6:	6810      	ldr	r0, [r2, #0]
 80051b8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051ba:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <_DoInit+0xac>)
 80051c2:	6810      	ldr	r0, [r2, #0]
 80051c4:	6018      	str	r0, [r3, #0]
 80051c6:	8891      	ldrh	r1, [r2, #4]
 80051c8:	7992      	ldrb	r2, [r2, #6]
 80051ca:	8099      	strh	r1, [r3, #4]
 80051cc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051ce:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051d8:	f3bf 8f5f 	dmb	sy
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20012ee8 	.word	0x20012ee8
 80051ec:	08007658 	.word	0x08007658
 80051f0:	20012f90 	.word	0x20012f90
 80051f4:	20013390 	.word	0x20013390
 80051f8:	08007664 	.word	0x08007664
 80051fc:	08007668 	.word	0x08007668

08005200 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	429a      	cmp	r2, r3
 8005222:	d905      	bls.n	8005230 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e007      	b.n	8005240 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1acb      	subs	r3, r1, r3
 800523a:	4413      	add	r3, r2
 800523c:	3b01      	subs	r3, #1
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	4293      	cmp	r3, r2
 800524c:	bf28      	it	cs
 800524e:	4613      	movcs	r3, r2
 8005250:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4293      	cmp	r3, r2
 8005258:	bf28      	it	cs
 800525a:	4613      	movcs	r3, r2
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	68b9      	ldr	r1, [r7, #8]
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f002 f945 	bl	80074fc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005272:	6a3a      	ldr	r2, [r7, #32]
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	4413      	add	r3, r2
 8005278:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	4413      	add	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	4413      	add	r3, r2
 8005290:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	429a      	cmp	r2, r3
 800529a:	d101      	bne.n	80052a0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800529c:	2300      	movs	r3, #0
 800529e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1b2      	bne.n	8005216 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80052b0:	6a3b      	ldr	r3, [r7, #32]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	; 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d911      	bls.n	8005302 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	6938      	ldr	r0, [r7, #16]
 80052ee:	f002 f905 	bl	80074fc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052f2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	441a      	add	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005300:	e01f      	b.n	8005342 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6938      	ldr	r0, [r7, #16]
 8005316:	f002 f8f1 	bl	80074fc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4619      	mov	r1, r3
 8005332:	6938      	ldr	r0, [r7, #16]
 8005334:	f002 f8e2 	bl	80074fc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005338:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	60da      	str	r2, [r3, #12]
}
 8005342:	bf00      	nop
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800534a:	b480      	push	{r7}
 800534c:	b087      	sub	sp, #28
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	429a      	cmp	r2, r3
 8005364:	d808      	bhi.n	8005378 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad2      	subs	r2, r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	3b01      	subs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e004      	b.n	8005382 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b08c      	sub	sp, #48	; 0x30
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800539c:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800539e:	623b      	str	r3, [r7, #32]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80053aa:	f7ff fed1 	bl	8005150 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	4613      	mov	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4a37      	ldr	r2, [pc, #220]	; (8005498 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80053bc:	4413      	add	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053d0:	2300      	movs	r3, #0
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d92b      	bls.n	8005434 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bf28      	it	cs
 80053ee:	4613      	movcs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	4413      	add	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	6939      	ldr	r1, [r7, #16]
 8005400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005402:	f002 f87b 	bl	80074fc <memcpy>
    NumBytesRead += NumBytesRem;
 8005406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	4413      	add	r3, r2
 800540c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800541e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4413      	add	r3, r2
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800542c:	429a      	cmp	r2, r3
 800542e:	d101      	bne.n	8005434 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005430:	2300      	movs	r3, #0
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4293      	cmp	r3, r2
 8005442:	bf28      	it	cs
 8005444:	4613      	movcs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d019      	beq.n	8005482 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005454:	4413      	add	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	6939      	ldr	r1, [r7, #16]
 800545c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800545e:	f002 f84d 	bl	80074fc <memcpy>
    NumBytesRead += NumBytesRem;
 8005462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4413      	add	r3, r2
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800547a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800548c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005490:	4618      	mov	r0, r3
 8005492:	3730      	adds	r7, #48	; 0x30
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20012ee8 	.word	0x20012ee8

0800549c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80054a8:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <SEGGER_RTT_ReadNoLock+0x1e>
 80054b6:	f7ff fe4b 	bl	8005150 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	3360      	adds	r3, #96	; 0x60
 80054c6:	4a37      	ldr	r2, [pc, #220]	; (80055a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80054c8:	4413      	add	r3, r2
 80054ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80054dc:	2300      	movs	r3, #0
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80054e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d92b      	bls.n	8005540 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bf28      	it	cs
 80054fa:	4613      	movcs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	4413      	add	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	6939      	ldr	r1, [r7, #16]
 800550c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800550e:	f001 fff5 	bl	80074fc <memcpy>
    NumBytesRead += NumBytesRem;
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800552a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005538:	429a      	cmp	r2, r3
 800553a:	d101      	bne.n	8005540 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800553c:	2300      	movs	r3, #0
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4293      	cmp	r3, r2
 800554e:	bf28      	it	cs
 8005550:	4613      	movcs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d019      	beq.n	800558e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	4413      	add	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	6939      	ldr	r1, [r7, #16]
 8005568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800556a:	f001 ffc7 	bl	80074fc <memcpy>
    NumBytesRead += NumBytesRem;
 800556e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	4413      	add	r3, r2
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4413      	add	r3, r2
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800559c:	4618      	mov	r0, r3
 800559e:	3730      	adds	r7, #48	; 0x30
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20012ee8 	.word	0x20012ee8

080055a8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4613      	mov	r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	3360      	adds	r3, #96	; 0x60
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80055c6:	4413      	add	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d029      	beq.n	8005626 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d82e      	bhi.n	8005634 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d013      	beq.n	8005606 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80055de:	e029      	b.n	8005634 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80055e0:	6978      	ldr	r0, [r7, #20]
 80055e2:	f7ff feb2 	bl	800534a <_GetAvailWriteSpace>
 80055e6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d202      	bcs.n	80055f6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80055f4:	e021      	b.n	800563a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f7ff fe5b 	bl	80052ba <_WriteNoCheck>
    break;
 8005604:	e019      	b.n	800563a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005606:	6978      	ldr	r0, [r7, #20]
 8005608:	f7ff fe9f 	bl	800534a <_GetAvailWriteSpace>
 800560c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4293      	cmp	r3, r2
 8005614:	bf28      	it	cs
 8005616:	4613      	movcs	r3, r2
 8005618:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	6978      	ldr	r0, [r7, #20]
 8005620:	f7ff fe4b 	bl	80052ba <_WriteNoCheck>
    break;
 8005624:	e009      	b.n	800563a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	69b9      	ldr	r1, [r7, #24]
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f7ff fde8 	bl	8005200 <_WriteBlocking>
 8005630:	61f8      	str	r0, [r7, #28]
    break;
 8005632:	e002      	b.n	800563a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
    break;
 8005638:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800563a:	69fb      	ldr	r3, [r7, #28]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3720      	adds	r7, #32
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20012ee8 	.word	0x20012ee8

08005648 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005662:	f7ff fd75 	bl	8005150 <_DoInit>
  SEGGER_RTT_LOCK();
 8005666:	f3ef 8311 	mrs	r3, BASEPRI
 800566a:	f04f 0120 	mov.w	r1, #32
 800566e:	f381 8811 	msr	BASEPRI, r1
 8005672:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f7ff ff95 	bl	80055a8 <SEGGER_RTT_WriteDownBufferNoLock>
 800567e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005686:	697b      	ldr	r3, [r7, #20]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20012ee8 	.word	0x20012ee8

08005694 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80056a2:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80056b0:	f7ff fd4e 	bl	8005150 <_DoInit>
  SEGGER_RTT_LOCK();
 80056b4:	f3ef 8311 	mrs	r3, BASEPRI
 80056b8:	f04f 0120 	mov.w	r1, #32
 80056bc:	f381 8811 	msr	BASEPRI, r1
 80056c0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056c2:	4b35      	ldr	r3, [pc, #212]	; (8005798 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80056c4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	4613      	mov	r3, r2
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4413      	add	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	440b      	add	r3, r1
 80056da:	3304      	adds	r3, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	3301      	adds	r3, #1
 80056e6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	dbeb      	blt.n	80056ca <SEGGER_RTT_AllocUpBuffer+0x36>
 80056f2:	e000      	b.n	80056f6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80056f4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	da3f      	bge.n	8005780 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005700:	6939      	ldr	r1, [r7, #16]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	440b      	add	r3, r1
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005714:	6939      	ldr	r1, [r7, #16]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	4613      	mov	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4413      	add	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	440b      	add	r3, r1
 8005724:	3304      	adds	r3, #4
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800572a:	6939      	ldr	r1, [r7, #16]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	4613      	mov	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	3320      	adds	r3, #32
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800573e:	6939      	ldr	r1, [r7, #16]
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	4613      	mov	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	4413      	add	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	440b      	add	r3, r1
 800574c:	3328      	adds	r3, #40	; 0x28
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005752:	6939      	ldr	r1, [r7, #16]
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	4613      	mov	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	4413      	add	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	440b      	add	r3, r1
 8005760:	3324      	adds	r3, #36	; 0x24
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005766:	6939      	ldr	r1, [r7, #16]
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	4613      	mov	r3, r2
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4413      	add	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	440b      	add	r3, r1
 8005774:	332c      	adds	r3, #44	; 0x2c
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800577a:	f3bf 8f5f 	dmb	sy
 800577e:	e002      	b.n	8005786 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005784:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800578c:	69fb      	ldr	r3, [r7, #28]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20012ee8 	.word	0x20012ee8

0800579c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80057aa:	4b33      	ldr	r3, [pc, #204]	; (8005878 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80057b8:	f7ff fcca 	bl	8005150 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057bc:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80057be:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	461a      	mov	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d24d      	bcs.n	8005868 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80057cc:	f3ef 8311 	mrs	r3, BASEPRI
 80057d0:	f04f 0120 	mov.w	r1, #32
 80057d4:	f381 8811 	msr	BASEPRI, r1
 80057d8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d031      	beq.n	8005844 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80057e0:	6979      	ldr	r1, [r7, #20]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	3360      	adds	r3, #96	; 0x60
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80057f4:	6979      	ldr	r1, [r7, #20]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	3364      	adds	r3, #100	; 0x64
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005808:	6979      	ldr	r1, [r7, #20]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	440b      	add	r3, r1
 8005816:	3368      	adds	r3, #104	; 0x68
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	3370      	adds	r3, #112	; 0x70
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005830:	6979      	ldr	r1, [r7, #20]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4613      	mov	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	440b      	add	r3, r1
 800583e:	336c      	adds	r3, #108	; 0x6c
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005844:	6979      	ldr	r1, [r7, #20]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4613      	mov	r3, r2
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	4413      	add	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	440b      	add	r3, r1
 8005852:	3374      	adds	r3, #116	; 0x74
 8005854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005856:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005858:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e002      	b.n	800586e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800586c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20012ee8 	.word	0x20012ee8

0800587c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800588c:	e002      	b.n	8005894 <_EncodeStr+0x18>
    Len++;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f6      	bne.n	800588e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d901      	bls.n	80058ac <_EncodeStr+0x30>
    Len = Limit;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2bfe      	cmp	r3, #254	; 0xfe
 80058b0:	d806      	bhi.n	80058c0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	60fa      	str	r2, [r7, #12]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e011      	b.n	80058e4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	60fa      	str	r2, [r7, #12]
 80058c6:	22ff      	movs	r2, #255	; 0xff
 80058c8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	60fa      	str	r2, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	0a19      	lsrs	r1, r3, #8
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	60fa      	str	r2, [r7, #12]
 80058e0:	b2ca      	uxtb	r2, r1
 80058e2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80058e8:	e00a      	b.n	8005900 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	1c53      	adds	r3, r2, #1
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	60f9      	str	r1, [r7, #12]
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	701a      	strb	r2, [r3, #0]
    n++;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	3301      	adds	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	429a      	cmp	r2, r3
 8005906:	d3f0      	bcc.n	80058ea <_EncodeStr+0x6e>
  }
  return pPayload;
 8005908:	68fb      	ldr	r3, [r7, #12]
}
 800590a:	4618      	mov	r0, r3
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3304      	adds	r3, #4
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005936:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <_HandleIncomingPacket+0xdc>)
 8005938:	7e1b      	ldrb	r3, [r3, #24]
 800593a:	4618      	mov	r0, r3
 800593c:	1cfb      	adds	r3, r7, #3
 800593e:	2201      	movs	r2, #1
 8005940:	4619      	mov	r1, r3
 8005942:	f7ff fdab 	bl	800549c <SEGGER_RTT_ReadNoLock>
 8005946:	4603      	mov	r3, r0
 8005948:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dd59      	ble.n	8005a04 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d032      	beq.n	80059bc <_HandleIncomingPacket+0x8c>
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	dc42      	bgt.n	80059e0 <_HandleIncomingPacket+0xb0>
 800595a:	2b07      	cmp	r3, #7
 800595c:	dc16      	bgt.n	800598c <_HandleIncomingPacket+0x5c>
 800595e:	2b00      	cmp	r3, #0
 8005960:	dd3e      	ble.n	80059e0 <_HandleIncomingPacket+0xb0>
 8005962:	3b01      	subs	r3, #1
 8005964:	2b06      	cmp	r3, #6
 8005966:	d83b      	bhi.n	80059e0 <_HandleIncomingPacket+0xb0>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <_HandleIncomingPacket+0x40>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	08005993 	.word	0x08005993
 8005974:	08005999 	.word	0x08005999
 8005978:	0800599f 	.word	0x0800599f
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ab 	.word	0x080059ab
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059b7 	.word	0x080059b7
 800598c:	2b7f      	cmp	r3, #127	; 0x7f
 800598e:	d034      	beq.n	80059fa <_HandleIncomingPacket+0xca>
 8005990:	e026      	b.n	80059e0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005992:	f000 ff43 	bl	800681c <SEGGER_SYSVIEW_Start>
      break;
 8005996:	e035      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005998:	f000 fffc 	bl	8006994 <SEGGER_SYSVIEW_Stop>
      break;
 800599c:	e032      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800599e:	f001 f9d5 	bl	8006d4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80059a2:	e02f      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80059a4:	f001 f99a 	bl	8006cdc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80059a8:	e02c      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80059aa:	f001 f819 	bl	80069e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80059ae:	e029      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80059b0:	f001 fc68 	bl	8007284 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80059b4:	e026      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80059b6:	f001 fc47 	bl	8007248 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80059ba:	e023      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <_HandleIncomingPacket+0xdc>)
 80059be:	7e1b      	ldrb	r3, [r3, #24]
 80059c0:	4618      	mov	r0, r3
 80059c2:	1cfb      	adds	r3, r7, #3
 80059c4:	2201      	movs	r2, #1
 80059c6:	4619      	mov	r1, r3
 80059c8:	f7ff fd68 	bl	800549c <SEGGER_RTT_ReadNoLock>
 80059cc:	4603      	mov	r3, r0
 80059ce:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	dd13      	ble.n	80059fe <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 fbb5 	bl	8007148 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80059de:	e00e      	b.n	80059fe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	b25b      	sxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da0c      	bge.n	8005a02 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80059e8:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <_HandleIncomingPacket+0xdc>)
 80059ea:	7e1b      	ldrb	r3, [r3, #24]
 80059ec:	4618      	mov	r0, r3
 80059ee:	1cfb      	adds	r3, r7, #3
 80059f0:	2201      	movs	r2, #1
 80059f2:	4619      	mov	r1, r3
 80059f4:	f7ff fd52 	bl	800549c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80059f8:	e003      	b.n	8005a02 <_HandleIncomingPacket+0xd2>
      break;
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
      break;
 80059fe:	bf00      	nop
 8005a00:	e000      	b.n	8005a04 <_HandleIncomingPacket+0xd4>
      break;
 8005a02:	bf00      	nop
    }
  }
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	200143a8 	.word	0x200143a8

08005a10 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005a16:	2301      	movs	r3, #1
 8005a18:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005a1a:	1d3b      	adds	r3, r7, #4
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	e00b      	b.n	8005a44 <_TrySendOverflowPacket+0x34>
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2b7f      	cmp	r3, #127	; 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <_TrySendOverflowPacket+0x1c>
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a5a:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <_TrySendOverflowPacket+0xe4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a60:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	623b      	str	r3, [r7, #32]
 8005a72:	e00b      	b.n	8005a8c <_TrySendOverflowPacket+0x7c>
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	1c59      	adds	r1, r3, #1
 8005a7c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	09db      	lsrs	r3, r3, #7
 8005a8a:	623b      	str	r3, [r7, #32]
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a90:	d8f0      	bhi.n	8005a74 <_TrySendOverflowPacket+0x64>
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	627a      	str	r2, [r7, #36]	; 0x24
 8005a98:	6a3a      	ldr	r2, [r7, #32]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005aa2:	4b13      	ldr	r3, [pc, #76]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	1d3b      	adds	r3, r7, #4
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f7fa fb94 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005abc:	f7ff fabe 	bl	800503c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ac6:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005ad6:	701a      	strb	r2, [r3, #0]
 8005ad8:	e004      	b.n	8005ae4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	4a03      	ldr	r2, [pc, #12]	; (8005af0 <_TrySendOverflowPacket+0xe0>)
 8005ae2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ae4:	693b      	ldr	r3, [r7, #16]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3730      	adds	r7, #48	; 0x30
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200143a8 	.word	0x200143a8
 8005af4:	e0001004 	.word	0xe0001004

08005af8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08a      	sub	sp, #40	; 0x28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005b04:	4b6d      	ldr	r3, [pc, #436]	; (8005cbc <_SendPacket+0x1c4>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d010      	beq.n	8005b2e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005b0c:	4b6b      	ldr	r3, [pc, #428]	; (8005cbc <_SendPacket+0x1c4>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80a5 	beq.w	8005c60 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005b16:	4b69      	ldr	r3, [pc, #420]	; (8005cbc <_SendPacket+0x1c4>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d109      	bne.n	8005b32 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005b1e:	f7ff ff77 	bl	8005a10 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005b22:	4b66      	ldr	r3, [pc, #408]	; (8005cbc <_SendPacket+0x1c4>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f040 809c 	bne.w	8005c64 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005b2c:	e001      	b.n	8005b32 <_SendPacket+0x3a>
    goto Send;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <_SendPacket+0x3c>
Send:
 8005b32:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b1f      	cmp	r3, #31
 8005b38:	d809      	bhi.n	8005b4e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005b3a:	4b60      	ldr	r3, [pc, #384]	; (8005cbc <_SendPacket+0x1c4>)
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 808d 	bne.w	8005c68 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b17      	cmp	r3, #23
 8005b52:	d807      	bhi.n	8005b64 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e03d      	b.n	8005be0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d912      	bls.n	8005b98 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	09da      	lsrs	r2, r3, #7
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	60fa      	str	r2, [r7, #12]
 8005b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e006      	b.n	8005ba6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8005baa:	d912      	bls.n	8005bd2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	09da      	lsrs	r2, r3, #7
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	3a01      	subs	r2, #1
 8005bc4:	60fa      	str	r2, [r7, #12]
 8005bc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	e006      	b.n	8005be0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005be0:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <_SendPacket+0x1c8>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005be6:	4b35      	ldr	r3, [pc, #212]	; (8005cbc <_SendPacket+0x1c4>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	e00b      	b.n	8005c12 <_SendPacket+0x11a>
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	6279      	str	r1, [r7, #36]	; 0x24
 8005c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	2b7f      	cmp	r3, #127	; 0x7f
 8005c16:	d8f0      	bhi.n	8005bfa <_SendPacket+0x102>
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	627a      	str	r2, [r7, #36]	; 0x24
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <_SendPacket+0x1c4>)
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	f7fa fad2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005c40:	f7ff f9fc 	bl	800503c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c4a:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <_SendPacket+0x1c4>)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	60d3      	str	r3, [r2, #12]
 8005c50:	e00b      	b.n	8005c6a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005c52:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <_SendPacket+0x1c4>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	3301      	adds	r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <_SendPacket+0x1c4>)
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	e004      	b.n	8005c6a <_SendPacket+0x172>
    goto SendDone;
 8005c60:	bf00      	nop
 8005c62:	e002      	b.n	8005c6a <_SendPacket+0x172>
      goto SendDone;
 8005c64:	bf00      	nop
 8005c66:	e000      	b.n	8005c6a <_SendPacket+0x172>
      goto SendDone;
 8005c68:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <_SendPacket+0x1c4>)
 8005c6c:	7e1b      	ldrb	r3, [r3, #24]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <_SendPacket+0x1cc>)
 8005c72:	460b      	mov	r3, r1
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	440b      	add	r3, r1
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	336c      	adds	r3, #108	; 0x6c
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <_SendPacket+0x1c4>)
 8005c82:	7e1b      	ldrb	r3, [r3, #24]
 8005c84:	4618      	mov	r0, r3
 8005c86:	490f      	ldr	r1, [pc, #60]	; (8005cc4 <_SendPacket+0x1cc>)
 8005c88:	4603      	mov	r3, r0
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4403      	add	r3, r0
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	440b      	add	r3, r1
 8005c92:	3370      	adds	r3, #112	; 0x70
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d00b      	beq.n	8005cb2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <_SendPacket+0x1c4>)
 8005c9c:	789b      	ldrb	r3, [r3, #2]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d107      	bne.n	8005cb2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <_SendPacket+0x1c4>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ca8:	f7ff fe42 	bl	8005930 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005cac:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <_SendPacket+0x1c4>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005cb2:	bf00      	nop
 8005cb4:	3728      	adds	r7, #40	; 0x28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200143a8 	.word	0x200143a8
 8005cc0:	e0001004 	.word	0xe0001004
 8005cc4:	20012ee8 	.word	0x20012ee8

08005cc8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08a      	sub	sp, #40	; 0x28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d80a      	bhi.n	8005cf8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	1c59      	adds	r1, r3, #1
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6051      	str	r1, [r2, #4]
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b80      	cmp	r3, #128	; 0x80
 8005cfe:	d15a      	bne.n	8005db6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	e00b      	b.n	8005d3a <_StoreChar+0x72>
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	1c59      	adds	r1, r3, #1
 8005d2a:	6279      	str	r1, [r7, #36]	; 0x24
 8005d2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	09db      	lsrs	r3, r3, #7
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d3e:	d8f0      	bhi.n	8005d22 <_StoreChar+0x5a>
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	627a      	str	r2, [r7, #36]	; 0x24
 8005d46:	6a3a      	ldr	r2, [r7, #32]
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	2300      	movs	r3, #0
 8005d56:	61bb      	str	r3, [r7, #24]
 8005d58:	e00b      	b.n	8005d72 <_StoreChar+0xaa>
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	1c59      	adds	r1, r3, #1
 8005d62:	61f9      	str	r1, [r7, #28]
 8005d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	09db      	lsrs	r3, r3, #7
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b7f      	cmp	r3, #127	; 0x7f
 8005d76:	d8f0      	bhi.n	8005d5a <_StoreChar+0x92>
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	61fa      	str	r2, [r7, #28]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	221a      	movs	r2, #26
 8005d8e:	6939      	ldr	r1, [r7, #16]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff feb1 	bl	8005af8 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fdbb 	bl	8005916 <_PreparePacket>
 8005da0:	4602      	mov	r2, r0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	611a      	str	r2, [r3, #16]
  }
}
 8005db6:	bf00      	nop
 8005db8:	3728      	adds	r7, #40	; 0x28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
 8005dcc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005dda:	e007      	b.n	8005dec <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de4:	623b      	str	r3, [r7, #32]
    Width++;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3301      	adds	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005dec:	6a3a      	ldr	r2, [r7, #32]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d2f3      	bcs.n	8005ddc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d901      	bls.n	8005e00 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11f      	bne.n	8005e4a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01c      	beq.n	8005e4a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <_PrintUnsigned+0x66>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <_PrintUnsigned+0x66>
        c = '0';
 8005e20:	2330      	movs	r3, #48	; 0x30
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	e001      	b.n	8005e2a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005e26:	2320      	movs	r3, #32
 8005e28:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e2a:	e007      	b.n	8005e3c <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005e32:	7efb      	ldrb	r3, [r7, #27]
 8005e34:	4619      	mov	r1, r3
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f7ff ff46 	bl	8005cc8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <_PrintUnsigned+0x8a>
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d3f0      	bcc.n	8005e2c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d903      	bls.n	8005e58 <_PrintUnsigned+0x98>
      NumDigits--;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	e009      	b.n	8005e6c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d200      	bcs.n	8005e6c <_PrintUnsigned+0xac>
        break;
 8005e6a:	e005      	b.n	8005e78 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005e76:	e7e8      	b.n	8005e4a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <_PrintUnsigned+0x128>)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	4413      	add	r3, r2
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff14 	bl	8005cc8 <_StoreChar>
    Digit /= Base;
 8005ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e3      	bne.n	8005e78 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d011      	beq.n	8005ede <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ec0:	e006      	b.n	8005ed0 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005ec8:	2120      	movs	r1, #32
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff fefc 	bl	8005cc8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <_PrintUnsigned+0x11e>
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d3f1      	bcc.n	8005ec2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005ede:	bf00      	nop
 8005ee0:	3728      	adds	r7, #40	; 0x28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	080076ec 	.word	0x080076ec

08005eec <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af02      	add	r7, sp, #8
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfb8      	it	lt
 8005f00:	425b      	neglt	r3, r3
 8005f02:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005f04:	2301      	movs	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005f08:	e007      	b.n	8005f1a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f12:	613b      	str	r3, [r7, #16]
    Width++;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3301      	adds	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	daf3      	bge.n	8005f0a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d901      	bls.n	8005f2e <_PrintInt+0x42>
    Width = NumDigits;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <_PrintInt+0x5e>
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	db04      	blt.n	8005f44 <_PrintInt+0x58>
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <_PrintInt+0x5e>
    FieldWidth--;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <_PrintInt+0x6e>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <_PrintInt+0x9c>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d111      	bne.n	8005f88 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00e      	beq.n	8005f88 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f6a:	e006      	b.n	8005f7a <_PrintInt+0x8e>
        FieldWidth--;
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005f72:	2120      	movs	r1, #32
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f7ff fea7 	bl	8005cc8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <_PrintInt+0x9c>
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d3f1      	bcc.n	8005f6c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da07      	bge.n	8005f9e <_PrintInt+0xb2>
    v = -v;
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	425b      	negs	r3, r3
 8005f92:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005f94:	212d      	movs	r1, #45	; 0x2d
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff fe96 	bl	8005cc8 <_StoreChar>
 8005f9c:	e008      	b.n	8005fb0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005fa8:	212b      	movs	r1, #43	; 0x2b
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fe8c 	bl	8005cc8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d019      	beq.n	8005fee <_PrintInt+0x102>
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d114      	bne.n	8005fee <_PrintInt+0x102>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d111      	bne.n	8005fee <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fd0:	e006      	b.n	8005fe0 <_PrintInt+0xf4>
        FieldWidth--;
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005fd8:	2130      	movs	r1, #48	; 0x30
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f7ff fe74 	bl	8005cc8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <_PrintInt+0x102>
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d3f1      	bcc.n	8005fd2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fedf 	bl	8005dc0 <_PrintUnsigned>
}
 8006002:	bf00      	nop
 8006004:	3718      	adds	r7, #24
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
	...

0800600c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b098      	sub	sp, #96	; 0x60
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006018:	f3ef 8311 	mrs	r3, BASEPRI
 800601c:	f04f 0120 	mov.w	r1, #32
 8006020:	f381 8811 	msr	BASEPRI, r1
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
 8006026:	48b7      	ldr	r0, [pc, #732]	; (8006304 <_VPrintTarget+0x2f8>)
 8006028:	f7ff fc75 	bl	8005916 <_PreparePacket>
 800602c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800602e:	4bb5      	ldr	r3, [pc, #724]	; (8006304 <_VPrintTarget+0x2f8>)
 8006030:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006032:	2300      	movs	r3, #0
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	3301      	adds	r3, #1
 800603e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006052:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8183 	beq.w	8006362 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800605c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006060:	2b25      	cmp	r3, #37	; 0x25
 8006062:	f040 8170 	bne.w	8006346 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006066:	2300      	movs	r3, #0
 8006068:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800606a:	2301      	movs	r3, #1
 800606c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800607a:	3b23      	subs	r3, #35	; 0x23
 800607c:	2b0d      	cmp	r3, #13
 800607e:	d83f      	bhi.n	8006100 <_VPrintTarget+0xf4>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <_VPrintTarget+0x7c>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060f1 	.word	0x080060f1
 800608c:	08006101 	.word	0x08006101
 8006090:	08006101 	.word	0x08006101
 8006094:	08006101 	.word	0x08006101
 8006098:	08006101 	.word	0x08006101
 800609c:	08006101 	.word	0x08006101
 80060a0:	08006101 	.word	0x08006101
 80060a4:	08006101 	.word	0x08006101
 80060a8:	080060e1 	.word	0x080060e1
 80060ac:	08006101 	.word	0x08006101
 80060b0:	080060c1 	.word	0x080060c1
 80060b4:	08006101 	.word	0x08006101
 80060b8:	08006101 	.word	0x08006101
 80060bc:	080060d1 	.word	0x080060d1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80060c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c2:	f043 0301 	orr.w	r3, r3, #1
 80060c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e01a      	b.n	8006106 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80060d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d2:	f043 0302 	orr.w	r3, r3, #2
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3301      	adds	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e012      	b.n	8006106 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80060e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	3301      	adds	r3, #1
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e00a      	b.n	8006106 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80060f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f2:	f043 0308 	orr.w	r3, r3, #8
 80060f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e002      	b.n	8006106 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006100:	2300      	movs	r3, #0
 8006102:	653b      	str	r3, [r7, #80]	; 0x50
 8006104:	bf00      	nop
        }
      } while (v);
 8006106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1b0      	bne.n	800606e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800610c:	2300      	movs	r3, #0
 800610e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800611c:	2b2f      	cmp	r3, #47	; 0x2f
 800611e:	d912      	bls.n	8006146 <_VPrintTarget+0x13a>
 8006120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006124:	2b39      	cmp	r3, #57	; 0x39
 8006126:	d80e      	bhi.n	8006146 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800612e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006130:	4613      	mov	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4413      	add	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	461a      	mov	r2, r3
 800613a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800613e:	4413      	add	r3, r2
 8006140:	3b30      	subs	r3, #48	; 0x30
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006144:	e7e4      	b.n	8006110 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006146:	2300      	movs	r3, #0
 8006148:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006156:	2b2e      	cmp	r3, #46	; 0x2e
 8006158:	d11d      	bne.n	8006196 <_VPrintTarget+0x18a>
        sFormat++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800616c:	2b2f      	cmp	r3, #47	; 0x2f
 800616e:	d912      	bls.n	8006196 <_VPrintTarget+0x18a>
 8006170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006174:	2b39      	cmp	r3, #57	; 0x39
 8006176:	d80e      	bhi.n	8006196 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800617e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	461a      	mov	r2, r3
 800618a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800618e:	4413      	add	r3, r2
 8006190:	3b30      	subs	r3, #48	; 0x30
 8006192:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006194:	e7e4      	b.n	8006160 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800619e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061a2:	2b6c      	cmp	r3, #108	; 0x6c
 80061a4:	d003      	beq.n	80061ae <_VPrintTarget+0x1a2>
 80061a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061aa:	2b68      	cmp	r3, #104	; 0x68
 80061ac:	d107      	bne.n	80061be <_VPrintTarget+0x1b2>
          c = *sFormat;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80061bc:	e7ef      	b.n	800619e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80061be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061c2:	2b25      	cmp	r3, #37	; 0x25
 80061c4:	f000 80b3 	beq.w	800632e <_VPrintTarget+0x322>
 80061c8:	2b25      	cmp	r3, #37	; 0x25
 80061ca:	f2c0 80b7 	blt.w	800633c <_VPrintTarget+0x330>
 80061ce:	2b78      	cmp	r3, #120	; 0x78
 80061d0:	f300 80b4 	bgt.w	800633c <_VPrintTarget+0x330>
 80061d4:	2b58      	cmp	r3, #88	; 0x58
 80061d6:	f2c0 80b1 	blt.w	800633c <_VPrintTarget+0x330>
 80061da:	3b58      	subs	r3, #88	; 0x58
 80061dc:	2b20      	cmp	r3, #32
 80061de:	f200 80ad 	bhi.w	800633c <_VPrintTarget+0x330>
 80061e2:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <_VPrintTarget+0x1dc>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	080062df 	.word	0x080062df
 80061ec:	0800633d 	.word	0x0800633d
 80061f0:	0800633d 	.word	0x0800633d
 80061f4:	0800633d 	.word	0x0800633d
 80061f8:	0800633d 	.word	0x0800633d
 80061fc:	0800633d 	.word	0x0800633d
 8006200:	0800633d 	.word	0x0800633d
 8006204:	0800633d 	.word	0x0800633d
 8006208:	0800633d 	.word	0x0800633d
 800620c:	0800633d 	.word	0x0800633d
 8006210:	0800633d 	.word	0x0800633d
 8006214:	0800626d 	.word	0x0800626d
 8006218:	08006293 	.word	0x08006293
 800621c:	0800633d 	.word	0x0800633d
 8006220:	0800633d 	.word	0x0800633d
 8006224:	0800633d 	.word	0x0800633d
 8006228:	0800633d 	.word	0x0800633d
 800622c:	0800633d 	.word	0x0800633d
 8006230:	0800633d 	.word	0x0800633d
 8006234:	0800633d 	.word	0x0800633d
 8006238:	0800633d 	.word	0x0800633d
 800623c:	0800633d 	.word	0x0800633d
 8006240:	0800633d 	.word	0x0800633d
 8006244:	0800633d 	.word	0x0800633d
 8006248:	08006309 	.word	0x08006309
 800624c:	0800633d 	.word	0x0800633d
 8006250:	0800633d 	.word	0x0800633d
 8006254:	0800633d 	.word	0x0800633d
 8006258:	0800633d 	.word	0x0800633d
 800625c:	080062b9 	.word	0x080062b9
 8006260:	0800633d 	.word	0x0800633d
 8006264:	0800633d 	.word	0x0800633d
 8006268:	080062df 	.word	0x080062df
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	1d19      	adds	r1, r3, #4
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6011      	str	r1, [r2, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800627a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006280:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fd1c 	bl	8005cc8 <_StoreChar>
        break;
 8006290:	e055      	b.n	800633e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	1d19      	adds	r1, r3, #4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6011      	str	r1, [r2, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80062a0:	f107 0014 	add.w	r0, r7, #20
 80062a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ae:	220a      	movs	r2, #10
 80062b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062b2:	f7ff fe1b 	bl	8005eec <_PrintInt>
        break;
 80062b6:	e042      	b.n	800633e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	1d19      	adds	r1, r3, #4
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6011      	str	r1, [r2, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80062c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062c8:	f107 0014 	add.w	r0, r7, #20
 80062cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d6:	220a      	movs	r2, #10
 80062d8:	f7ff fd72 	bl	8005dc0 <_PrintUnsigned>
        break;
 80062dc:	e02f      	b.n	800633e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1d19      	adds	r1, r3, #4
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6011      	str	r1, [r2, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80062ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062ee:	f107 0014 	add.w	r0, r7, #20
 80062f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fc:	2210      	movs	r2, #16
 80062fe:	f7ff fd5f 	bl	8005dc0 <_PrintUnsigned>
        break;
 8006302:	e01c      	b.n	800633e <_VPrintTarget+0x332>
 8006304:	200143d8 	.word	0x200143d8
      case 'p':
        v = va_arg(*pParamList, int);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6011      	str	r1, [r2, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006318:	f107 0014 	add.w	r0, r7, #20
 800631c:	2300      	movs	r3, #0
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	2308      	movs	r3, #8
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2308      	movs	r3, #8
 8006326:	2210      	movs	r2, #16
 8006328:	f7ff fd4a 	bl	8005dc0 <_PrintUnsigned>
        break;
 800632c:	e007      	b.n	800633e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800632e:	f107 0314 	add.w	r3, r7, #20
 8006332:	2125      	movs	r1, #37	; 0x25
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fcc7 	bl	8005cc8 <_StoreChar>
        break;
 800633a:	e000      	b.n	800633e <_VPrintTarget+0x332>
      default:
        break;
 800633c:	bf00      	nop
      }
      sFormat++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3301      	adds	r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	e007      	b.n	8006356 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006346:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800634a:	f107 0314 	add.w	r3, r7, #20
 800634e:	4611      	mov	r1, r2
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fcb9 	bl	8005cc8 <_StoreChar>
    }
  } while (*sFormat);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f47f ae72 	bne.w	8006044 <_VPrintTarget+0x38>
 8006360:	e000      	b.n	8006364 <_VPrintTarget+0x358>
      break;
 8006362:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d041      	beq.n	80063ee <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	643b      	str	r3, [r7, #64]	; 0x40
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637a:	e00b      	b.n	8006394 <_VPrintTarget+0x388>
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6439      	str	r1, [r7, #64]	; 0x40
 8006386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006390:	09db      	lsrs	r3, r3, #7
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006396:	2b7f      	cmp	r3, #127	; 0x7f
 8006398:	d8f0      	bhi.n	800637c <_VPrintTarget+0x370>
 800639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	643a      	str	r2, [r7, #64]	; 0x40
 80063a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063a8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ae:	2300      	movs	r3, #0
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
 80063b2:	e00b      	b.n	80063cc <_VPrintTarget+0x3c0>
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80063be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	09db      	lsrs	r3, r3, #7
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	2b7f      	cmp	r3, #127	; 0x7f
 80063d0:	d8f0      	bhi.n	80063b4 <_VPrintTarget+0x3a8>
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80063d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	221a      	movs	r2, #26
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fb85 	bl	8005af8 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80063f4:	bf00      	nop
 80063f6:	3758      	adds	r7, #88	; 0x58
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800640a:	2300      	movs	r3, #0
 800640c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006410:	4917      	ldr	r1, [pc, #92]	; (8006470 <SEGGER_SYSVIEW_Init+0x74>)
 8006412:	4818      	ldr	r0, [pc, #96]	; (8006474 <SEGGER_SYSVIEW_Init+0x78>)
 8006414:	f7ff f93e 	bl	8005694 <SEGGER_RTT_AllocUpBuffer>
 8006418:	4603      	mov	r3, r0
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b16      	ldr	r3, [pc, #88]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 800641e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006420:	4b15      	ldr	r3, [pc, #84]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 8006422:	785a      	ldrb	r2, [r3, #1]
 8006424:	4b14      	ldr	r3, [pc, #80]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 8006426:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 800642a:	7e1b      	ldrb	r3, [r3, #24]
 800642c:	4618      	mov	r0, r3
 800642e:	2300      	movs	r3, #0
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	2308      	movs	r3, #8
 8006434:	4a11      	ldr	r2, [pc, #68]	; (800647c <SEGGER_SYSVIEW_Init+0x80>)
 8006436:	490f      	ldr	r1, [pc, #60]	; (8006474 <SEGGER_SYSVIEW_Init+0x78>)
 8006438:	f7ff f9b0 	bl	800579c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800643c:	4b0e      	ldr	r3, [pc, #56]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 800643e:	2200      	movs	r2, #0
 8006440:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <SEGGER_SYSVIEW_Init+0x84>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 8006448:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800644a:	4a0b      	ldr	r2, [pc, #44]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006450:	4a09      	ldr	r2, [pc, #36]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006456:	4a08      	ldr	r2, [pc, #32]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800645c:	4a06      	ldr	r2, [pc, #24]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <SEGGER_SYSVIEW_Init+0x7c>)
 8006464:	2200      	movs	r2, #0
 8006466:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200133a0 	.word	0x200133a0
 8006474:	08007670 	.word	0x08007670
 8006478:	200143a8 	.word	0x200143a8
 800647c:	200143a0 	.word	0x200143a0
 8006480:	e0001004 	.word	0xe0001004

08006484 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800648c:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6113      	str	r3, [r2, #16]
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	200143a8 	.word	0x200143a8

080064a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064ac:	f3ef 8311 	mrs	r3, BASEPRI
 80064b0:	f04f 0120 	mov.w	r1, #32
 80064b4:	f381 8811 	msr	BASEPRI, r1
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	4808      	ldr	r0, [pc, #32]	; (80064dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80064bc:	f7ff fa2b 	bl	8005916 <_PreparePacket>
 80064c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68b8      	ldr	r0, [r7, #8]
 80064c8:	f7ff fb16 	bl	8005af8 <_SendPacket>
  RECORD_END();
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f383 8811 	msr	BASEPRI, r3
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200143d8 	.word	0x200143d8

080064e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80064ea:	f3ef 8311 	mrs	r3, BASEPRI
 80064ee:	f04f 0120 	mov.w	r1, #32
 80064f2:	f381 8811 	msr	BASEPRI, r1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	4816      	ldr	r0, [pc, #88]	; (8006554 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80064fa:	f7ff fa0c 	bl	8005916 <_PreparePacket>
 80064fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	e00b      	b.n	8006526 <SEGGER_SYSVIEW_RecordU32+0x46>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	61f9      	str	r1, [r7, #28]
 8006518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b7f      	cmp	r3, #127	; 0x7f
 800652a:	d8f0      	bhi.n	800650e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	61fa      	str	r2, [r7, #28]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	6938      	ldr	r0, [r7, #16]
 8006542:	f7ff fad9 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f383 8811 	msr	BASEPRI, r3
}
 800654c:	bf00      	nop
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	200143d8 	.word	0x200143d8

08006558 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b08c      	sub	sp, #48	; 0x30
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006564:	f3ef 8311 	mrs	r3, BASEPRI
 8006568:	f04f 0120 	mov.w	r1, #32
 800656c:	f381 8811 	msr	BASEPRI, r1
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	4825      	ldr	r0, [pc, #148]	; (8006608 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006574:	f7ff f9cf 	bl	8005916 <_PreparePacket>
 8006578:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
 8006586:	e00b      	b.n	80065a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	1c59      	adds	r1, r3, #1
 8006590:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	09db      	lsrs	r3, r3, #7
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2b7f      	cmp	r3, #127	; 0x7f
 80065a4:	d8f0      	bhi.n	8006588 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	6279      	str	r1, [r7, #36]	; 0x24
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	623b      	str	r3, [r7, #32]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	627a      	str	r2, [r7, #36]	; 0x24
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	6979      	ldr	r1, [r7, #20]
 80065f2:	69b8      	ldr	r0, [r7, #24]
 80065f4:	f7ff fa80 	bl	8005af8 <_SendPacket>
  RECORD_END();
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
 8006600:	3730      	adds	r7, #48	; 0x30
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200143d8 	.word	0x200143d8

0800660c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b08e      	sub	sp, #56	; 0x38
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800661a:	f3ef 8311 	mrs	r3, BASEPRI
 800661e:	f04f 0120 	mov.w	r1, #32
 8006622:	f381 8811 	msr	BASEPRI, r1
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	4832      	ldr	r0, [pc, #200]	; (80066f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800662a:	f7ff f974 	bl	8005916 <_PreparePacket>
 800662e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
 800663c:	e00b      	b.n	8006656 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	6379      	str	r1, [r7, #52]	; 0x34
 8006648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	09db      	lsrs	r3, r3, #7
 8006654:	633b      	str	r3, [r7, #48]	; 0x30
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b7f      	cmp	r3, #127	; 0x7f
 800665a:	d8f0      	bhi.n	800663e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	637a      	str	r2, [r7, #52]	; 0x34
 8006662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
 8006674:	e00b      	b.n	800668e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	b2da      	uxtb	r2, r3
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	1c59      	adds	r1, r3, #1
 800667e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	09db      	lsrs	r3, r3, #7
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	2b7f      	cmp	r3, #127	; 0x7f
 8006692:	d8f0      	bhi.n	8006676 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	62fa      	str	r2, [r7, #44]	; 0x2c
 800669a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	e00b      	b.n	80066c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1c59      	adds	r1, r3, #1
 80066b6:	6279      	str	r1, [r7, #36]	; 0x24
 80066b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	09db      	lsrs	r3, r3, #7
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2b7f      	cmp	r3, #127	; 0x7f
 80066ca:	d8f0      	bhi.n	80066ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	627a      	str	r2, [r7, #36]	; 0x24
 80066d2:	6a3a      	ldr	r2, [r7, #32]
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	6979      	ldr	r1, [r7, #20]
 80066e0:	69b8      	ldr	r0, [r7, #24]
 80066e2:	f7ff fa09 	bl	8005af8 <_SendPacket>
  RECORD_END();
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	f383 8811 	msr	BASEPRI, r3
}
 80066ec:	bf00      	nop
 80066ee:	3738      	adds	r7, #56	; 0x38
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200143d8 	.word	0x200143d8

080066f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b090      	sub	sp, #64	; 0x40
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006706:	f3ef 8311 	mrs	r3, BASEPRI
 800670a:	f04f 0120 	mov.w	r1, #32
 800670e:	f381 8811 	msr	BASEPRI, r1
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	4840      	ldr	r0, [pc, #256]	; (8006818 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006716:	f7ff f8fe 	bl	8005916 <_PreparePacket>
 800671a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
 8006728:	e00b      	b.n	8006742 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	b2da      	uxtb	r2, r3
 800672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006730:	1c59      	adds	r1, r3, #1
 8006732:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	09db      	lsrs	r3, r3, #7
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b7f      	cmp	r3, #127	; 0x7f
 8006746:	d8f0      	bhi.n	800672a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800674e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
 8006760:	e00b      	b.n	800677a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	6379      	str	r1, [r7, #52]	; 0x34
 800676c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	633b      	str	r3, [r7, #48]	; 0x30
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d8f0      	bhi.n	8006762 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	637a      	str	r2, [r7, #52]	; 0x34
 8006786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	62bb      	str	r3, [r7, #40]	; 0x28
 8006798:	e00b      	b.n	80067b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	b2da      	uxtb	r2, r3
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	1c59      	adds	r1, r3, #1
 80067a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	09db      	lsrs	r3, r3, #7
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	2b7f      	cmp	r3, #127	; 0x7f
 80067b6:	d8f0      	bhi.n	800679a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
 80067cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	e00b      	b.n	80067ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	6279      	str	r1, [r7, #36]	; 0x24
 80067dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2b7f      	cmp	r3, #127	; 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	627a      	str	r2, [r7, #36]	; 0x24
 80067f6:	6a3a      	ldr	r2, [r7, #32]
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	6979      	ldr	r1, [r7, #20]
 8006804:	69b8      	ldr	r0, [r7, #24]
 8006806:	f7ff f977 	bl	8005af8 <_SendPacket>
  RECORD_END();
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f383 8811 	msr	BASEPRI, r3
}
 8006810:	bf00      	nop
 8006812:	3740      	adds	r7, #64	; 0x40
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	200143d8 	.word	0x200143d8

0800681c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800681c:	b580      	push	{r7, lr}
 800681e:	b08c      	sub	sp, #48	; 0x30
 8006820:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006822:	4b59      	ldr	r3, [pc, #356]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 8006824:	2201      	movs	r2, #1
 8006826:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006828:	f3ef 8311 	mrs	r3, BASEPRI
 800682c:	f04f 0120 	mov.w	r1, #32
 8006830:	f381 8811 	msr	BASEPRI, r1
 8006834:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006836:	4b54      	ldr	r3, [pc, #336]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	220a      	movs	r2, #10
 800683c:	4953      	ldr	r1, [pc, #332]	; (800698c <SEGGER_SYSVIEW_Start+0x170>)
 800683e:	4618      	mov	r0, r3
 8006840:	f7f9 fcce 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800684a:	f7fe fbf7 	bl	800503c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800684e:	200a      	movs	r0, #10
 8006850:	f7ff fe28 	bl	80064a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006854:	f3ef 8311 	mrs	r3, BASEPRI
 8006858:	f04f 0120 	mov.w	r1, #32
 800685c:	f381 8811 	msr	BASEPRI, r1
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	484b      	ldr	r0, [pc, #300]	; (8006990 <SEGGER_SYSVIEW_Start+0x174>)
 8006864:	f7ff f857 	bl	8005916 <_PreparePacket>
 8006868:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006872:	4b45      	ldr	r3, [pc, #276]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
 8006878:	e00b      	b.n	8006892 <SEGGER_SYSVIEW_Start+0x76>
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	b2da      	uxtb	r2, r3
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	1c59      	adds	r1, r3, #1
 8006882:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	62bb      	str	r3, [r7, #40]	; 0x28
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2b7f      	cmp	r3, #127	; 0x7f
 8006896:	d8f0      	bhi.n	800687a <SEGGER_SYSVIEW_Start+0x5e>
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800689e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
 80068ac:	4b36      	ldr	r3, [pc, #216]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	e00b      	b.n	80068cc <SEGGER_SYSVIEW_Start+0xb0>
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	6279      	str	r1, [r7, #36]	; 0x24
 80068be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	623b      	str	r3, [r7, #32]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b7f      	cmp	r3, #127	; 0x7f
 80068d0:	d8f0      	bhi.n	80068b4 <SEGGER_SYSVIEW_Start+0x98>
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	627a      	str	r2, [r7, #36]	; 0x24
 80068d8:	6a3a      	ldr	r2, [r7, #32]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	4b28      	ldr	r3, [pc, #160]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	e00b      	b.n	8006906 <SEGGER_SYSVIEW_Start+0xea>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	1c59      	adds	r1, r3, #1
 80068f6:	61f9      	str	r1, [r7, #28]
 80068f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	09db      	lsrs	r3, r3, #7
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	2b7f      	cmp	r3, #127	; 0x7f
 800690a:	d8f0      	bhi.n	80068ee <SEGGER_SYSVIEW_Start+0xd2>
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	61fa      	str	r2, [r7, #28]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_Start+0x122>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	6179      	str	r1, [r7, #20]
 8006930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	613b      	str	r3, [r7, #16]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b7f      	cmp	r3, #127	; 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_Start+0x10a>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	617a      	str	r2, [r7, #20]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006954:	2218      	movs	r2, #24
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff f8cd 	bl	8005af8 <_SendPacket>
      RECORD_END();
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <SEGGER_SYSVIEW_Start+0x16c>)
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006972:	f000 f9eb 	bl	8006d4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006976:	f000 f9b1 	bl	8006cdc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800697a:	f000 fc83 	bl	8007284 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800697e:	bf00      	nop
 8006980:	3730      	adds	r7, #48	; 0x30
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200143a8 	.word	0x200143a8
 800698c:	080076e0 	.word	0x080076e0
 8006990:	200143d8 	.word	0x200143d8

08006994 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800699a:	f3ef 8311 	mrs	r3, BASEPRI
 800699e:	f04f 0120 	mov.w	r1, #32
 80069a2:	f381 8811 	msr	BASEPRI, r1
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	480b      	ldr	r0, [pc, #44]	; (80069d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80069aa:	f7fe ffb4 	bl	8005916 <_PreparePacket>
 80069ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <SEGGER_SYSVIEW_Stop+0x48>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80069b8:	220b      	movs	r2, #11
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6838      	ldr	r0, [r7, #0]
 80069be:	f7ff f89b 	bl	8005af8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <SEGGER_SYSVIEW_Stop+0x48>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f383 8811 	msr	BASEPRI, r3
}
 80069ce:	bf00      	nop
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200143d8 	.word	0x200143d8
 80069dc:	200143a8 	.word	0x200143a8

080069e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08c      	sub	sp, #48	; 0x30
 80069e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069e6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ea:	f04f 0120 	mov.w	r1, #32
 80069ee:	f381 8811 	msr	BASEPRI, r1
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	4845      	ldr	r0, [pc, #276]	; (8006b0c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80069f6:	f7fe ff8e 	bl	8005916 <_PreparePacket>
 80069fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a0a:	e00b      	b.n	8006a24 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	1c59      	adds	r1, r3, #1
 8006a14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	09db      	lsrs	r3, r3, #7
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	2b7f      	cmp	r3, #127	; 0x7f
 8006a28:	d8f0      	bhi.n	8006a0c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	4b34      	ldr	r3, [pc, #208]	; (8006b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	623b      	str	r3, [r7, #32]
 8006a44:	e00b      	b.n	8006a5e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	1c59      	adds	r1, r3, #1
 8006a4e:	6279      	str	r1, [r7, #36]	; 0x24
 8006a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	09db      	lsrs	r3, r3, #7
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	2b7f      	cmp	r3, #127	; 0x7f
 8006a62:	d8f0      	bhi.n	8006a46 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1c5a      	adds	r2, r3, #1
 8006a68:	627a      	str	r2, [r7, #36]	; 0x24
 8006a6a:	6a3a      	ldr	r2, [r7, #32]
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	4b25      	ldr	r3, [pc, #148]	; (8006b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	e00b      	b.n	8006a98 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	61f9      	str	r1, [r7, #28]
 8006a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	09db      	lsrs	r3, r3, #7
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9c:	d8f0      	bhi.n	8006a80 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	61fa      	str	r2, [r7, #28]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	e00b      	b.n	8006ad0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	1c59      	adds	r1, r3, #1
 8006ac0:	6179      	str	r1, [r7, #20]
 8006ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	09db      	lsrs	r3, r3, #7
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad4:	d8f0      	bhi.n	8006ab8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	617a      	str	r2, [r7, #20]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ae6:	2218      	movs	r2, #24
 8006ae8:	6879      	ldr	r1, [r7, #4]
 8006aea:	68b8      	ldr	r0, [r7, #8]
 8006aec:	f7ff f804 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006afe:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	4798      	blx	r3
  }
}
 8006b04:	bf00      	nop
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200143d8 	.word	0x200143d8
 8006b10:	200143a8 	.word	0x200143a8

08006b14 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b092      	sub	sp, #72	; 0x48
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b20:	f04f 0120 	mov.w	r1, #32
 8006b24:	f381 8811 	msr	BASEPRI, r1
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	486a      	ldr	r0, [pc, #424]	; (8006cd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006b2c:	f7fe fef3 	bl	8005916 <_PreparePacket>
 8006b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	647b      	str	r3, [r7, #68]	; 0x44
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4b66      	ldr	r3, [pc, #408]	; (8006cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
 8006b46:	e00b      	b.n	8006b60 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	6479      	str	r1, [r7, #68]	; 0x44
 8006b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5c:	09db      	lsrs	r3, r3, #7
 8006b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8006b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b62:	2b7f      	cmp	r3, #127	; 0x7f
 8006b64:	d8f0      	bhi.n	8006b48 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b80:	e00b      	b.n	8006b9a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b88:	1c59      	adds	r1, r3, #1
 8006b8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	09db      	lsrs	r3, r3, #7
 8006b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9e:	d8f0      	bhi.n	8006b82 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7fe fe5f 	bl	800587c <_EncodeStr>
 8006bbe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006bc0:	2209      	movs	r2, #9
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	6938      	ldr	r0, [r7, #16]
 8006bc6:	f7fe ff97 	bl	8005af8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4b40      	ldr	r3, [pc, #256]	; (8006cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8006bde:	e00b      	b.n	8006bf8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	1c59      	adds	r1, r3, #1
 8006be8:	6379      	str	r1, [r7, #52]	; 0x34
 8006bea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	09db      	lsrs	r3, r3, #7
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8006bfc:	d8f0      	bhi.n	8006be0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	637a      	str	r2, [r7, #52]	; 0x34
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c18:	e00b      	b.n	8006c32 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	1c59      	adds	r1, r3, #1
 8006c22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	09db      	lsrs	r3, r3, #7
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	2b7f      	cmp	r3, #127	; 0x7f
 8006c36:	d8f0      	bhi.n	8006c1a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	e00b      	b.n	8006c6c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1c59      	adds	r1, r3, #1
 8006c5c:	6279      	str	r1, [r7, #36]	; 0x24
 8006c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	09db      	lsrs	r3, r3, #7
 8006c6a:	623b      	str	r3, [r7, #32]
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c70:	d8f0      	bhi.n	8006c54 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	627a      	str	r2, [r7, #36]	; 0x24
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	61fb      	str	r3, [r7, #28]
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	e00b      	b.n	8006ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	61f9      	str	r1, [r7, #28]
 8006c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	09db      	lsrs	r3, r3, #7
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca8:	d8f0      	bhi.n	8006c8c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	61fa      	str	r2, [r7, #28]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006cba:	2215      	movs	r2, #21
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	6938      	ldr	r0, [r7, #16]
 8006cc0:	f7fe ff1a 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f383 8811 	msr	BASEPRI, r3
}
 8006cca:	bf00      	nop
 8006ccc:	3748      	adds	r7, #72	; 0x48
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200143d8 	.word	0x200143d8
 8006cd8:	200143a8 	.word	0x200143a8

08006cdc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006cf2:	4b03      	ldr	r3, [pc, #12]	; (8006d00 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	4798      	blx	r3
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200143a8 	.word	0x200143a8

08006d04 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d10:	f04f 0120 	mov.w	r1, #32
 8006d14:	f381 8811 	msr	BASEPRI, r1
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	480b      	ldr	r0, [pc, #44]	; (8006d48 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006d1c:	f7fe fdfb 	bl	8005916 <_PreparePacket>
 8006d20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d22:	2280      	movs	r2, #128	; 0x80
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	6938      	ldr	r0, [r7, #16]
 8006d28:	f7fe fda8 	bl	800587c <_EncodeStr>
 8006d2c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006d2e:	220e      	movs	r2, #14
 8006d30:	68f9      	ldr	r1, [r7, #12]
 8006d32:	6938      	ldr	r0, [r7, #16]
 8006d34:	f7fe fee0 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200143d8 	.word	0x200143d8

08006d4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01a      	beq.n	8006d90 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d015      	beq.n	8006d90 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4798      	blx	r3
 8006d6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d70:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	000a      	movs	r2, r1
 8006d80:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d82:	4613      	mov	r3, r2
 8006d84:	461a      	mov	r2, r3
 8006d86:	4621      	mov	r1, r4
 8006d88:	200d      	movs	r0, #13
 8006d8a:	f7ff fbe5 	bl	8006558 <SEGGER_SYSVIEW_RecordU32x2>
 8006d8e:	e006      	b.n	8006d9e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4619      	mov	r1, r3
 8006d96:	200c      	movs	r0, #12
 8006d98:	f7ff fba2 	bl	80064e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd90      	pop	{r4, r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200143a8 	.word	0x200143a8
 8006dac:	e0001004 	.word	0xe0001004

08006db0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006db6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dba:	f04f 0120 	mov.w	r1, #32
 8006dbe:	f381 8811 	msr	BASEPRI, r1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	4819      	ldr	r0, [pc, #100]	; (8006e2c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006dc6:	f7fe fda6 	bl	8005916 <_PreparePacket>
 8006dca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006dd0:	4b17      	ldr	r3, [pc, #92]	; (8006e30 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	e00b      	b.n	8006dfc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1c59      	adds	r1, r3, #1
 8006dec:	6179      	str	r1, [r7, #20]
 8006dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	09db      	lsrs	r3, r3, #7
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8006e00:	d8f0      	bhi.n	8006de4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	617a      	str	r2, [r7, #20]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006e12:	2202      	movs	r2, #2
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	68b8      	ldr	r0, [r7, #8]
 8006e18:	f7fe fe6e 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f383 8811 	msr	BASEPRI, r3
}
 8006e22:	bf00      	nop
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200143d8 	.word	0x200143d8
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3e:	f04f 0120 	mov.w	r1, #32
 8006e42:	f381 8811 	msr	BASEPRI, r1
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	4807      	ldr	r0, [pc, #28]	; (8006e68 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e4a:	f7fe fd64 	bl	8005916 <_PreparePacket>
 8006e4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e50:	2203      	movs	r2, #3
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6838      	ldr	r0, [r7, #0]
 8006e56:	f7fe fe4f 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f383 8811 	msr	BASEPRI, r3
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	200143d8 	.word	0x200143d8

08006e6c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e72:	f3ef 8311 	mrs	r3, BASEPRI
 8006e76:	f04f 0120 	mov.w	r1, #32
 8006e7a:	f381 8811 	msr	BASEPRI, r1
 8006e7e:	607b      	str	r3, [r7, #4]
 8006e80:	4807      	ldr	r0, [pc, #28]	; (8006ea0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e82:	f7fe fd48 	bl	8005916 <_PreparePacket>
 8006e86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e88:	2212      	movs	r2, #18
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6838      	ldr	r0, [r7, #0]
 8006e8e:	f7fe fe33 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f383 8811 	msr	BASEPRI, r3
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200143d8 	.word	0x200143d8

08006ea4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8006eae:	f04f 0120 	mov.w	r1, #32
 8006eb2:	f381 8811 	msr	BASEPRI, r1
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	4807      	ldr	r0, [pc, #28]	; (8006ed8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006eba:	f7fe fd2c 	bl	8005916 <_PreparePacket>
 8006ebe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ec0:	2211      	movs	r2, #17
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6838      	ldr	r0, [r7, #0]
 8006ec6:	f7fe fe17 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f383 8811 	msr	BASEPRI, r3
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	200143d8 	.word	0x200143d8

08006edc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee8:	f04f 0120 	mov.w	r1, #32
 8006eec:	f381 8811 	msr	BASEPRI, r1
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	4819      	ldr	r0, [pc, #100]	; (8006f58 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ef4:	f7fe fd0f 	bl	8005916 <_PreparePacket>
 8006ef8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006efe:	4b17      	ldr	r3, [pc, #92]	; (8006f5c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	e00b      	b.n	8006f2a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	61f9      	str	r1, [r7, #28]
 8006f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	09db      	lsrs	r3, r3, #7
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f2e:	d8f0      	bhi.n	8006f12 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	61fa      	str	r2, [r7, #28]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f40:	2208      	movs	r2, #8
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	6938      	ldr	r0, [r7, #16]
 8006f46:	f7fe fdd7 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f383 8811 	msr	BASEPRI, r3
}
 8006f50:	bf00      	nop
 8006f52:	3720      	adds	r7, #32
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200143d8 	.word	0x200143d8
 8006f5c:	200143a8 	.word	0x200143a8

08006f60 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f68:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6c:	f04f 0120 	mov.w	r1, #32
 8006f70:	f381 8811 	msr	BASEPRI, r1
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	4819      	ldr	r0, [pc, #100]	; (8006fdc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f78:	f7fe fccd 	bl	8005916 <_PreparePacket>
 8006f7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f82:	4b17      	ldr	r3, [pc, #92]	; (8006fe0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	e00b      	b.n	8006fae <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	1c59      	adds	r1, r3, #1
 8006f9e:	61f9      	str	r1, [r7, #28]
 8006fa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	09db      	lsrs	r3, r3, #7
 8006fac:	61bb      	str	r3, [r7, #24]
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb2:	d8f0      	bhi.n	8006f96 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	61fa      	str	r2, [r7, #28]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	6938      	ldr	r0, [r7, #16]
 8006fca:	f7fe fd95 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f383 8811 	msr	BASEPRI, r3
}
 8006fd4:	bf00      	nop
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200143d8 	.word	0x200143d8
 8006fe0:	200143a8 	.word	0x200143a8

08006fe4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fec:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff0:	f04f 0120 	mov.w	r1, #32
 8006ff4:	f381 8811 	msr	BASEPRI, r1
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	4819      	ldr	r0, [pc, #100]	; (8007060 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ffc:	f7fe fc8b 	bl	8005916 <_PreparePacket>
 8007000:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007006:	4b17      	ldr	r3, [pc, #92]	; (8007064 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	e00b      	b.n	8007032 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	b2da      	uxtb	r2, r3
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	1c59      	adds	r1, r3, #1
 8007022:	61f9      	str	r1, [r7, #28]
 8007024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007028:	b2d2      	uxtb	r2, r2
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	09db      	lsrs	r3, r3, #7
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b7f      	cmp	r3, #127	; 0x7f
 8007036:	d8f0      	bhi.n	800701a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	61fa      	str	r2, [r7, #28]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007048:	2206      	movs	r2, #6
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	6938      	ldr	r0, [r7, #16]
 800704e:	f7fe fd53 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f383 8811 	msr	BASEPRI, r3
}
 8007058:	bf00      	nop
 800705a:	3720      	adds	r7, #32
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	200143d8 	.word	0x200143d8
 8007064:	200143a8 	.word	0x200143a8

08007068 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007072:	f3ef 8311 	mrs	r3, BASEPRI
 8007076:	f04f 0120 	mov.w	r1, #32
 800707a:	f381 8811 	msr	BASEPRI, r1
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	4827      	ldr	r0, [pc, #156]	; (8007120 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007082:	f7fe fc48 	bl	8005916 <_PreparePacket>
 8007086:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	623b      	str	r3, [r7, #32]
 800709e:	e00b      	b.n	80070b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	1c59      	adds	r1, r3, #1
 80070a8:	6279      	str	r1, [r7, #36]	; 0x24
 80070aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	09db      	lsrs	r3, r3, #7
 80070b6:	623b      	str	r3, [r7, #32]
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	2b7f      	cmp	r3, #127	; 0x7f
 80070bc:	d8f0      	bhi.n	80070a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	627a      	str	r2, [r7, #36]	; 0x24
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	61bb      	str	r3, [r7, #24]
 80070d6:	e00b      	b.n	80070f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	1c59      	adds	r1, r3, #1
 80070e0:	61f9      	str	r1, [r7, #28]
 80070e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	09db      	lsrs	r3, r3, #7
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2b7f      	cmp	r3, #127	; 0x7f
 80070f4:	d8f0      	bhi.n	80070d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	61fa      	str	r2, [r7, #28]
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007106:	2207      	movs	r2, #7
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	6938      	ldr	r0, [r7, #16]
 800710c:	f7fe fcf4 	bl	8005af8 <_SendPacket>
  RECORD_END();
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f383 8811 	msr	BASEPRI, r3
}
 8007116:	bf00      	nop
 8007118:	3728      	adds	r7, #40	; 0x28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200143d8 	.word	0x200143d8
 8007124:	200143a8 	.word	0x200143a8

08007128 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	1ad3      	subs	r3, r2, r3
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	200143a8 	.word	0x200143a8

08007148 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b08c      	sub	sp, #48	; 0x30
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007152:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d06d      	beq.n	8007236 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800715a:	4b39      	ldr	r3, [pc, #228]	; (8007240 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007160:	2300      	movs	r3, #0
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
 8007164:	e008      	b.n	8007178 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	3301      	adds	r3, #1
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800717c:	429a      	cmp	r2, r3
 800717e:	d3f2      	bcc.n	8007166 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007180:	e000      	b.n	8007184 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007182:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d055      	beq.n	8007236 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800718a:	f3ef 8311 	mrs	r3, BASEPRI
 800718e:	f04f 0120 	mov.w	r1, #32
 8007192:	f381 8811 	msr	BASEPRI, r1
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	482a      	ldr	r0, [pc, #168]	; (8007244 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800719a:	f7fe fbbc 	bl	8005916 <_PreparePacket>
 800719e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	623b      	str	r3, [r7, #32]
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	6279      	str	r1, [r7, #36]	; 0x24
 80071b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_SendModule+0x66>
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	627a      	str	r2, [r7, #36]	; 0x24
 80071d2:	6a3a      	ldr	r2, [r7, #32]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	e00b      	b.n	8007200 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	1c59      	adds	r1, r3, #1
 80071f0:	61f9      	str	r1, [r7, #28]
 80071f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	09db      	lsrs	r3, r3, #7
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b7f      	cmp	r3, #127	; 0x7f
 8007204:	d8f0      	bhi.n	80071e8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	61fa      	str	r2, [r7, #28]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	b2d2      	uxtb	r2, r2
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2280      	movs	r2, #128	; 0x80
 800721c:	4619      	mov	r1, r3
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7fe fb2c 	bl	800587c <_EncodeStr>
 8007224:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007226:	2216      	movs	r2, #22
 8007228:	68f9      	ldr	r1, [r7, #12]
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f7fe fc64 	bl	8005af8 <_SendPacket>
      RECORD_END();
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007236:	bf00      	nop
 8007238:	3730      	adds	r7, #48	; 0x30
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	200143d0 	.word	0x200143d0
 8007244:	200143d8 	.word	0x200143d8

08007248 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00f      	beq.n	8007276 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007256:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f2      	bne.n	800725c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	200143d0 	.word	0x200143d0

08007284 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800728a:	f3ef 8311 	mrs	r3, BASEPRI
 800728e:	f04f 0120 	mov.w	r1, #32
 8007292:	f381 8811 	msr	BASEPRI, r1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	4817      	ldr	r0, [pc, #92]	; (80072f8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800729a:	f7fe fb3c 	bl	8005916 <_PreparePacket>
 800729e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	617b      	str	r3, [r7, #20]
 80072a8:	4b14      	ldr	r3, [pc, #80]	; (80072fc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	e00b      	b.n	80072c8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1c59      	adds	r1, r3, #1
 80072b8:	6179      	str	r1, [r7, #20]
 80072ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	09db      	lsrs	r3, r3, #7
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b7f      	cmp	r3, #127	; 0x7f
 80072cc:	d8f0      	bhi.n	80072b0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	617a      	str	r2, [r7, #20]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072de:	221b      	movs	r2, #27
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	68b8      	ldr	r0, [r7, #8]
 80072e4:	f7fe fc08 	bl	8005af8 <_SendPacket>
  RECORD_END();
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f383 8811 	msr	BASEPRI, r3
}
 80072ee:	bf00      	nop
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	200143d8 	.word	0x200143d8
 80072fc:	200143d4 	.word	0x200143d4

08007300 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007300:	b40f      	push	{r0, r1, r2, r3}
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800730e:	1d3b      	adds	r3, r7, #4
 8007310:	461a      	mov	r2, r3
 8007312:	2100      	movs	r1, #0
 8007314:	6938      	ldr	r0, [r7, #16]
 8007316:	f7fe fe79 	bl	800600c <_VPrintTarget>
  va_end(ParamList);
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007324:	b004      	add	sp, #16
 8007326:	4770      	bx	lr

08007328 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	; 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007330:	f3ef 8311 	mrs	r3, BASEPRI
 8007334:	f04f 0120 	mov.w	r1, #32
 8007338:	f381 8811 	msr	BASEPRI, r1
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	4827      	ldr	r0, [pc, #156]	; (80073dc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007340:	f7fe fae9 	bl	8005916 <_PreparePacket>
 8007344:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007346:	2280      	movs	r2, #128	; 0x80
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	6938      	ldr	r0, [r7, #16]
 800734c:	f7fe fa96 	bl	800587c <_EncodeStr>
 8007350:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
 8007356:	2301      	movs	r3, #1
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	e00b      	b.n	8007374 <SEGGER_SYSVIEW_Warn+0x4c>
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	b2da      	uxtb	r2, r3
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1c59      	adds	r1, r3, #1
 8007364:	6279      	str	r1, [r7, #36]	; 0x24
 8007366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	09db      	lsrs	r3, r3, #7
 8007372:	623b      	str	r3, [r7, #32]
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	2b7f      	cmp	r3, #127	; 0x7f
 8007378:	d8f0      	bhi.n	800735c <SEGGER_SYSVIEW_Warn+0x34>
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	627a      	str	r2, [r7, #36]	; 0x24
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	2300      	movs	r3, #0
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	e00b      	b.n	80073ac <SEGGER_SYSVIEW_Warn+0x84>
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	1c59      	adds	r1, r3, #1
 800739c:	61f9      	str	r1, [r7, #28]
 800739e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	09db      	lsrs	r3, r3, #7
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b7f      	cmp	r3, #127	; 0x7f
 80073b0:	d8f0      	bhi.n	8007394 <SEGGER_SYSVIEW_Warn+0x6c>
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	61fa      	str	r2, [r7, #28]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80073c2:	221a      	movs	r2, #26
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	6938      	ldr	r0, [r7, #16]
 80073c8:	f7fe fb96 	bl	8005af8 <_SendPacket>
  RECORD_END();
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f383 8811 	msr	BASEPRI, r3
}
 80073d2:	bf00      	nop
 80073d4:	3728      	adds	r7, #40	; 0x28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200143d8 	.word	0x200143d8

080073e0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80073e4:	4b13      	ldr	r3, [pc, #76]	; (8007434 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073e6:	7e1b      	ldrb	r3, [r3, #24]
 80073e8:	4619      	mov	r1, r3
 80073ea:	4a13      	ldr	r2, [pc, #76]	; (8007438 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80073ec:	460b      	mov	r3, r1
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	440b      	add	r3, r1
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4413      	add	r3, r2
 80073f6:	336c      	adds	r3, #108	; 0x6c
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80073fc:	7e1b      	ldrb	r3, [r3, #24]
 80073fe:	4618      	mov	r0, r3
 8007400:	490d      	ldr	r1, [pc, #52]	; (8007438 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007402:	4603      	mov	r3, r0
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	4403      	add	r3, r0
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	440b      	add	r3, r1
 800740c:	3370      	adds	r3, #112	; 0x70
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d00b      	beq.n	800742c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007414:	4b07      	ldr	r3, [pc, #28]	; (8007434 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007416:	789b      	ldrb	r3, [r3, #2]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800741e:	2201      	movs	r2, #1
 8007420:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007422:	f7fe fa85 	bl	8005930 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007426:	4b03      	ldr	r3, [pc, #12]	; (8007434 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007428:	2200      	movs	r2, #0
 800742a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800742c:	4b01      	ldr	r3, [pc, #4]	; (8007434 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800742e:	781b      	ldrb	r3, [r3, #0]
}
 8007430:	4618      	mov	r0, r3
 8007432:	bd80      	pop	{r7, pc}
 8007434:	200143a8 	.word	0x200143a8
 8007438:	20012ee8 	.word	0x20012ee8

0800743c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007440:	4803      	ldr	r0, [pc, #12]	; (8007450 <_cbSendSystemDesc+0x14>)
 8007442:	f7ff fc5f 	bl	8006d04 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007446:	4803      	ldr	r0, [pc, #12]	; (8007454 <_cbSendSystemDesc+0x18>)
 8007448:	f7ff fc5c 	bl	8006d04 <SEGGER_SYSVIEW_SendSysDesc>
}
 800744c:	bf00      	nop
 800744e:	bd80      	pop	{r7, pc}
 8007450:	08007678 	.word	0x08007678
 8007454:	080076ac 	.word	0x080076ac

08007458 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <SEGGER_SYSVIEW_Conf+0x20>)
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	4b05      	ldr	r3, [pc, #20]	; (8007478 <SEGGER_SYSVIEW_Conf+0x20>)
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <SEGGER_SYSVIEW_Conf+0x24>)
 8007466:	4a06      	ldr	r2, [pc, #24]	; (8007480 <SEGGER_SYSVIEW_Conf+0x28>)
 8007468:	f7fe ffc8 	bl	80063fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800746c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007470:	f7ff f808 	bl	8006484 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007474:	bf00      	nop
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000000 	.word	0x20000000
 800747c:	0800743d 	.word	0x0800743d
 8007480:	080076d4 	.word	0x080076d4

08007484 <memcmp>:
 8007484:	b510      	push	{r4, lr}
 8007486:	3901      	subs	r1, #1
 8007488:	4402      	add	r2, r0
 800748a:	4290      	cmp	r0, r2
 800748c:	d101      	bne.n	8007492 <memcmp+0xe>
 800748e:	2000      	movs	r0, #0
 8007490:	e005      	b.n	800749e <memcmp+0x1a>
 8007492:	7803      	ldrb	r3, [r0, #0]
 8007494:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007498:	42a3      	cmp	r3, r4
 800749a:	d001      	beq.n	80074a0 <memcmp+0x1c>
 800749c:	1b18      	subs	r0, r3, r4
 800749e:	bd10      	pop	{r4, pc}
 80074a0:	3001      	adds	r0, #1
 80074a2:	e7f2      	b.n	800748a <memcmp+0x6>

080074a4 <memset>:
 80074a4:	4402      	add	r2, r0
 80074a6:	4603      	mov	r3, r0
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d100      	bne.n	80074ae <memset+0xa>
 80074ac:	4770      	bx	lr
 80074ae:	f803 1b01 	strb.w	r1, [r3], #1
 80074b2:	e7f9      	b.n	80074a8 <memset+0x4>

080074b4 <__libc_init_array>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	4d0d      	ldr	r5, [pc, #52]	; (80074ec <__libc_init_array+0x38>)
 80074b8:	4c0d      	ldr	r4, [pc, #52]	; (80074f0 <__libc_init_array+0x3c>)
 80074ba:	1b64      	subs	r4, r4, r5
 80074bc:	10a4      	asrs	r4, r4, #2
 80074be:	2600      	movs	r6, #0
 80074c0:	42a6      	cmp	r6, r4
 80074c2:	d109      	bne.n	80074d8 <__libc_init_array+0x24>
 80074c4:	4d0b      	ldr	r5, [pc, #44]	; (80074f4 <__libc_init_array+0x40>)
 80074c6:	4c0c      	ldr	r4, [pc, #48]	; (80074f8 <__libc_init_array+0x44>)
 80074c8:	f000 f826 	bl	8007518 <_init>
 80074cc:	1b64      	subs	r4, r4, r5
 80074ce:	10a4      	asrs	r4, r4, #2
 80074d0:	2600      	movs	r6, #0
 80074d2:	42a6      	cmp	r6, r4
 80074d4:	d105      	bne.n	80074e2 <__libc_init_array+0x2e>
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074dc:	4798      	blx	r3
 80074de:	3601      	adds	r6, #1
 80074e0:	e7ee      	b.n	80074c0 <__libc_init_array+0xc>
 80074e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e6:	4798      	blx	r3
 80074e8:	3601      	adds	r6, #1
 80074ea:	e7f2      	b.n	80074d2 <__libc_init_array+0x1e>
 80074ec:	08007704 	.word	0x08007704
 80074f0:	08007704 	.word	0x08007704
 80074f4:	08007704 	.word	0x08007704
 80074f8:	08007708 	.word	0x08007708

080074fc <memcpy>:
 80074fc:	440a      	add	r2, r1
 80074fe:	4291      	cmp	r1, r2
 8007500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007504:	d100      	bne.n	8007508 <memcpy+0xc>
 8007506:	4770      	bx	lr
 8007508:	b510      	push	{r4, lr}
 800750a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800750e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007512:	4291      	cmp	r1, r2
 8007514:	d1f9      	bne.n	800750a <memcpy+0xe>
 8007516:	bd10      	pop	{r4, pc}

08007518 <_init>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr

08007524 <_fini>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr
